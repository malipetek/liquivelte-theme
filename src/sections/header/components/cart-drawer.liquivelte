{% liquid 
	assign min_amounts = '{'
	for item in cart.items
		assign min_amount = item.product.metafields.custom['min-amount'] | default: 0
		assign min_amounts = min_amounts | append: '"' | append: item.id | append: '":' | append: min_amount
		unless forloop.last
			assign min_amounts = min_amounts | append: ','
		endunless
	endfor
	assign min_amounts = min_amounts | append: '}'
%}
<script>
  import cart from 'theme/cart';
  import { Button, Block, View, Page, List, ListItem, Stepper } from 'framework7-liquivelte'; 
  import Loadable from '../../../snippets/loadable.liquivelte';
	import QuantityBox from '../../../snippets/quantity-box.liquivelte';
  import { cartStore, cartOpen } from '../../../scripts/store.module.js';

	import min_amounts from 'theme';
	// const min_amounts_data = JSON.parse(min_amounts);
	console.log('min amounts ', min_amounts);
  let loading = false;

	async function updateLineItem(itemid, quantity) {
		loading = true;
		await fetch(`/cart/update.js`, {
			method: 'POST',
			headers: {
				"Content-Type": "application/json"
			},
			body: JSON.stringify({
					updates: { [itemid]: quantity }
			})
		})
		const cartResponse = await fetch('/cart?view=json');
		const newCartData = await cartResponse.json()
		$cartStore.items = newCartData.items;
		$cartStore.items_subtotal_price = newCartData.items_subtotal_price;

		loading = false;
	}
	function quantityChange(event) {
		updateLineItem(this.id, event.detail.quantity); 
	}

  $: console.log('------> cart ', cart);
  </script>
  <View>
    <Page>
			<List mediaList>
				{% for item in cart.items %}
				<ListItem
				title="{{- item.product_title -}}"
			>
			<div slot="after" class="ml-2"> {{- item.price | money -}} </div>
			<div slot="text" class="cart-item-options">
				{% for option in item.variant_options %}
				<span class="text-gray-500k text-base line-item-option"> {{- option -}} </span> <br>
				{% endfor %}
			</div>
				<img slot="media" src="{{- item.image | img_url: '120x' -}}" width="80" />
				<div slot="after-start">
					<Stepper buttonsOnly="{true}" small raised ></Stepper>
				</div>
			</ListItem>
			{% endfor %}
			</List>
      <Block>
				{% for item in cart.items %}

					<div data-id="{{- item.id -}}" class="cart-item w-full flex mb-10" transition:scale="{ { duration: 300, easing: quintInOut } }" >
						<img src="{{- item.image | img_url: '120x' -}}" alt="cart item product image" class="flex-grow-0 mr-2 w-32" />
						<div class="cart-item-content">
							<div class="cart-item-content__up"> 
								<span class="cart-item-title text-lg"> {{- item.product_title -}} </span>
								<div class="cart-item-options">
									{% for option in item.variant_options %}
									<span class="text-gray-500 text-base line-item-option"> {{- option -}} </span> <br>
									{% endfor %}
								</div>
							</div>
							<Loadable bind:loading > 
								<QuantityBox quantity="{item.quantity}" on:qtychange="{quantityChange.bind(item)}" /> 
							</Loadable>
						</div>
						<div class="cart-item-right">
							<Loadable bind:loading > 
								<div class="pointer" on:click="{() => updateLineItem(item.id, 0) }" > </div>
							</Loadable>
							<div class="cart-item-price text-black text-xl"> {{- item.price | money -}} </div>
						</div> 
					</div>
				{% endfor %}      
			</Block>
    </Page>
  </View>

	<style>
		
	.cart-drawer-bottom {
		align-self: flex-end;
		width: 100%;
	}
.quantity-box {
		display: inline-flex;
		align-self: flex-start;
	}

.cart-drawer-subtotal {
		margin-bottom: 10px;
	}
	.cart-drawer-taxes-notice {
		margin-bottom: 15px;
	}
	.cart-drawer-subtotal-text {
		float: right;
	}
/*================ Spinner Icon ================*/
.icon-spinner {
  -moz-animation: spin 500ms infinite linear;
  -o-animation: spin 500ms infinite linear;
  -webkit-animation: spin 500ms infinite linear;
  animation: spin 500ms infinite linear;
}

@-webkit-keyframes spin {
  0% {
    -ms-transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -ms-transform: rotate(360deg);
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
	</style>