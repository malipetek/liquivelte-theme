{% liquid 
  assign account_url = routes.account_login_url
  if member
    assign account_url = routes.account_url
  endif

  assign account_text = 'customer.log_in' | t
  if customer
    assign account_text = 'customer.account_fallback' | t
  endif

  assign logo_alt = section.settings.logo.alt | default: shop.name | escape
  assign logo_height = section.settings.logo_width | divided_by: section.settings.logo.aspect_ratio
  assign logo_html = section.settings.logo | image_url: width: section.settings.width | image_tag: class: 'header__heading-logo', widths: '50, 100, 150, 200, 250, 300, 400, 500', height: logo_height, width: section.settings.logo_width, alt: logo_alt

  assign potential_action_target = request.origin | append: routes.search_url | append: "?q={search_term_string}"
  assign menu = linklists[section.settings.menu]
  assign menu_json = '{ "title": "' | append: menu.title | append: '", "levels": ' | append: menu.levels | append: ', "links": ['
  for link in menu.links
    assign menu_json = menu_json | append: '{ "url": "' | append: link.url | append: '", "title": "' | append: link.title | append: '"'

    if link.links
      assign menu_json = menu_json | append: ',"links": ['
      for link_2 in link.links
        assign menu_json = menu_json | append: '{ "url": "' | append: link_2.url | append: '", "title": "' | append: link_2.title | append: '"' 
        
        if link_2.links
          assign menu_json = menu_json | append: ',"links": ['
          for link_3 in link_2.links
            assign menu_json = menu_json | append: '{ "url": "' | append: link_3.url | append: '", "title": "' | append: link_3.title | append: '"}' 
            
            
            unless forloop.last
              assign menu_json = menu_json | append: ','
            endunless
          endfor
          assign menu_json = menu_json | append: ']'
        endif
        
        assign menu_json = menu_json | append: '}' 

        unless forloop.last
          assign menu_json = menu_json | append: ','
        endunless
      endfor
      assign menu_json = menu_json | append: ']'
    endif

    assign menu_json = menu_json | append: '}' 
    
    unless forloop.last
      assign menu_json = menu_json | append: ','
    endunless
  endfor
  assign menu_json = menu_json | append: ']}'

%}
<script>
  import { onMount } from 'svelte';
  import { cartStore, cartOpen } from '../../scripts/store.module.js';
  import cart from 'theme';
  import shop from 'theme';
  import shop.name from 'theme';
  const section = {};
  import section.settings from 'theme';
  import menu_json from 'theme';
  section.settings.menu = JSON.parse(menu_json);
  import Navigation from './components/navigation.liquivelte';
  import MobileNavigation from './components/mobile-navigation.liquivelte';
  import PredictiveSearch from './components/predictive-search.liquivelte';
  import CartDrawer from './components/cart-drawer.liquivelte';
  import Logo from './components/logo.liquivelte';
  import DetailsModal from '../../snippets/details-modal.liquivelte';
  import { Appbar, Panel, Button, Link, Badge, Block, View, Page, Popup, Searchbar, Navbar, Subnavbar } from 'framework7-liquivelte'; 
  import Icon from "../../snippets/icon.liquivelte";
  import settings from 'theme'; 

  import logo_html from 'theme';
  // console.log('settings ', settings); 
  
  import routes from 'theme';
  import request from 'theme';

  import account_url from 'theme';
  import account_text from 'theme';

  let initialized = false;
  // console.log('section header ', section);
  console.log('section.settings.menu ', section.settings.menu);

  cartStore.subscribe(state => {
    if(state) {
      cart = state;
    }
  });

  onMount(() => initialized = true);
</script>

  <Panel resizable left reveal swipe swipeOnlyClose="{true}"  >
    <Page>
      <MobileNavigation links="{{- section.settings.menu.links -}}"></MobileNavigation>
    </Page>
  </Panel>
  <Popup classes="cart-popup" swipe swipeToClose >
    <Page>
      <CartDrawer />
    </Page>
  </Popup>
  <header> 
    <Appbar>
      <div class="left pl-[10px]">
        <div class="md:hidden">
          <Button small panelToggle="left" classes="display-flex" >
            <Icon name="icon-hamburger" width="25" />
          </Button>
        </div>
        <div class="hidden md:flex ">
            <Navigation links="{{- section.settings.menu.links -}}" ></Navigation>
        </div>
      </div>
      <div class="center">
        <Logo />
      </div>
      <div class="right pr-[10px]">
        <Link small searchbarEnable=".searchbar" classes="display-flex" >
          <div class="icon relative">
            <Icon name="icon-search" width="28" />
          </div>
        </Link>
      </div>
    </Appbar>
  </header>

{% if settings.cart_type == "notification" %}
  {% include 'cart-notification', color_scheme: section.settings.color_scheme %}
{% endif %}

{% include 'application-ld', type: 'shop' %}

{% if request.page_type == 'index' %}
  {% include 'application-ld', type: 'shop2' %}
{% endif %}

<style global lang="postcss">
  :root {
    --f7-panel-right-width: 400px;
  }
  .panel {
    min-width: 100px;
    max-width: 90vw;
  }

  header-drawer {
      justify-self: start;
      margin-left: -1.2rem;
    }
  
    .header__heading-logo {
      max-width: var(--section-settings-logo_width);
    }
  
    @media screen and (min-width: 990px) {
      header-drawer {
        display: none;
      }
    }
  
    .menu-drawer-container {
      display: flex;
    }
  
    .list-menu {
      list-style: none;
      padding: 0;
      margin: 0;
    }
  
    .list-menu--inline {
      display: inline-flex;
      flex-wrap: wrap;
    }
  
    summary.list-menu__item {
      padding-right: 2.7rem;
    }
  
    .list-menu__item {
      display: flex;
      align-items: center;
      line-height: calc(1 + 0.3 / var(--font-body-scale));
    }
  
    .list-menu__item--link {
      text-decoration: none;
      padding-bottom: 1rem;
      padding-top: 1rem;
      line-height: calc(1 + 0.8 / var(--font-body-scale));
    }
  
    @media screen and (min-width: 750px) {
      .list-menu__item--link {
        padding-bottom: 0.5rem;
        padding-top: 0.5rem;
      }
    }
    .header {
      padding-top: var(--section-settings-padding_top); /* {{  | times: 0.5 | round: 0 }}px; */
      padding-bottom: var(--section-settings-padding_bottom); /* {{  | times: 0.5 | round: 0 }}px; */
    }
  
    .section-header {
      margin-bottom: var(--section-settings-margin_bottom); /* | times: 0.75 | round: 0 }}px; */
    }
  
    @media screen and (min-width: 750px) {
      .section-header {
        margin-bottom: var(--section-settings-margin_bottom);
      }
    }
  
    @media screen and (min-width: 990px) {
      .header {
        padding-top: var(--section-settings-padding_top);
        padding-bottom: var(--section-settings-padding_bottom);
      }
    }
    :global(.header__icon svg) {
      width: 40px;
    }
    :global(.menu-drawer__navigation svg) {
      width: 40px;
    } 
  </style>
{% schema %}
{
  "name": "t:sections.header.name",
  "class": "section-header",
  "settings": [
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "label": "t:sections.all.colors.accent_1.label",
          "value": "accent-1"
        },
        {
          "label": "t:sections.all.colors.accent_2.label",
          "value": "accent-2"
        },
        {
          "label": "t:sections.all.colors.background_1.label",
          "value": "background-1"
        },
        {
          "label": "t:sections.all.colors.background_2.label",
          "value": "background-2"
        },
        {
          "label": "t:sections.all.colors.inverse.label",
          "value": "inverse"
        }
      ],
      "default": "background-1",
      "label": "t:sections.all.colors.label"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "t:sections.header.settings.logo.label"
    },
    {
      "type": "range",
      "id": "logo_width",
      "min": 50,
      "max": 250,
      "step": 10,
      "default": 100,
      "unit": "t:sections.header.settings.logo_width.unit",
      "label": "t:sections.header.settings.logo_width.label"
    },
    {
      "type": "select",
      "id": "logo_position",
      "options": [
        {
          "label": "t:sections.header.settings.logo_position.options__2.label",
          "value": "top-left"
        },
        {
          "label": "t:sections.header.settings.logo_position.options__3.label",
          "value": "top-center"
        },
        {
          "label": "t:sections.header.settings.logo_position.options__1.label",
          "value": "middle-left"
        },
        {
          "label": "t:sections.header.settings.logo_position.options__4.label",
          "value": "middle-center"
        }
      ],
      "default": "middle-left",
      "label": "t:sections.header.settings.logo_position.label"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    },
    {
      "type": "select",
      "id": "menu_type_desktop",
      "options": [
        {
          "label": "t:sections.header.settings.menu_type_desktop.options__1.label",
          "value": "dropdown"
        },
        {
          "label": "t:sections.header.settings.menu_type_desktop.options__2.label",
          "value": "mega"
        }
      ],
      "default": "dropdown",
      "label": "t:sections.header.settings.menu_type_desktop.label",
      "info": "t:sections.header.settings.menu_type_desktop.info"
    },
    {
      "type": "checkbox",
      "id": "show_line_separator",
      "default": true,
      "label": "t:sections.header.settings.show_line_separator.label"
    },
    {
      "type": "checkbox",
      "id": "enable_sticky_header",
      "default": true,
      "label": "t:sections.header.settings.enable_sticky_header.label",
      "info": "t:sections.header.settings.enable_sticky_header.info"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.mobile_layout.content"
    },
    {
      "type": "select",
      "id": "mobile_logo_position",
      "options": [
        {
          "label": "t:sections.header.settings.mobile_logo_position.options__1.label",
          "value": "center"
        },
        {
          "label": "t:sections.header.settings.mobile_logo_position.options__2.label",
          "value": "left"
        }
      ],
      "default": "center",
      "label": "t:sections.header.settings.mobile_logo_position.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.header.settings.margin_bottom.label",
      "default": 8
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 20
    }
  ]
}
{% endschema %}


