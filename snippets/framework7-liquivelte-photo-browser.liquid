	{%- liquid
			
			
			assign init = null
			assign params = null
			assign photos = null
			assign exposition = null
			assign expositionHideCaptions = null
			assign type = null
			assign navbar = null
			assign toolbar = null
			assign theme = null
			assign captionsTheme = null
			assign iconsColor = null
			assign swipeToClose = null
			assign pageBackLinkText = null
			assign popupCloseLinkText = null
			assign navbarOfText = null
			assign navbarShowCount = null
			assign swiper = null
			assign url = null
			assign routableModals = null
			assign virtualSlides = null
			assign view = null
			assign renderNavbar = null
			assign renderToolbar = null
			assign renderCaption = null
			assign renderObject = null
			assign renderLazyPhoto = null
			assign renderPhoto = null
			assign renderPage = null
			assign renderPopup = null
			assign renderStandalone = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'init'
		assign init = lv_propValue
	endif
	if lv_propName == 'params'
		assign params = lv_propValue
	endif
	if lv_propName == 'photos'
		assign photos = lv_propValue
	endif
	if lv_propName == 'exposition'
		assign exposition = lv_propValue
	endif
	if lv_propName == 'expositionHideCaptions'
		assign expositionHideCaptions = lv_propValue
	endif
	if lv_propName == 'type'
		assign type = lv_propValue
	endif
	if lv_propName == 'navbar'
		assign navbar = lv_propValue
	endif
	if lv_propName == 'toolbar'
		assign toolbar = lv_propValue
	endif
	if lv_propName == 'theme'
		assign theme = lv_propValue
	endif
	if lv_propName == 'captionsTheme'
		assign captionsTheme = lv_propValue
	endif
	if lv_propName == 'iconsColor'
		assign iconsColor = lv_propValue
	endif
	if lv_propName == 'swipeToClose'
		assign swipeToClose = lv_propValue
	endif
	if lv_propName == 'pageBackLinkText'
		assign pageBackLinkText = lv_propValue
	endif
	if lv_propName == 'popupCloseLinkText'
		assign popupCloseLinkText = lv_propValue
	endif
	if lv_propName == 'navbarOfText'
		assign navbarOfText = lv_propValue
	endif
	if lv_propName == 'navbarShowCount'
		assign navbarShowCount = lv_propValue
	endif
	if lv_propName == 'swiper'
		assign swiper = lv_propValue
	endif
	if lv_propName == 'url'
		assign url = lv_propValue
	endif
	if lv_propName == 'routableModals'
		assign routableModals = lv_propValue
	endif
	if lv_propName == 'virtualSlides'
		assign virtualSlides = lv_propValue
	endif
	if lv_propName == 'view'
		assign view = lv_propValue
	endif
	if lv_propName == 'renderNavbar'
		assign renderNavbar = lv_propValue
	endif
	if lv_propName == 'renderToolbar'
		assign renderToolbar = lv_propValue
	endif
	if lv_propName == 'renderCaption'
		assign renderCaption = lv_propValue
	endif
	if lv_propName == 'renderObject'
		assign renderObject = lv_propValue
	endif
	if lv_propName == 'renderLazyPhoto'
		assign renderLazyPhoto = lv_propValue
	endif
	if lv_propName == 'renderPhoto'
		assign renderPhoto = lv_propValue
	endif
	if lv_propName == 'renderPage'
		assign renderPage = lv_propValue
	endif
	if lv_propName == 'renderPopup'
		assign renderPopup = lv_propValue
	endif
	if lv_propName == 'renderStandalone'
		assign renderStandalone = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'framework7-liquivelte-photo-browser'
						assign slot_default_framework7-liquivelte_photo-browser = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component photo-browser" data-liquivelte-component-name="photo-browser.liquivelte">
	{%- endunless -%}
	

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign init = null
			assign params = null
			assign photos = null
			assign exposition = null
			assign expositionHideCaptions = null
			assign type = null
			assign navbar = null
			assign toolbar = null
			assign theme = null
			assign captionsTheme = null
			assign iconsColor = null
			assign swipeToClose = null
			assign pageBackLinkText = null
			assign popupCloseLinkText = null
			assign navbarOfText = null
			assign navbarShowCount = null
			assign swiper = null
			assign url = null
			assign routableModals = null
			assign virtualSlides = null
			assign view = null
			assign renderNavbar = null
			assign renderToolbar = null
			assign renderCaption = null
			assign renderObject = null
			assign renderLazyPhoto = null
			assign renderPhoto = null
			assign renderPage = null
			assign renderPopup = null
			assign renderStandalone = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_photo-browser = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	