	{%- liquid
			
			
			assign src = null
			assign classes = null
			assign loading = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'src' and src == blank
		assign src = lv_propValue
	endif
	if lv_propName == 'classes' and classes == blank
		assign classes = lv_propValue
	endif
	if lv_propName == 'loading' and loading == blank
		assign loading = lv_propValue
	endif
	if lv_propName == 'alt' and alt == blank
		assign alt = lv_propValue
	endif
	if lv_propName == 'lazy' and lazy == blank
		assign lazy = lv_propValue
	endif
	if lv_propName == 'aspect_ratio' and aspect_ratio == blank
		assign aspect_ratio = lv_propValue
	endif
	if lv_propName == 'sizes' and sizes == blank
		assign sizes = lv_propValue
	endif
	if lv_propName == 'srcset' and srcset == blank
		assign srcset = lv_propValue
	endif
	if lv_propName == 'srcset_sizes' and srcset_sizes == blank
		assign srcset_sizes = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'Image'
						assign slot_default_image = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component Image" data-liquivelte-component-name="Image.liquivelte">
		{% assign component_include_count_slot_offset = 0 %}
		{% assign component_include_count = 0 %}
		{% assign component_include_depth = 0 %}
		<script> window.cicR = 0; </script>
	{%- endunless -%}
	{%- liquid
  assign pageurl = content_for_header| split:'"pageurl":"' | last | split:'"' | first 
  assign urlparams = pageurl | split: '?' | last | replace:'\/','/' | replace:'%20',' ' | replace:'\u0026','&' | split: '&' 

  for param in urlparams    
    assign key = param | split: '=' | first 
    assign value = param | split: '=' | last 
    if key == 'sizetest' 
      assign image_test_mode = true 
    endif 
  endfor 
-%}


{% liquid
  assign default_sizes = '320@320, 640@640, 768@768, 960@960, 1024@1024, 1280@1280, 1440@1440, 1536@1536, 1920@1920' 
  if sizes contains '%' or sizes contains 'vw' 
    assign image_sizes = default_sizes | replace: ' ', '' | split: ',' 
  else 
    assign image_sizes = sizes | replace: ' ', '' | split: ',' 
  endif 

  assign aspect_ratio = source.aspect_ratio | default: 1
  if source.aspect_ratio > 0 and aspect_ratio == blank
    assign aspect_ratio = source.aspect_ratio
  elsif aspect_ratio == blank
    assign aspect_ratio = 1 
  endif
%}
{% liquid
      assign srcset = '' 
      for size in image_sizes 

      unless size contains '@' 
        assign _size = size
        assign size = _size | append: '@' | append: _size 
      endunless 
      assign img_width = size | split: '@' | first 
        
      assign img_width_x2 = img_width | times: 2 
      assign img_width_x3 = img_width | times: 3 
      assign img_width_x = img_width | append: 'x' 
      assign img_width_x_x2 = img_width_x2 | append: 'x' 
      assign img_width_x_x3 = img_width_x3 | append: 'x'
    
      if source.aspect_ratio > 0 and aspect_ratio == blank
        assign aspect_ratio = source.aspect_ratio
      elsif aspect_ratio == blank
        assign aspect_ratio = 1 
      endif 
      
      if image_test_mode 
        assign srcset = srcset | append: 'https://via.placeholder.com/' | append: img_width_x 
          if square == true
            assign srcset = srcset | append: img_width
          else 
          assign a = img_width | divided_by: aspect_ratio | ceil
          assign srcset = srcset | append: a | append: img_width  
          endif 
          assign srcset = srcset | append: ' w,'
        assign srcset = srcset | append: 'https://via.placeholder.com/' | append: img_width_x_x2 
          if square == true
            assign srcset = srcset | append: img_width_x2
          else 
          assign a = img_width_x2 | divided_by: aspect_ratio | ceil
          assign srcset = srcset | append: a | append: img_width_x2  
          endif 
          assign srcset = srcset | append: ' w,'
        assign srcset = srcset | append: 'https://via.placeholder.com/' | append: img_width_x_x3 
          if square == true
            assign srcset = srcset | append: img_width_x3
          else 
          assign a = img_width_x3 | divided_by: aspect_ratio | ceil
          assign srcset = srcset | append: a | append: img_width_x3  
          endif 
          assign srcset = srcset | append: ' w'
      else 
        if square == true 
          assign a = source | image_url: width: img_width_x, height: img_width_x 
          assign srcset = srcset | append: a | append: ' ' | append: img_width | append: 'w, '
          assign a = source | image_url: width: img_width_x2, height: img_width_x2 
          assign srcset = srcset | append: a | append: ' ' | append: img_width_x2 | append: 'w, '
          assign a = source | image_url: width: img_width_x3, height: img_width_x3 
          assign srcset = srcset | append: a | append: ' ' | append: img_width_x3 | append: 'w '
        else 
          assign a = source | image_url: width: img_width
          assign srcset = srcset | append: a | append: ' ' | append: img_width | append: 'w, '
          assign a = source | image_url: width: img_width_x2
          assign srcset = srcset | append: a | append: ' ' | append: img_width_x2 | append: 'w, '
          assign a = source | image_url: width: img_width_x3
          assign srcset = srcset | append: a | append: ' ' | append: img_width_x3 | append: 'w '
        endif 
      endif 
      unless forloop.last 
        assign srcset = srcset | append: ',' 
      endunless 
    endfor 
%}
 
{% liquid
      assign srcset_sizes = ''
      assign prev_viewport_size_with_unit = '' 
      for size in sizes 
      unless size contains '@'
          unless size contains 'vw' or size contains 'px' or size contains '%'
            assign default_size = size | append: 'px' 
          else
            assign default_size = size
          endunless 
          assign prev_viewport_size_with_unit_plus_1 = prev_viewport_size_with_unit | plus: 1
          assign srcset_sizes = srcset_sizes | append: '@media(min-width: ' | append: prev_viewport_size_with_unit_plus_1 | append: 'px' | append: ') ' | append: default_size
          unless forloop.last
            assign srcset_sizes = srcset_sizes | append: ', '
          endunless
          continue
        endunless
      
        assign img_width = size | split: '@' | first 
        assign viewport_size = size | split: '@' | last 
  
        unless viewport_size contains 'vw' or viewport_size contains 'px' or viewport_size contains '%'
          assign viewport_size_with_unit = viewport_size | append: 'px' 
        endunless 
      
        unless img_width contains 'vw' or img_width contains 'px' or img_width contains '%'
          assign img_width_with_unit = img_width | append: 'px' 
        else
          assign img_width_with_unit = img_width 
        endunless 
      
        if viewport_size == 'fixed' 
          assign srcset_sizes = srcset_sizes | append: img_width_with_unit
        else 
        assign srcset_sizes = srcset_sizes | append: '@media '
        if prev_viewport_size_with_unit != blank 
          assign srcset_sizes = srcset_sizes | append: '(min-width: ' | append: prev_viewport_size_with_unit | append: ') and '
        endif 
        assign srcset_sizes = srcset_sizes | append: '(max-width: ' | append: viewport_size_with_unit | append: ') ' | append: img_width_with_unit
        assign prev_viewport_size_with_unit = viewport_size_with_unit 
      endif 
      unless forloop.last 
        assign srcset_sizes = srcset_sizes | append: ',' 
      endunless 
    endfor 
%}
{% liquid 
  assign alt = alt | default: source.alt
%}


  <img
    srcset="{{ srcset }}"
    sizes="{{ srcset_sizes }}"
    class="{{ classes }}"
    src="{{ source | image_url: width: 2500 }}" liquivelte-value-cache="image_url§{{source | escape -}}, {{width}}, {{2500}}§{{source| image_url: width: 2500  }}"
    alt="{{ alt | escape }}" liquivelte-value-cache="§{{alt| escape  }}"
    width="{{ source.width }}"
    height="{{ source.width | divided_by: aspect_ratio | ceil }}" liquivelte-value-cache="§{{source.width| divided_by: aspect_ratio | ceil  }}"
    loading="{{ loading }}"
  />





	
						
		
	<script type="text/noscript" class="instance-data" >
		{% assign component_include_count = component_include_count | plus: 1 %}
		{
	"alt" : {{ alt | json }} , "lazy" : {{ lazy | json }} , "aspect_ratio" : {{ aspect_ratio | json }} , "sizes" : {{ sizes | json }} , "srcset" : {{ srcset | json }} , "srcset_sizes" : {{ srcset_sizes | json }}
	,
	"sourceƒƒwidth": {{ source.width | json }} , "sourceƒƒaspect_ratio": {{ source.aspect_ratio | json }} , "sourceƒƒalt": {{ source.alt | json }}
		,
		"forloop_index": {{ forloop.index0 | default: 0 | json }},
		"component_index": {{ component_include_count | plus: component_include_depth }},
		"component_name": "Image"
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
		const themeImports = (JSONparse(propScript.previousElementSibling.textContent));
		wrapper.svelteProps = wrapper.svelteProps || {};
		Object.keys(themeImports).forEach(key => {
			if(key == 'forloop_index' || key == 'component_index' || key == 'component_name') return;
			wrapper.svelteProps[key] = [
				...(wrapper.svelteProps[key] || []),
				{ forloop_index: themeImports.index, component_index: themeImports.component_index, component_name: themeImports.component_name, value: themeImports[key] }
			];
		});
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign src = null
			assign classes = null
			assign loading = null
			-%}
	{%- liquid 
			assign slot_default_image = null
			
			-%}
	
	{%- unless sub_include -%} 
	</div>
	{% assign component_include_count = 0 %}
	{%- endunless -%}
	