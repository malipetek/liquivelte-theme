	{%- liquid
			
			
			assign classes = null
			assign type = null
			assign name = null
			assign value = null
			assign placeholder = null
			assign inputId = null
			assign size = null
			assign accept = null
			assign autocomplete = null
			assign autocorrect = null
			assign autocapitalize = null
			assign spellcheck = null
			assign autofocus = null
			assign autosave = null
			assign checked = null
			assign disabled = null
			assign max = null
			assign min = null
			assign step = null
			assign maxlength = null
			assign minlength = null
			assign multiple = null
			assign readonly = null
			assign required = null
			assign inputStyle = null
			assign pattern = null
			assign validate = null
			assign validateOnBlur = null
			assign onValidate = null
			assign tabindex = null
			assign resizable = null
			assign clearButton = null
			assign noFormStoreData = null
			assign noStoreData = null
			assign ignoreStoreData = null
			assign errorMessage = null
			assign errorMessageForce = null
			assign info = null
			assign outline = null
			assign wrap = null
			assign dropdown = null
			assign calendarParams = null
			assign colorPickerParams = null
			assign textEditorParams = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'classes' and classes == blank
		assign classes = lv_propValue
	endif
	if lv_propName == 'type' and type == blank
		assign type = lv_propValue
	endif
	if lv_propName == 'name' and name == blank
		assign name = lv_propValue
	endif
	if lv_propName == 'value' and value == blank
		assign value = lv_propValue
	endif
	if lv_propName == 'placeholder' and placeholder == blank
		assign placeholder = lv_propValue
	endif
	if lv_propName == 'inputId' and inputId == blank
		assign inputId = lv_propValue
	endif
	if lv_propName == 'size' and size == blank
		assign size = lv_propValue
	endif
	if lv_propName == 'accept' and accept == blank
		assign accept = lv_propValue
	endif
	if lv_propName == 'autocomplete' and autocomplete == blank
		assign autocomplete = lv_propValue
	endif
	if lv_propName == 'autocorrect' and autocorrect == blank
		assign autocorrect = lv_propValue
	endif
	if lv_propName == 'autocapitalize' and autocapitalize == blank
		assign autocapitalize = lv_propValue
	endif
	if lv_propName == 'spellcheck' and spellcheck == blank
		assign spellcheck = lv_propValue
	endif
	if lv_propName == 'autofocus' and autofocus == blank
		assign autofocus = lv_propValue
	endif
	if lv_propName == 'autosave' and autosave == blank
		assign autosave = lv_propValue
	endif
	if lv_propName == 'checked' and checked == blank
		assign checked = lv_propValue
	endif
	if lv_propName == 'disabled' and disabled == blank
		assign disabled = lv_propValue
	endif
	if lv_propName == 'max' and max == blank
		assign max = lv_propValue
	endif
	if lv_propName == 'min' and min == blank
		assign min = lv_propValue
	endif
	if lv_propName == 'step' and step == blank
		assign step = lv_propValue
	endif
	if lv_propName == 'maxlength' and maxlength == blank
		assign maxlength = lv_propValue
	endif
	if lv_propName == 'minlength' and minlength == blank
		assign minlength = lv_propValue
	endif
	if lv_propName == 'multiple' and multiple == blank
		assign multiple = lv_propValue
	endif
	if lv_propName == 'readonly' and readonly == blank
		assign readonly = lv_propValue
	endif
	if lv_propName == 'required' and required == blank
		assign required = lv_propValue
	endif
	if lv_propName == 'inputStyle' and inputStyle == blank
		assign inputStyle = lv_propValue
	endif
	if lv_propName == 'pattern' and pattern == blank
		assign pattern = lv_propValue
	endif
	if lv_propName == 'validate' and validate == blank
		assign validate = lv_propValue
	endif
	if lv_propName == 'validateOnBlur' and validateOnBlur == blank
		assign validateOnBlur = lv_propValue
	endif
	if lv_propName == 'onValidate' and onValidate == blank
		assign onValidate = lv_propValue
	endif
	if lv_propName == 'tabindex' and tabindex == blank
		assign tabindex = lv_propValue
	endif
	if lv_propName == 'resizable' and resizable == blank
		assign resizable = lv_propValue
	endif
	if lv_propName == 'clearButton' and clearButton == blank
		assign clearButton = lv_propValue
	endif
	if lv_propName == 'noFormStoreData' and noFormStoreData == blank
		assign noFormStoreData = lv_propValue
	endif
	if lv_propName == 'noStoreData' and noStoreData == blank
		assign noStoreData = lv_propValue
	endif
	if lv_propName == 'ignoreStoreData' and ignoreStoreData == blank
		assign ignoreStoreData = lv_propValue
	endif
	if lv_propName == 'errorMessage' and errorMessage == blank
		assign errorMessage = lv_propValue
	endif
	if lv_propName == 'errorMessageForce' and errorMessageForce == blank
		assign errorMessageForce = lv_propValue
	endif
	if lv_propName == 'info' and info == blank
		assign info = lv_propValue
	endif
	if lv_propName == 'outline' and outline == blank
		assign outline = lv_propValue
	endif
	if lv_propName == 'wrap' and wrap == blank
		assign wrap = lv_propValue
	endif
	if lv_propName == 'dropdown' and dropdown == blank
		assign dropdown = lv_propValue
	endif
	if lv_propName == 'calendarParams' and calendarParams == blank
		assign calendarParams = lv_propValue
	endif
	if lv_propName == 'colorPickerParams' and colorPickerParams == blank
		assign colorPickerParams = lv_propValue
	endif
	if lv_propName == 'textEditorParams' and textEditorParams == blank
		assign textEditorParams = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					if lv_module == 'framework7-liquivelte-input' and lv_name == 'error-message'
						assign slot_error-message_framework7-liquivelte_input = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-input' and lv_name == 'info'
						assign slot_info_framework7-liquivelte_input = lv_value | strip
					endif
					
					if lv_module == 'framework7-liquivelte-input'
						assign slot_default_framework7-liquivelte_input = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component input" data-liquivelte-component-name="input.liquivelte">
		{% assign component_include_count_slot_offset = 0 %}
		{% assign component_include_count = 0 %}
		{% assign component_include_depth = 0 %}
		<script> window.cicR = 0; </script>
	{%- endunless -%}
	

<!-- svelte-ignore a11y-autofocus -->
{#if wrap}
  <div class={wrapClasses} {...restProps($$restProps)}>
    {#if type === 'select'}
      <select
        bind:this={inputEl}
        style={inputStyle}
        {name}
        {placeholder}
        id={inputId}
        {size}
        {accept}
        {autocomplete}
        {autocorrect}
        {autocapitalize}
        {spellcheck}
        {autofocus}
        {autosave}
        {checked}
        {disabled}
        {max}
        {maxlength}
        {min}
        {minlength}
        {step}
        {multiple}
        {readonly}
        {required}
        {pattern}
        validate={typeof validate === 'string' && validate.length ? validate : undefined}
        data-validate={validate === true ||
        validate === '' ||
        validateOnBlur === true ||
        validateOnBlur === ''
          ? true
          : undefined}
        data-validate-on-blur={validateOnBlur === true || validateOnBlur === '' ? true : undefined}
        {tabindex}
        data-error-message={errorMessageForce ? undefined : errorMessage}
        class={inputClassName}
        on:focus={onFocus}
        on:blur={onBlur}
        on:input={onInput}
        on:change={onChange}
        value={inputValue}
      >
        
		{%- if slot_default_framework7-liquivelte_input != blank -%}
			{{- slot_default_framework7-liquivelte_input -}}
		{%- endif -%}
	
      </select>
    {:else if type === 'textarea'}
      <textarea
        bind:this={inputEl}
        style={inputStyle}
        {name}
        {placeholder}
        id={inputId}
        {size}
        {accept}
        {autocomplete}
        {autocorrect}
        {autocapitalize}
        {spellcheck}
        {autofocus}
        {autosave}
        {checked}
        {disabled}
        {max}
        {maxlength}
        {min}
        {minlength}
        {step}
        {multiple}
        {readonly}
        {required}
        {pattern}
        validate={typeof validate === 'string' && validate.length ? validate : undefined}
        data-validate={validate === true ||
        validate === '' ||
        validateOnBlur === true ||
        validateOnBlur === ''
          ? true
          : undefined}
        data-validate-on-blur={validateOnBlur === true || validateOnBlur === '' ? true : undefined}
        {tabindex}
        data-error-message={errorMessageForce ? undefined : errorMessage}
        class={inputClassName}
        on:focus={onFocus}
        on:blur={onBlur}
        on:input={onInput}
        on:change={onChange}
        value={inputValue}
      />
    {:else if type === 'toggle'}
      
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Toggle %}{checked}-kvsp-1-prsp-{readonly}-kvsp-1-prsp-{name}-kvsp-1-prsp-{value}-kvsp-1-prsp-{disabled}-kvsp-1-prsp-id-kvsp-{inputId}-prsp-change-kvsp-{onChange}{% endcapture %}
{% assign modulename = basename | append: 'toggle' %}
{% include modulename, liquivelte: true, props: props_Toggle, sub_include: true, basename: ''  %}
{% assign props = '' %}
    {:else if type === 'range'}
      
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Range %}{value}-kvsp-1-prsp-{disabled}-kvsp-1-prsp-{min}-kvsp-1-prsp-{max}-kvsp-1-prsp-{step}-kvsp-1-prsp-{name}-kvsp-1-prsp-id-kvsp-{inputId}-prsp-input-kvsp-{true}-prsp-rangeChange-kvsp-{onChange}{% endcapture %}
{% assign modulename = basename | append: 'range' %}
{% include modulename, liquivelte: true, props: props_Range, sub_include: true, basename: ''  %}
{% assign props = '' %}
    {:else if type === 'texteditor'}
      
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_TextEditor %}value-kvsp-{typeof value === 'undefined' ? '' : value}-prsp-{resizable}-kvsp-1-prsp-{placeholder}-kvsp-1-prsp-onTextEditorFocus-kvsp-{onFocus}-prsp-onTextEditorBlur-kvsp-{onBlur}-prsp-onTextEditorInput-kvsp-{onInput}-prsp-onTextEditorChange-kvsp-{onChange}{% endcapture %}
{% assign modulename = basename | append: 'text-editor' %}
{% include modulename, liquivelte: true, props: props_TextEditor, sub_include: true, basename: ''  %}
{% assign props = '' %}
    {:else}
      <input
        bind:this={inputEl}
        style={inputStyle}
        {name}
        type={inputType}
        {placeholder}
        id={inputId}
        {size}
        {accept}
        {autocomplete}
        {autocorrect}
        {autocapitalize}
        {spellcheck}
        {autofocus}
        {autosave}
        {checked}
        {disabled}
        {max}
        {maxlength}
        {min}
        {minlength}
        {step}
        {multiple}
        {readonly}
        {required}
        {pattern}
        validate={typeof validate === 'string' && validate.length ? validate : undefined}
        data-validate={validate === true ||
        validate === '' ||
        validateOnBlur === true ||
        validateOnBlur === ''
          ? true
          : undefined}
        data-validate-on-blur={validateOnBlur === true || validateOnBlur === '' ? true : undefined}
        tabIndex={tabindex}
        data-error-message={errorMessageForce ? undefined : errorMessage}
        class={inputClassName}
        on:focus={onFocus}
        on:blur={onBlur}
        on:input={onInput}
        on:change={onChange}
        value={type === 'datepicker' || type === 'colorpicker' || type === 'file' ? '' : inputValue}
      />
    {/if}
    {#if (errorMessage || hasErrorSlots) && errorMessageForce}
      <div class="input-error-message">
        {errorMessage}
        
	{%- if slot_error-message_framework7-liquivelte_input != blank -%}
		{{- slot_error-message_framework7-liquivelte_input -}}
	{%- endif -%}

      </div>
    {/if}
    {#if clearButton}<span class="input-clear-button" />{/if}
    {#if info || hasInfoSlots}
      <div class="input-info">
        {info}
        
	{%- if slot_info_framework7-liquivelte_input != blank -%}
		{{- slot_info_framework7-liquivelte_input -}}
	{%- endif -%}

      </div>
    {/if}
  </div>
{:else if type === 'select'}
  <select
    bind:this={inputEl}
    style={inputStyle}
    {name}
    {placeholder}
    id={inputId}
    {size}
    {accept}
    {autocomplete}
    {autocorrect}
    {autocapitalize}
    {spellcheck}
    {autofocus}
    {autosave}
    {checked}
    {disabled}
    {max}
    {maxlength}
    {min}
    {minlength}
    {step}
    {multiple}
    {readonly}
    {required}
    {pattern}
    validate={typeof validate === 'string' && validate.length ? validate : undefined}
    data-validate={validate === true ||
    validate === '' ||
    validateOnBlur === true ||
    validateOnBlur === ''
      ? true
      : undefined}
    data-validate-on-blur={validateOnBlur === true || validateOnBlur === '' ? true : undefined}
    {tabindex}
    data-error-message={errorMessageForce ? undefined : errorMessage}
    class={inputClassName}
    on:focus={onFocus}
    on:blur={onBlur}
    on:input={onInput}
    on:change={onChange}
    value={inputValue}
    {...restProps($$restProps)}
  >
    
		{%- if slot_default_framework7-liquivelte_input != blank -%}
			{{- slot_default_framework7-liquivelte_input -}}
		{%- endif -%}
	
  </select>
{:else if type === 'textarea'}
  <textarea
    bind:this={inputEl}
    style={inputStyle}
    {name}
    {placeholder}
    id={inputId}
    {size}
    {accept}
    {autocomplete}
    {autocorrect}
    {autocapitalize}
    {spellcheck}
    {autofocus}
    {autosave}
    {checked}
    {disabled}
    {max}
    {maxlength}
    {min}
    {minlength}
    {step}
    {multiple}
    {readonly}
    {required}
    {pattern}
    validate={typeof validate === 'string' && validate.length ? validate : undefined}
    data-validate={validate === true ||
    validate === '' ||
    validateOnBlur === true ||
    validateOnBlur === ''
      ? true
      : undefined}
    data-validate-on-blur={validateOnBlur === true || validateOnBlur === '' ? true : undefined}
    {tabindex}
    data-error-message={errorMessageForce ? undefined : errorMessage}
    class={inputClassName}
    on:focus={onFocus}
    on:blur={onBlur}
    on:input={onInput}
    on:change={onChange}
    value={inputValue}
    {...restProps($$restProps)}
  />
{:else if type === 'toggle'}
  
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Toggle %}{checked}-kvsp-1-prsp-{readonly}-kvsp-1-prsp-{name}-kvsp-1-prsp-{value}-kvsp-1-prsp-{disabled}-kvsp-1-prsp-id-kvsp-{inputId}-prsp-change-kvsp-{onChange}-prsp-{...restProps($$restProps)}-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'toggle' %}
{% include modulename, liquivelte: true, props: props_Toggle, sub_include: true, basename: ''  %}
{% assign props = '' %}
{:else if type === 'range'}
  
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Range %}{value}-kvsp-1-prsp-{disabled}-kvsp-1-prsp-{min}-kvsp-1-prsp-{max}-kvsp-1-prsp-{step}-kvsp-1-prsp-{name}-kvsp-1-prsp-id-kvsp-{inputId}-prsp-input-kvsp-{true}-prsp-rangeChange-kvsp-{onChange}-prsp-{...restProps($$restProps)}-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'range' %}
{% include modulename, liquivelte: true, props: props_Range, sub_include: true, basename: ''  %}
{% assign props = '' %}
{:else if type === 'texteditor'}
  
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_TextEditor %}value-kvsp-{typeof value === 'undefined' ? '' : value}-prsp-{resizable}-kvsp-1-prsp-{placeholder}-kvsp-1-prsp-onTextEditorFocus-kvsp-{onFocus}-prsp-onTextEditorBlur-kvsp-{onBlur}-prsp-onTextEditorInput-kvsp-{onInput}-prsp-onTextEditorChange-kvsp-{onChange}-prsp-{...restProps($$restProps)}-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'text-editor' %}
{% include modulename, liquivelte: true, props: props_TextEditor, sub_include: true, basename: ''  %}
{% assign props = '' %}
{:else}
  <input
    bind:this={inputEl}
    style={inputStyle}
    {name}
    type={inputType}
    {placeholder}
    id={inputId}
    {size}
    {accept}
    {autocomplete}
    {autocorrect}
    {autocapitalize}
    {spellcheck}
    {autofocus}
    {autosave}
    {checked}
    {disabled}
    {max}
    {maxlength}
    {min}
    {minlength}
    {step}
    {multiple}
    {readonly}
    {required}
    {pattern}
    validate={typeof validate === 'string' && validate.length ? validate : undefined}
    data-validate={validate === true ||
    validate === '' ||
    validateOnBlur === true ||
    validateOnBlur === ''
      ? true
      : undefined}
    data-validate-on-blur={validateOnBlur === true || validateOnBlur === '' ? true : undefined}
    tabIndex={tabindex}
    data-error-message={errorMessageForce ? undefined : errorMessage}
    class={inputClassName}
    on:focus={onFocus}
    on:blur={onBlur}
    on:input={onInput}
    on:change={onChange}
    value={type === 'datepicker' || type === 'colorpicker' || type === 'file' ? '' : inputValue}
    {...restProps($$restProps)}
  />
{/if}

	
						
		
	<script type="text/noscript" class="instance-data" >
		{% assign component_include_count = component_include_count | plus: 1 %}
		{
	
	
	
		
		"forloop_index": {{ forloop.index0 | default: 0 | json }},
		"component_index": {{ component_include_count | plus: component_include_depth }},
		"component_name": "framework7-liquivelte-input"
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
		const themeImports = (JSONparse(propScript.previousElementSibling.textContent));
		wrapper.svelteProps = wrapper.svelteProps || {};
		Object.keys(themeImports).forEach(key => {
			if(key == 'forloop_index' || key == 'component_index' || key == 'component_name') return;
			wrapper.svelteProps[key] = [
				...(wrapper.svelteProps[key] || []),
				{ forloop_index: themeImports.index, component_index: themeImports.component_index, component_name: themeImports.component_name, value: themeImports[key] }
			];
		});
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign classes = null
			assign type = null
			assign name = null
			assign value = null
			assign placeholder = null
			assign inputId = null
			assign size = null
			assign accept = null
			assign autocomplete = null
			assign autocorrect = null
			assign autocapitalize = null
			assign spellcheck = null
			assign autofocus = null
			assign autosave = null
			assign checked = null
			assign disabled = null
			assign max = null
			assign min = null
			assign step = null
			assign maxlength = null
			assign minlength = null
			assign multiple = null
			assign readonly = null
			assign required = null
			assign inputStyle = null
			assign pattern = null
			assign validate = null
			assign validateOnBlur = null
			assign onValidate = null
			assign tabindex = null
			assign resizable = null
			assign clearButton = null
			assign noFormStoreData = null
			assign noStoreData = null
			assign ignoreStoreData = null
			assign errorMessage = null
			assign errorMessageForce = null
			assign info = null
			assign outline = null
			assign wrap = null
			assign dropdown = null
			assign calendarParams = null
			assign colorPickerParams = null
			assign textEditorParams = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_input = null
			assign slot_error-message_framework7-liquivelte_input = null
			assign slot_info_framework7-liquivelte_input = null
			
			-%}
	
	{%- unless sub_include -%} 
	</div>
	{% assign component_include_count = 0 %}
	{%- endunless -%}
	