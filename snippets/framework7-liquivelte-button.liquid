	{%- liquid
			
			
			assign classes = null
			assign text = null
			assign tabLink = null
			assign tabLinkActive = null
			assign type = null
			assign href = null
			assign target = null
			assign round = null
			assign roundMd = null
			assign roundIos = null
			assign roundAurora = null
			assign fill = null
			assign fillMd = null
			assign fillIos = null
			assign fillAurora = null
			assign large = null
			assign largeMd = null
			assign largeIos = null
			assign largeAurora = null
			assign small = null
			assign smallMd = null
			assign smallIos = null
			assign smallAurora = null
			assign raised = null
			assign raisedMd = null
			assign raisedIos = null
			assign raisedAurora = null
			assign outline = null
			assign outlineMd = null
			assign outlineIos = null
			assign outlineAurora = null
			assign active = null
			assign disabled = null
			assign tooltip = null
			assign tooltipTrigger = null
			assign routeProps = null
			assign preloader = null
			assign preloaderSize = null
			assign preloaderColor = null
			assign loading = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'classes' and classes == blank
		assign classes = lv_propValue
	endif
	if lv_propName == 'text' and text == blank
		assign text = lv_propValue
	endif
	if lv_propName == 'tabLink' and tabLink == blank
		assign tabLink = lv_propValue
	endif
	if lv_propName == 'tabLinkActive' and tabLinkActive == blank
		assign tabLinkActive = lv_propValue
	endif
	if lv_propName == 'type' and type == blank
		assign type = lv_propValue
	endif
	if lv_propName == 'href' and href == blank
		assign href = lv_propValue
	endif
	if lv_propName == 'target' and target == blank
		assign target = lv_propValue
	endif
	if lv_propName == 'round' and round == blank
		assign round = lv_propValue
	endif
	if lv_propName == 'roundMd' and roundMd == blank
		assign roundMd = lv_propValue
	endif
	if lv_propName == 'roundIos' and roundIos == blank
		assign roundIos = lv_propValue
	endif
	if lv_propName == 'roundAurora' and roundAurora == blank
		assign roundAurora = lv_propValue
	endif
	if lv_propName == 'fill' and fill == blank
		assign fill = lv_propValue
	endif
	if lv_propName == 'fillMd' and fillMd == blank
		assign fillMd = lv_propValue
	endif
	if lv_propName == 'fillIos' and fillIos == blank
		assign fillIos = lv_propValue
	endif
	if lv_propName == 'fillAurora' and fillAurora == blank
		assign fillAurora = lv_propValue
	endif
	if lv_propName == 'large' and large == blank
		assign large = lv_propValue
	endif
	if lv_propName == 'largeMd' and largeMd == blank
		assign largeMd = lv_propValue
	endif
	if lv_propName == 'largeIos' and largeIos == blank
		assign largeIos = lv_propValue
	endif
	if lv_propName == 'largeAurora' and largeAurora == blank
		assign largeAurora = lv_propValue
	endif
	if lv_propName == 'small' and small == blank
		assign small = lv_propValue
	endif
	if lv_propName == 'smallMd' and smallMd == blank
		assign smallMd = lv_propValue
	endif
	if lv_propName == 'smallIos' and smallIos == blank
		assign smallIos = lv_propValue
	endif
	if lv_propName == 'smallAurora' and smallAurora == blank
		assign smallAurora = lv_propValue
	endif
	if lv_propName == 'raised' and raised == blank
		assign raised = lv_propValue
	endif
	if lv_propName == 'raisedMd' and raisedMd == blank
		assign raisedMd = lv_propValue
	endif
	if lv_propName == 'raisedIos' and raisedIos == blank
		assign raisedIos = lv_propValue
	endif
	if lv_propName == 'raisedAurora' and raisedAurora == blank
		assign raisedAurora = lv_propValue
	endif
	if lv_propName == 'outline' and outline == blank
		assign outline = lv_propValue
	endif
	if lv_propName == 'outlineMd' and outlineMd == blank
		assign outlineMd = lv_propValue
	endif
	if lv_propName == 'outlineIos' and outlineIos == blank
		assign outlineIos = lv_propValue
	endif
	if lv_propName == 'outlineAurora' and outlineAurora == blank
		assign outlineAurora = lv_propValue
	endif
	if lv_propName == 'active' and active == blank
		assign active = lv_propValue
	endif
	if lv_propName == 'disabled' and disabled == blank
		assign disabled = lv_propValue
	endif
	if lv_propName == 'tooltip' and tooltip == blank
		assign tooltip = lv_propValue
	endif
	if lv_propName == 'tooltipTrigger' and tooltipTrigger == blank
		assign tooltipTrigger = lv_propValue
	endif
	if lv_propName == 'routeProps' and routeProps == blank
		assign routeProps = lv_propValue
	endif
	if lv_propName == 'preloader' and preloader == blank
		assign preloader = lv_propValue
	endif
	if lv_propName == 'preloaderSize' and preloaderSize == blank
		assign preloaderSize = lv_propValue
	endif
	if lv_propName == 'preloaderColor' and preloaderColor == blank
		assign preloaderColor = lv_propValue
	endif
	if lv_propName == 'loading' and loading == blank
		assign loading = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'framework7-liquivelte-button'
						assign slot_default_framework7-liquivelte_button = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component button" data-liquivelte-component-name="button.liquivelte">
		{% assign component_include_count_slot_offset = 0 %}
		{% assign component_include_count = 0 %}
		{% assign component_include_depth = 0 %}
		<script> window.cicR = 0; </script>
	{%- endunless -%}
	

<!-- svelte-ignore a11y-missing-attribute -->
{% if tagName == 'button' %}
  
	{%- liquid 
	assign dynamic_classes = ''
	  if round != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round'
	endif
	  if roundIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round-ios'
	endif
	  if roundAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round-aurora'
	endif
	  if roundMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round-md'
	endif
	  if fill != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill'
	endif
	  if fillIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill-ios'
	endif
	  if fillAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill-aurora'
	endif
	  if fillMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill-md'
	endif
	  if large != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large'
	endif
	  if largeIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large-ios'
	endif
	  if largeAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large-aurora'
	endif
	  if largeMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large-md'
	endif
	  if small != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small'
	endif
	  if smallIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small-ios'
	endif
	  if smallAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small-aurora'
	endif
	  if smallMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small-md'
	endif
	  if raised != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised'
	endif
	  if raisedIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised-ios'
	endif
	  if raisedAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised-aurora'
	endif
	  if raisedMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised-md'
	endif
	  if active != blank
	assign dynamic_classes = dynamic_classes | append: ' button-active'
	endif
	  if outline != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline'
	endif
	  if outlineIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline-ios'
	endif
	  if outlineAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline-aurora'
	endif
	  if outlineMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline-md'
	endif
	  if preloader != blank
	assign dynamic_classes = dynamic_classes | append: ' button-preloader'
	endif
	  if loading != blank
	assign dynamic_classes = dynamic_classes | append: ' button-loading'
	endif
	  if disabled != blank
	assign dynamic_classes = dynamic_classes | append: ' disabled'
	endif
	-%}
	<button 
    bind:this="{el}"
    use:useRouteProps="{routeProps}"
    class="button {{ classes }} {{ computedClasses }}{{ dynamic_classes }}"
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    on:click="{onClick}"
    use:useTooltip="{ { tooltip, tooltipTrigger } }"
    {...attrs}
  >
    {% if preloader %}
      
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Preloader %}size-kvsp-{{ preloaderSize }}-prsp-color-kvsp-{{ preloaderColor }}{% endcapture %}
{% assign modulename = basename | append: 'preloader' %}
{% include modulename, liquivelte: true, props: props_Preloader, sub_include: true, basename: '' , size:  preloaderSize  , color:  preloaderColor  %}
{% assign props = '' %}
      <span>
        {% if icon %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_UseIcon %}icon-kvsp-{{ icon }}{% endcapture %}
{% assign modulename = basename | append: 'use-icon' %}
{% include modulename, liquivelte: true, props: props_UseIcon, sub_include: true, basename: '' , icon:  icon  %}
{% assign props = '' %}
        {% endif %}
        {% if text != blank %}
          <span>{{ text | default: '' }}</span>
        {% endif %}
        
		{%- if slot_default_framework7-liquivelte_button != blank -%}
			{{- slot_default_framework7-liquivelte_button -}}
		{%- endif -%}
	
      </span>
    {% else %}
      {% if icon %}
        
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_UseIcon %}icon-kvsp-{{ icon }}{% endcapture %}
{% assign modulename = basename | append: 'use-icon' %}
{% include modulename, liquivelte: true, props: props_UseIcon, sub_include: true, basename: '' , icon:  icon  %}
{% assign props = '' %}
      {% endif %}
      {% if text != blank %}
        <span>{{ text | default: '' }}</span>
      {% endif %}
      
		{%- if slot_default_framework7-liquivelte_button != blank -%}
			{{- slot_default_framework7-liquivelte_button -}}
		{%- endif -%}
	
    {% endif %}
  </button>
{% else %}
  
	{%- liquid 
	assign dynamic_classes = ''
	  if round != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round'
	endif
	  if roundIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round-ios'
	endif
	  if roundAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round-aurora'
	endif
	  if roundMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-round-md'
	endif
	  if fill != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill'
	endif
	  if fillIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill-ios'
	endif
	  if fillAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill-aurora'
	endif
	  if fillMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-fill-md'
	endif
	  if large != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large'
	endif
	  if largeIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large-ios'
	endif
	  if largeAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large-aurora'
	endif
	  if largeMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-large-md'
	endif
	  if small != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small'
	endif
	  if smallIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small-ios'
	endif
	  if smallAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small-aurora'
	endif
	  if smallMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-small-md'
	endif
	  if raised != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised'
	endif
	  if raisedIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised-ios'
	endif
	  if raisedAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised-aurora'
	endif
	  if raisedMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-raised-md'
	endif
	  if active != blank
	assign dynamic_classes = dynamic_classes | append: ' button-active'
	endif
	  if outline != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline'
	endif
	  if outlineIos != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline-ios'
	endif
	  if outlineAurora != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline-aurora'
	endif
	  if outlineMd != blank
	assign dynamic_classes = dynamic_classes | append: ' button-outline-md'
	endif
	  if preloader != blank
	assign dynamic_classes = dynamic_classes | append: ' button-preloader'
	endif
	  if loading != blank
	assign dynamic_classes = dynamic_classes | append: ' button-loading'
	endif
	  if disabled != blank
	assign dynamic_classes = dynamic_classes | append: ' disabled'
	endif
	-%}
	<a 
    bind:this="{el}"
    use:useRouteProps="{routeProps}"
    class="button {{ classes }} {{ computedClasses }}{{ dynamic_classes }}"
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    on:click="{onClick}"
    use:useTooltip="{ { tooltip, tooltipTrigger } }"
    {...attrs}
  >
    {% if preloader %}
      
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Preloader %}size-kvsp-{{ preloaderSize }}-prsp-color-kvsp-{{ preloaderColor }}{% endcapture %}
{% assign modulename = basename | append: 'preloader' %}
{% include modulename, liquivelte: true, props: props_Preloader, sub_include: true, basename: '' , size:  preloaderSize  , color:  preloaderColor  %}
{% assign props = '' %}
      <span>
        {% if icon %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_UseIcon %}icon-kvsp-{{ icon }}{% endcapture %}
{% assign modulename = basename | append: 'use-icon' %}
{% include modulename, liquivelte: true, props: props_UseIcon, sub_include: true, basename: '' , icon:  icon  %}
{% assign props = '' %}
        {% endif %}
        {% if text != blank %}
          <span>{{ text | default: '' }}</span>
        {% endif %}
        
		{%- if slot_default_framework7-liquivelte_button != blank -%}
			{{- slot_default_framework7-liquivelte_button -}}
		{%- endif -%}
	
      </span>
    {% else %}
      {% if icon %}
        
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_UseIcon %}icon-kvsp-{{ icon }}{% endcapture %}
{% assign modulename = basename | append: 'use-icon' %}
{% include modulename, liquivelte: true, props: props_UseIcon, sub_include: true, basename: '' , icon:  icon  %}
{% assign props = '' %}
      {% endif %}
      {% if text != blank %}
        <span>{{ text | default: '' }}</span>
      {% endif %}
      
		{%- if slot_default_framework7-liquivelte_button != blank -%}
			{{- slot_default_framework7-liquivelte_button -}}
		{%- endif -%}
	
    {% endif %}
  </a>
{% endif %}

	
						
		
	<script type="text/noscript" class="instance-data" >
		{% assign component_include_count = component_include_count | plus: 1 %}
		{
	
	
	
		
		"forloop_index": {{ forloop.index0 | default: 0 | json }},
		"component_index": {{ component_include_count | plus: component_include_depth }},
		"component_name": "framework7-liquivelte-button"
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
		const themeImports = (JSONparse(propScript.previousElementSibling.textContent));
		wrapper.svelteProps = wrapper.svelteProps || {};
		Object.keys(themeImports).forEach(key => {
			if(key == 'forloop_index' || key == 'component_index' || key == 'component_name') return;
			wrapper.svelteProps[key] = [
				...(wrapper.svelteProps[key] || []),
				{ forloop_index: themeImports.index, component_index: themeImports.component_index, component_name: themeImports.component_name, value: themeImports[key] }
			];
		});
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign classes = null
			assign text = null
			assign tabLink = null
			assign tabLinkActive = null
			assign type = null
			assign href = null
			assign target = null
			assign round = null
			assign roundMd = null
			assign roundIos = null
			assign roundAurora = null
			assign fill = null
			assign fillMd = null
			assign fillIos = null
			assign fillAurora = null
			assign large = null
			assign largeMd = null
			assign largeIos = null
			assign largeAurora = null
			assign small = null
			assign smallMd = null
			assign smallIos = null
			assign smallAurora = null
			assign raised = null
			assign raisedMd = null
			assign raisedIos = null
			assign raisedAurora = null
			assign outline = null
			assign outlineMd = null
			assign outlineIos = null
			assign outlineAurora = null
			assign active = null
			assign disabled = null
			assign tooltip = null
			assign tooltipTrigger = null
			assign routeProps = null
			assign preloader = null
			assign preloaderSize = null
			assign preloaderColor = null
			assign loading = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_button = null
			
			-%}
	
	{%- unless sub_include -%} 
	</div>
	{% assign component_include_count = 0 %}
	{%- endunless -%}
	