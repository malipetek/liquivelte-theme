
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'name'
	assign name = propValue
	endif
	if propName == 'stacked'
	assign stacked = propValue
	endif
	if propName == 'withSubnavbar'
	assign withSubnavbar = propValue
	endif
	if propName == 'subnavbar'
	assign subnavbar = propValue
	endif
	if propName == 'withNavbarLarge'
	assign withNavbarLarge = propValue
	endif
	if propName == 'navbarLarge'
	assign navbarLarge = propValue
	endif
	if propName == 'noNavbar'
	assign noNavbar = propValue
	endif
	if propName == 'noToolbar'
	assign noToolbar = propValue
	endif
	if propName == 'tabs'
	assign tabs = propValue
	endif
	if propName == 'pageContent'
	assign pageContent = propValue
	endif
	if propName == 'noSwipeback'
	assign noSwipeback = propValue
	endif
	if propName == 'ptr'
	assign ptr = propValue
	endif
	if propName == 'ptrDistance'
	assign ptrDistance = propValue
	endif
	if propName == 'ptrPreloader'
	assign ptrPreloader = propValue
	endif
	if propName == 'ptrBottom'
	assign ptrBottom = propValue
	endif
	if propName == 'ptrMousewheel'
	assign ptrMousewheel = propValue
	endif
	if propName == 'infinite'
	assign infinite = propValue
	endif
	if propName == 'infiniteTop'
	assign infiniteTop = propValue
	endif
	if propName == 'infiniteDistance'
	assign infiniteDistance = propValue
	endif
	if propName == 'infinitePreloader'
	assign infinitePreloader = propValue
	endif
	if propName == 'hideBarsOnScroll'
	assign hideBarsOnScroll = propValue
	endif
	if propName == 'hideNavbarOnScroll'
	assign hideNavbarOnScroll = propValue
	endif
	if propName == 'hideToolbarOnScroll'
	assign hideToolbarOnScroll = propValue
	endif
	if propName == 'messagesContent'
	assign messagesContent = propValue
	endif
	if propName == 'loginScreen'
	assign loginScreen = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component page" data-liquivelte-component-name="page.liquivelte">
	{%- endunless -%}
	

<div bind:this="{el}" class="page {{ classes }}" data-name="{name}" {...restProps($$restProps)}>
  {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-page' and name == 'fixed'
	assign children_fixed = value | strip
	endif
	endfor
	-%}
	{%- if children_fixed != blank -%}
	{{- children_fixed -}}
	{%- endif -%}
	{%- assign children_fixed = '' -%}
	
  {% if pageContent %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}ptr-kvsp-{ptr}"
-prsp-ptrDistance-kvsp-{ptrDistance}"
-prsp-ptrPreloader-kvsp-{ptrPreloader}"
-prsp-ptrBottom-kvsp-{ptrBottom}"
-prsp-ptrMousewheel-kvsp-{ptrMousewheel}"
-prsp-infinite-kvsp-{infinite}"
-prsp-infiniteTop-kvsp-{infiniteTop}"
-prsp-infiniteDistance-kvsp-{infiniteDistance}"
-prsp-infinitePreloader-kvsp-{infinitePreloader}"
-prsp-hideBarsOnScroll-kvsp-{hideBarsOnScroll}"
-prsp-hideNavbarOnScroll-kvsp-{hideNavbarOnScroll}"
-prsp-hideToolbarOnScroll-kvsp-{hideToolbarOnScroll}"
-prsp-messagesContent-kvsp-{messagesContent}"
-prsp-loginScreen-kvsp-{loginScreen}"
-prsp-onPtrPullStart-kvsp-{onPtrPullStart}"
-prsp-onPtrPullMove-kvsp-{onPtrPullMove}"
-prsp-onPtrPullEnd-kvsp-{onPtrPullEnd}"
-prsp-onPtrRefresh-kvsp-{onPtrRefresh}"
-prsp-onPtrDone-kvsp-{onPtrDone}"
-prsp-onInfinite-kvsp-{onInfinite}"
{% endcapture %}

{% capture slot_content_PageContent %}
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-page' and name == 'static'
	assign children_static = value | strip
	endif
	endfor
	-%}
	{%- if children_static != blank -%}
	{{- children_static -}}
	{%- endif -%}
	{%- assign children_static = '' -%}
	
      {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-page'
	assign children = value | strip
	endif
	endfor
	-%}
	
	{%- if sub_include -%}
		{%- if children != blank -%}
			{{- children -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	{%- assign children = '' -%}
	
    {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'page-content' | append: '-scvs-' | append: slot_content_PageContent %}
{% assign modulename = basename | append: 'page-content' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: '' %}
{% assign props = '' %}
  {% else %}
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-page' and name == 'static'
	assign children_static = value | strip
	endif
	endfor
	-%}
	{%- if children_static != blank -%}
	{{- children_static -}}
	{%- endif -%}
	{%- assign children_static = '' -%}
	
    {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-page'
	assign children = value | strip
	endif
	endfor
	-%}
	
	{%- if sub_include -%}
		{%- if children != blank -%}
			{{- children -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	{%- assign children = '' -%}
	
  {% endif %}
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	