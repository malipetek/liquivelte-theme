
{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
		assign propName = prop | split: '-kvsp-' | first
		assign propValue = prop | split: '-kvsp-' | last | remove: '"'
		if propValue contains '{' and propValue contains '}'
			assign propValue = propValue | remove: '{' | remove: '}'
			assign propValueArr = propValue | split: ','
			for entry in propValueArr
				assign key = entry | split: ':' | first | strip | remove: '"'
				assign value = entry | split: ':' | last | strip | remove: '"'
				assign composite_key = propName | append: '_' | append: key
			
			endfor
		endif
	endfor
-%}
	{%- unless sub_include -%} 
		<div  class="liquivelte-component LoadMeLikeLazy svelte-10eoss1">
	{%- endunless -%}

<h1> Lazy here  {{- count | append: "" -}} </h1>
<button on:click="{ () => count++ }"> Increment </button>

<script type="text/noscript"  class="instance-data svelte-10eoss1">{
			
			
			
			}</script>

<script>(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),n=!1,c=!1,r=!1,p=!1,b="",k="";for(let e=0;e<a.length;e++){const o=a[e];switch(!0){case" "===o:p||t.open||(c=!1),!r||p||t.open||(r=!1);break;case"{"===o:t.open=!0,r||(c=!0);break;case"}"===o:t.open=!1;break;case'"'===o:p=!p;break;case"="===o:c&&(c=!1,r=!0,n=!0);break;case/[^\s]/.test(o):r||(c=!0)}!c||r||n?c||!r||n?c||r||(b&&(s[b]=k),k="",b=""):k+=o:b+=o,n=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
		var doc = new DOMParser().parseFromString(input, "text/html");
		return doc.documentElement.textContent;
		}
	function componentWrapper(el) {
			if(el.classList.contains('liquivelte-component')) {
			return el;
			} else {
			return componentWrapper(el.parentElement);
			}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
			wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.innerText)) };
	
	
	
	} catch (e) {
			console.error('there was an error parsing props json', e);
			wrapper.svelteProps = { error: 'there was an error parsing props json'};
	}
	propScript.previousElementSibling.remove();
	propScript.remove();
	})();</script>
	{%- unless sub_include -%} 
		</div>
	{%- endunless -%}
