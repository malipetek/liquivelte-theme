
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'sortable'
	assign sortable = propValue
	endif
	if propName == 'sortableOpposite'
	assign sortableOpposite = propValue
	endif
	if propName == 'media'
	assign media = propValue
	endif
	if propName == 'dropdown'
	assign dropdown = propValue
	endif
	if propName == 'wrap'
	assign wrap = propValue
	endif
	if propName == 'input'
	assign input = propValue
	endif
	if propName == 'type'
	assign type = propValue
	endif
	if propName == 'name'
	assign name = propValue
	endif
	if propName == 'value'
	assign value = propValue
	endif
	if propName == 'inputmode'
	assign inputmode = propValue
	endif
	if propName == 'readonly'
	assign readonly = propValue
	endif
	if propName == 'required'
	assign required = propValue
	endif
	if propName == 'disabled'
	assign disabled = propValue
	endif
	if propName == 'placeholder'
	assign placeholder = propValue
	endif
	if propName == 'inputId'
	assign inputId = propValue
	endif
	if propName == 'size'
	assign size = propValue
	endif
	if propName == 'accept'
	assign accept = propValue
	endif
	if propName == 'autocomplete'
	assign autocomplete = propValue
	endif
	if propName == 'autocorrect'
	assign autocorrect = propValue
	endif
	if propName == 'autocapitalize'
	assign autocapitalize = propValue
	endif
	if propName == 'spellcheck'
	assign spellcheck = propValue
	endif
	if propName == 'autofocus'
	assign autofocus = propValue
	endif
	if propName == 'autosave'
	assign autosave = propValue
	endif
	if propName == 'max'
	assign max = propValue
	endif
	if propName == 'min'
	assign min = propValue
	endif
	if propName == 'step'
	assign step = propValue
	endif
	if propName == 'maxlength'
	assign maxlength = propValue
	endif
	if propName == 'minlength'
	assign minlength = propValue
	endif
	if propName == 'multiple'
	assign multiple = propValue
	endif
	if propName == 'inputStyle'
	assign inputStyle = propValue
	endif
	if propName == 'pattern'
	assign pattern = propValue
	endif
	if propName == 'validate'
	assign validate = propValue
	endif
	if propName == 'validateOnBlur'
	assign validateOnBlur = propValue
	endif
	if propName == 'onValidate'
	assign onValidate = propValue
	endif
	if propName == 'tabindex'
	assign tabindex = propValue
	endif
	if propName == 'resizable'
	assign resizable = propValue
	endif
	if propName == 'clearButton'
	assign clearButton = propValue
	endif
	if propName == 'noFormStoreData'
	assign noFormStoreData = propValue
	endif
	if propName == 'noStoreData'
	assign noStoreData = propValue
	endif
	if propName == 'ignoreStoreData'
	assign ignoreStoreData = propValue
	endif
	if propName == 'errorMessage'
	assign errorMessage = propValue
	endif
	if propName == 'errorMessageForce'
	assign errorMessageForce = propValue
	endif
	if propName == 'info'
	assign info = propValue
	endif
	if propName == 'outline'
	assign outline = propValue
	endif
	if propName == 'label'
	assign label = propValue
	endif
	if propName == 'inlineLabel'
	assign inlineLabel = propValue
	endif
	if propName == 'floatingLabel'
	assign floatingLabel = propValue
	endif
	if propName == 'calendarParams'
	assign calendarParams = propValue
	endif
	if propName == 'colorPickerParams'
	assign colorPickerParams = propValue
	endif
	if propName == 'textEditorParams'
	assign textEditorParams = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component list-input" data-liquivelte-component-name="list-input.liquivelte">
	{%- endunless -%}
	

<!-- svelte-ignore a11y-autofocus -->
<!-- svelte-ignore a11y-missing-attribute -->
{#if wrap}
  <li class={classes} {...restProps($$restProps)}>
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'root-start'
	assign children_root-start = value | strip
	endif
	endfor
	-%}
	{%- if children_root-start != blank -%}
	{{- children_root-start -}}
	{%- endif -%}
	{%- assign children_root-start = '' -%}
	
    <div class={itemContentClasses}>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'content-start'
	assign children_content-start = value | strip
	endif
	endfor
	-%}
	{%- if children_content-start != blank -%}
	{{- children_content-start -}}
	{%- endif -%}
	{%- assign children_content-start = '' -%}
	
      {#if isSortable && isSortableOpposite}
        <div class="sortable-handler" />
      {/if}

      {#if media || hasMediaSlots}
        <div class="item-media">
          {#if typeof media !== 'undefined'}<img src={media} />{/if}
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'media'
	assign children_media = value | strip
	endif
	endfor
	-%}
	{%- if children_media != blank -%}
	{{- children_media -}}
	{%- endif -%}
	{%- assign children_media = '' -%}
	
        </div>
      {/if}
      <div class="item-inner">
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'inner-start'
	assign children_inner-start = value | strip
	endif
	endfor
	-%}
	{%- if children_inner-start != blank -%}
	{{- children_inner-start -}}
	{%- endif -%}
	{%- assign children_inner-start = '' -%}
	
        {#if typeof label !== 'undefined' || hasLabelSlots}
          <div class={labelClasses}>
            {plainText(label)}
            {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'label'
	assign children_label = value | strip
	endif
	endfor
	-%}
	{%- if children_label != blank -%}
	{{- children_label -}}
	{%- endif -%}
	{%- assign children_label = '' -%}
	
          </div>
        {/if}
        <div class={inputWrapClasses}>
          {#if input}
            {#if type === 'select'}
              <select
                bind:this={inputEl}
                style={inputStyle}
                {name}
                {placeholder}
                id={inputId}
                {size}
                {accept}
                {autocomplete}
                {autocorrect}
                {autocapitalize}
                {spellcheck}
                {autofocus}
                {autosave}
                {disabled}
                {max}
                {maxlength}
                {min}
                {minlength}
                {step}
                {multiple}
                {readonly}
                {required}
                {pattern}
                validate={typeof validate === 'string' && validate.length ? validate : undefined}
                data-validate={validate === true ||
                validate === '' ||
                validateOnBlur === true ||
                validateOnBlur === ''
                  ? true
                  : undefined}
                data-validate-on-blur={validateOnBlur === true || validateOnBlur === ''
                  ? true
                  : undefined}
                {tabindex}
                data-error-message={errorMessageForce ? undefined : errorMessage}
                class={inputClasses}
                on:focus={onFocus}
                on:blur={onBlur}
                on:input={onInput}
                on:change={onChange}
                value={inputValue}
              >
                {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input'
	assign children = value | strip
	endif
	endfor
	-%}
	{%- if children != blank -%}
	{{- children -}}
	{%- endif -%}
	{%- assign children = '' -%}
	
              </select>
            {:else if type === 'textarea'}
              <textarea
                bind:this={inputEl}
                style={inputStyle}
                {name}
                {placeholder}
                id={inputId}
                {size}
                {inputmode}
                {accept}
                {autocomplete}
                {autocorrect}
                {autocapitalize}
                {spellcheck}
                {autofocus}
                {autosave}
                {disabled}
                {max}
                {maxlength}
                {min}
                {minlength}
                {step}
                {multiple}
                {readonly}
                {required}
                {pattern}
                validate={typeof validate === 'string' && validate.length ? validate : undefined}
                data-validate={validate === true ||
                validate === '' ||
                validateOnBlur === true ||
                validateOnBlur === ''
                  ? true
                  : undefined}
                data-validate-on-blur={validateOnBlur === true || validateOnBlur === ''
                  ? true
                  : undefined}
                {tabindex}
                data-error-message={errorMessageForce ? undefined : errorMessage}
                class={inputClasses}
                on:focus={onFocus}
                on:blur={onBlur}
                on:input={onInput}
                on:change={onChange}
                value={inputValue}
              />
            {:else if type === 'texteditor'}
              
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}value-kvsp-{typeof value === 'undefined' ? '' : value}
-prsp-{resizable}
-kvsp--prsp-{placeholder}
-kvsp--prsp-onTextEditorFocus-kvsp-{onFocus}
-prsp-onTextEditorBlur-kvsp-{onBlur}
-prsp-onTextEditorInput-kvsp-{onInput}
-prsp-onTextEditorChange-kvsp-{onChange}
{% endcapture %}
{% include 'text-editor', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
            {:else}
              <input
                bind:this={inputEl}
                style={inputStyle}
                {name}
                type={inputType}
                {inputmode}
                {placeholder}
                id={inputId}
                {size}
                {accept}
                {autocomplete}
                {autocorrect}
                {autocapitalize}
                {spellcheck}
                {autofocus}
                {autosave}
                {disabled}
                {max}
                {maxlength}
                {min}
                {minlength}
                {step}
                {multiple}
                {readonly}
                {required}
                {pattern}
                validate={typeof validate === 'string' && validate.length ? validate : undefined}
                data-validate={validate === true ||
                validate === '' ||
                validateOnBlur === true ||
                validateOnBlur === ''
                  ? true
                  : undefined}
                data-validate-on-blur={validateOnBlur === true || validateOnBlur === ''
                  ? true
                  : undefined}
                tabIndex={tabindex}
                data-error-message={errorMessageForce ? undefined : errorMessage}
                class={inputClasses}
                on:focus={onFocus}
                on:blur={onBlur}
                on:input={onInput}
                on:change={onChange}
                value={type === 'datepicker' || type === 'colorpicker' || type === 'file'
                  ? ''
                  : inputValue}
              />
            {/if}
          {/if}
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'input'
	assign children_input = value | strip
	endif
	endfor
	-%}
	{%- if children_input != blank -%}
	{{- children_input -}}
	{%- endif -%}
	{%- assign children_input = '' -%}
	
          {#if hasErrorMessage && errorMessageForce}
            <div class="item-input-error-message">
              {plainText(errorMessage)}
              {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'error-message'
	assign children_error-message = value | strip
	endif
	endfor
	-%}
	{%- if children_error-message != blank -%}
	{{- children_error-message -}}
	{%- endif -%}
	{%- assign children_error-message = '' -%}
	
            </div>
          {/if}
          {#if clearButton}<span class="input-clear-button" />{/if}
          {#if typeof info !== 'undefined' || hasInfoSlots}
            <div class="item-input-info">
              {plainText(info)}
              {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'info'
	assign children_info = value | strip
	endif
	endfor
	-%}
	{%- if children_info != blank -%}
	{{- children_info -}}
	{%- endif -%}
	{%- assign children_info = '' -%}
	
            </div>
          {/if}
        </div>
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'inner'
	assign children_inner = value | strip
	endif
	endfor
	-%}
	{%- if children_inner != blank -%}
	{{- children_inner -}}
	{%- endif -%}
	{%- assign children_inner = '' -%}
	
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'inner-end'
	assign children_inner-end = value | strip
	endif
	endfor
	-%}
	{%- if children_inner-end != blank -%}
	{{- children_inner-end -}}
	{%- endif -%}
	{%- assign children_inner-end = '' -%}
	
      </div>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'content'
	assign children_content = value | strip
	endif
	endfor
	-%}
	{%- if children_content != blank -%}
	{{- children_content -}}
	{%- endif -%}
	{%- assign children_content = '' -%}
	
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'content-end'
	assign children_content-end = value | strip
	endif
	endfor
	-%}
	{%- if children_content-end != blank -%}
	{{- children_content-end -}}
	{%- endif -%}
	{%- assign children_content-end = '' -%}
	
    </div>
    {#if isSortable && !isSortableOpposite}
      <div class="sortable-handler" />
    {/if}
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'root'
	assign children_root = value | strip
	endif
	endfor
	-%}
	{%- if children_root != blank -%}
	{{- children_root -}}
	{%- endif -%}
	{%- assign children_root = '' -%}
	
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'root-end'
	assign children_root-end = value | strip
	endif
	endfor
	-%}
	{%- if children_root-end != blank -%}
	{{- children_root-end -}}
	{%- endif -%}
	{%- assign children_root-end = '' -%}
	
  </li>
{:else}
  <div class={itemContentClasses} {...restProps($$restProps)}>
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'content-start'
	assign children_content-start = value | strip
	endif
	endfor
	-%}
	{%- if children_content-start != blank -%}
	{{- children_content-start -}}
	{%- endif -%}
	{%- assign children_content-start = '' -%}
	
    {#if isSortable && isSortableOpposite}
      <div class="sortable-handler" />
    {/if}

    {#if media || hasMediaSlots}
      <div class="item-media">
        {#if typeof media !== 'undefined'}<img src={media} />{/if}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'media'
	assign children_media = value | strip
	endif
	endfor
	-%}
	{%- if children_media != blank -%}
	{{- children_media -}}
	{%- endif -%}
	{%- assign children_media = '' -%}
	
      </div>
    {/if}
    <div class="item-inner">
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'inner-start'
	assign children_inner-start = value | strip
	endif
	endfor
	-%}
	{%- if children_inner-start != blank -%}
	{{- children_inner-start -}}
	{%- endif -%}
	{%- assign children_inner-start = '' -%}
	
      {#if typeof label !== 'undefined' || hasLabelSlots}
        <div class={labelClasses}>
          {plainText(label)}
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'label'
	assign children_label = value | strip
	endif
	endfor
	-%}
	{%- if children_label != blank -%}
	{{- children_label -}}
	{%- endif -%}
	{%- assign children_label = '' -%}
	
        </div>
      {/if}
      <div class={inputWrapClasses}>
        {#if input}
          {#if type === 'select'}
            <select
              bind:this={inputEl}
              style={inputStyle}
              {name}
              {placeholder}
              id={inputId}
              {size}
              {accept}
              {autocomplete}
              {autocorrect}
              {autocapitalize}
              {spellcheck}
              {autofocus}
              {autosave}
              {disabled}
              {max}
              {maxlength}
              {min}
              {minlength}
              {step}
              {multiple}
              {readonly}
              {required}
              {pattern}
              validate={typeof validate === 'string' && validate.length ? validate : undefined}
              data-validate={validate === true ||
              validate === '' ||
              validateOnBlur === true ||
              validateOnBlur === ''
                ? true
                : undefined}
              data-validate-on-blur={validateOnBlur === true || validateOnBlur === ''
                ? true
                : undefined}
              {tabindex}
              data-error-message={errorMessageForce ? undefined : errorMessage}
              class={inputClasses}
              on:focus={onFocus}
              on:blur={onBlur}
              on:input={onInput}
              on:change={onChange}
              value={inputValue}
            >
              {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input'
	assign children = value | strip
	endif
	endfor
	-%}
	{%- if children != blank -%}
	{{- children -}}
	{%- endif -%}
	{%- assign children = '' -%}
	
            </select>
          {:else if type === 'textarea'}
            <textarea
              bind:this={inputEl}
              style={inputStyle}
              {name}
              {placeholder}
              id={inputId}
              {size}
              {inputmode}
              {accept}
              {autocomplete}
              {autocorrect}
              {autocapitalize}
              {spellcheck}
              {autofocus}
              {autosave}
              {disabled}
              {max}
              {maxlength}
              {min}
              {minlength}
              {step}
              {multiple}
              {readonly}
              {required}
              {pattern}
              validate={typeof validate === 'string' && validate.length ? validate : undefined}
              data-validate={validate === true ||
              validate === '' ||
              validateOnBlur === true ||
              validateOnBlur === ''
                ? true
                : undefined}
              data-validate-on-blur={validateOnBlur === true || validateOnBlur === ''
                ? true
                : undefined}
              {tabindex}
              data-error-message={errorMessageForce ? undefined : errorMessage}
              class={inputClasses}
              on:focus={onFocus}
              on:blur={onBlur}
              on:input={onInput}
              on:change={onChange}
              value={inputValue}
            />
          {:else if type === 'texteditor'}
            
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}value-kvsp-{typeof value === 'undefined' ? '' : value}
-prsp-{resizable}
-kvsp--prsp-{placeholder}
-kvsp--prsp-onTextEditorFocus-kvsp-{onFocus}
-prsp-onTextEditorBlur-kvsp-{onBlur}
-prsp-onTextEditorInput-kvsp-{onInput}
-prsp-onTextEditorChange-kvsp-{onChange}
{% endcapture %}
{% include 'text-editor', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
          {:else}
            <input
              bind:this={inputEl}
              style={inputStyle}
              {name}
              type={inputType}
              {inputmode}
              {placeholder}
              id={inputId}
              {size}
              {accept}
              {autocomplete}
              {autocorrect}
              {autocapitalize}
              {spellcheck}
              {autofocus}
              {autosave}
              {disabled}
              {max}
              {maxlength}
              {min}
              {minlength}
              {step}
              {multiple}
              {readonly}
              {required}
              {pattern}
              validate={typeof validate === 'string' && validate.length ? validate : undefined}
              data-validate={validate === true ||
              validate === '' ||
              validateOnBlur === true ||
              validateOnBlur === ''
                ? true
                : undefined}
              data-validate-on-blur={validateOnBlur === true || validateOnBlur === ''
                ? true
                : undefined}
              tabIndex={tabindex}
              data-error-message={errorMessageForce ? undefined : errorMessage}
              class={inputClasses}
              on:focus={onFocus}
              on:blur={onBlur}
              on:input={onInput}
              on:change={onChange}
              value={type === 'datepicker' || type === 'colorpicker' || type === 'file'
                ? ''
                : inputValue}
            />
          {/if}
        {/if}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'input'
	assign children_input = value | strip
	endif
	endfor
	-%}
	{%- if children_input != blank -%}
	{{- children_input -}}
	{%- endif -%}
	{%- assign children_input = '' -%}
	
        {#if hasErrorMessage && errorMessageForce}
          <div class="item-input-error-message">
            {plainText(errorMessage)}
            {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'error-message'
	assign children_error-message = value | strip
	endif
	endfor
	-%}
	{%- if children_error-message != blank -%}
	{{- children_error-message -}}
	{%- endif -%}
	{%- assign children_error-message = '' -%}
	
          </div>
        {/if}
        {#if clearButton}<span class="input-clear-button" />{/if}
        {#if typeof info !== 'undefined' || hasInfoSlots}
          <div class="item-input-info">
            {plainText(info)}
            {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'info'
	assign children_info = value | strip
	endif
	endfor
	-%}
	{%- if children_info != blank -%}
	{{- children_info -}}
	{%- endif -%}
	{%- assign children_info = '' -%}
	
          </div>
        {/if}
      </div>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'inner'
	assign children_inner = value | strip
	endif
	endfor
	-%}
	{%- if children_inner != blank -%}
	{{- children_inner -}}
	{%- endif -%}
	{%- assign children_inner = '' -%}
	
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'inner-end'
	assign children_inner-end = value | strip
	endif
	endfor
	-%}
	{%- if children_inner-end != blank -%}
	{{- children_inner-end -}}
	{%- endif -%}
	{%- assign children_inner-end = '' -%}
	
    </div>
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'content'
	assign children_content = value | strip
	endif
	endfor
	-%}
	{%- if children_content != blank -%}
	{{- children_content -}}
	{%- endif -%}
	{%- assign children_content = '' -%}
	
    {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'list-input' and name == 'content-end'
	assign children_content-end = value | strip
	endif
	endfor
	-%}
	{%- if children_content-end != blank -%}
	{{- children_content-end -}}
	{%- endif -%}
	{%- assign children_content-end = '' -%}
	
  </div>
{/if}

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	