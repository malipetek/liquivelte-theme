	{%- liquid
			
			
			assign classes = null
			assign type = null
			assign value = null
			assign size = null
			assign bgColor = null
			assign borderBgColor = null
			assign borderColor = null
			assign borderWidth = null
			assign valueText = null
			assign valueTextColor = null
			assign valueFontSize = null
			assign valueFontWeight = null
			assign labelText = null
			assign labelTextColor = null
			assign labelFontSize = null
			assign labelFontWeight = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'classes'
		assign classes = lv_propValue
	endif
	if lv_propName == 'type'
		assign type = lv_propValue
	endif
	if lv_propName == 'value'
		assign value = lv_propValue
	endif
	if lv_propName == 'size'
		assign size = lv_propValue
	endif
	if lv_propName == 'bgColor'
		assign bgColor = lv_propValue
	endif
	if lv_propName == 'borderBgColor'
		assign borderBgColor = lv_propValue
	endif
	if lv_propName == 'borderColor'
		assign borderColor = lv_propValue
	endif
	if lv_propName == 'borderWidth'
		assign borderWidth = lv_propValue
	endif
	if lv_propName == 'valueText'
		assign valueText = lv_propValue
	endif
	if lv_propName == 'valueTextColor'
		assign valueTextColor = lv_propValue
	endif
	if lv_propName == 'valueFontSize'
		assign valueFontSize = lv_propValue
	endif
	if lv_propName == 'valueFontWeight'
		assign valueFontWeight = lv_propValue
	endif
	if lv_propName == 'labelText'
		assign labelText = lv_propValue
	endif
	if lv_propName == 'labelTextColor'
		assign labelTextColor = lv_propValue
	endif
	if lv_propName == 'labelFontSize'
		assign labelFontSize = lv_propValue
	endif
	if lv_propName == 'labelFontWeight'
		assign labelFontWeight = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'framework7-liquivelte-gauge'
						assign slot_default_framework7-liquivelte_gauge = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component gauge" data-liquivelte-component-name="gauge.liquivelte">
	{%- endunless -%}
	

<div class={computedClasses} {...restProps($$restProps)}>
  <svg
    class="gauge-svg"
    width={`${size}px`}
    height={`${semiCircle ? size / 2 : size}px`}
    viewBox={`0 0 ${size} ${semiCircle ? size / 2 : size}`}
  >
    {#if semiCircle}
      <path
        class="gauge-back-semi"
        d={`M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`}
        stroke={borderBgColor}
        stroke-width={borderWidth}
        fill={bgColor || 'none'}
      />
      <path
        class="gauge-front-semi"
        d={`M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`}
        stroke={borderColor}
        stroke-width={borderWidth}
        stroke-dasharray={length / 2}
        stroke-dashoffset={(length / 2) * (1 + progress)}
        fill={borderBgColor ? 'none' : bgColor || 'none'}
      />
    {/if}
    {#if !semiCircle}
      {#if borderBgColor}
        <circle
          class="gauge-back-circle"
          stroke={borderBgColor}
          stroke-width={borderWidth}
          fill={bgColor || 'none'}
          cx={size / 2}
          cy={size / 2}
          r={radius}
        />
      {/if}
      <circle
        class="gauge-front-circle"
        transform={`rotate(-90 ${size / 2} ${size / 2})`}
        stroke={borderColor}
        stroke-width={borderWidth}
        stroke-dasharray={length}
        stroke-dashoffset={length * (1 - progress)}
        fill={borderBgColor ? 'none' : bgColor || 'none'}
        cx={size / 2}
        cy={size / 2}
        r={radius}
      />
    {/if}
    {#if valueText}
      <text
        class="gauge-value-text"
        x="50%"
        y={semiCircle ? '100%' : '50%'}
        font-weight={valueFontWeight}
        font-size={valueFontSize}
        fill={valueTextColor}
        dy={semiCircle ? (labelText ? -labelFontSize - 15 : -5) : 0}
        text-anchor="middle"
        dominant-baseline={!semiCircle ? 'middle' : null}
      >
        {valueText}
      </text>
    {/if}
    {#if labelText}
      <text
        class="gauge-label-text"
        x="50%"
        y={semiCircle ? '100%' : '50%'}
        font-weight={labelFontWeight}
        font-size={labelFontSize}
        fill={labelTextColor}
        dy={semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0}
        text-anchor="middle"
        dominant-baseline={!semiCircle ? 'middle' : null}
      >
        {labelText}
      </text>
    {/if}
  </svg>
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign classes = null
			assign type = null
			assign value = null
			assign size = null
			assign bgColor = null
			assign borderBgColor = null
			assign borderColor = null
			assign borderWidth = null
			assign valueText = null
			assign valueTextColor = null
			assign valueFontSize = null
			assign valueFontWeight = null
			assign labelText = null
			assign labelTextColor = null
			assign labelFontSize = null
			assign labelFontWeight = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_gauge = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	