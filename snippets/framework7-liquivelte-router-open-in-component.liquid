	{%- liquid
			
			
			assign openIn = null
			assign url = null
			assign viewSelector = null
			assign targetEl = null
			assign side = null
			assign effect = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'openIn'
		assign openIn = lv_propValue
	endif
	if lv_propName == 'url'
		assign url = lv_propValue
	endif
	if lv_propName == 'viewSelector'
		assign viewSelector = lv_propValue
	endif
	if lv_propName == 'targetEl'
		assign targetEl = lv_propValue
	endif
	if lv_propName == 'side'
		assign side = lv_propValue
	endif
	if lv_propName == 'effect'
		assign effect = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'framework7-liquivelte-router-open-in-component'
						assign slot_default_framework7-liquivelte_router-open-in-component = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component router-open-in-component" data-liquivelte-component-name="router-open-in-component.liquivelte">
	{%- endunless -%}
	

{% if openIn === 'popup' %}
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_Popup %}className-kvsp-popup-router-open-in-prsp-data-url-kvsp-{url}{% endcapture %}

{%- capture slot_content_def_Popup -%}
    
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_View %}linksView-kvsp-{viewSelector}-prsp-{url}-kvsp-1-prsp-ignoreOpenIn-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'view' %}
{% include modulename, liquivelte: true, props: props_View, sub_include: true, basename: '' %}
{% assign props = '' %}
  {%- endcapture -%}
{% assign slot_content_Popup = slot_content_Popup | append: '-scs-' | append: 'popup' | append: '-scvs-' | append: slot_content_def_Popup %}
{% assign modulename = basename | append: 'popup' %}
{% include modulename, liquivelte: true, props: props_Popup, sub_include: true, slot_contents: slot_content_Popup, basename: '' %}
{% assign props = '' %}
{% endif %}
{% if openIn === 'loginScreen' %}
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_LoginScreen %}className-kvsp-login-screen-router-open-in-prsp-data-url-kvsp-{url}{% endcapture %}

{%- capture slot_content_def_LoginScreen -%}
    
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_View %}linksView-kvsp-{viewSelector}-prsp-{url}-kvsp-1-prsp-ignoreOpenIn-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'view' %}
{% include modulename, liquivelte: true, props: props_View, sub_include: true, basename: '' %}
{% assign props = '' %}
  {%- endcapture -%}
{% assign slot_content_LoginScreen = slot_content_LoginScreen | append: '-scs-' | append: 'login-screen' | append: '-scvs-' | append: slot_content_def_LoginScreen %}
{% assign modulename = basename | append: 'login-screen' %}
{% include modulename, liquivelte: true, props: props_LoginScreen, sub_include: true, slot_contents: slot_content_LoginScreen, basename: '' %}
{% assign props = '' %}
{% endif %}
{% if openIn === 'sheet' %}
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_Sheet %}className-kvsp-sheet-modal-router-open-in-prsp-data-url-kvsp-{url}{% endcapture %}

{%- capture slot_content_def_Sheet -%}
    
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_View %}linksView-kvsp-{viewSelector}-prsp-{url}-kvsp-1-prsp-ignoreOpenIn-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'view' %}
{% include modulename, liquivelte: true, props: props_View, sub_include: true, basename: '' %}
{% assign props = '' %}
  {%- endcapture -%}
{% assign slot_content_Sheet = slot_content_Sheet | append: '-scs-' | append: 'sheet' | append: '-scvs-' | append: slot_content_def_Sheet %}
{% assign modulename = basename | append: 'sheet' %}
{% include modulename, liquivelte: true, props: props_Sheet, sub_include: true, slot_contents: slot_content_Sheet, basename: '' %}
{% assign props = '' %}
{% endif %}
{% if openIn === 'popover' %}
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_Popover %}className-kvsp-popover-router-open-in-prsp-{targetEl}-kvsp-1-prsp-data-url-kvsp-{url}{% endcapture %}

{%- capture slot_content_def_Popover -%}
    
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_View %}linksView-kvsp-{viewSelector}-prsp-{url}-kvsp-1-prsp-ignoreOpenIn-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'view' %}
{% include modulename, liquivelte: true, props: props_View, sub_include: true, basename: '' %}
{% assign props = '' %}
  {%- endcapture -%}
{% assign slot_content_Popover = slot_content_Popover | append: '-scs-' | append: 'popover' | append: '-scvs-' | append: slot_content_def_Popover %}
{% assign modulename = basename | append: 'popover' %}
{% include modulename, liquivelte: true, props: props_Popover, sub_include: true, slot_contents: slot_content_Popover, basename: '' %}
{% assign props = '' %}
{% endif %}
{% if openIn.indexOf('panel') === 0 %}
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_Panel %}{side}-kvsp-1-prsp-{effect}-kvsp-1-prsp-className-kvsp-panel-router-open-in-prsp-data-url-kvsp-{url}{% endcapture %}

{%- capture slot_content_def_Panel -%}
    
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_View %}linksView-kvsp-{viewSelector}-prsp-{url}-kvsp-1-prsp-ignoreOpenIn-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'view' %}
{% include modulename, liquivelte: true, props: props_View, sub_include: true, basename: '' %}
{% assign props = '' %}
  {%- endcapture -%}
{% assign slot_content_Panel = slot_content_Panel | append: '-scs-' | append: 'panel' | append: '-scvs-' | append: slot_content_def_Panel %}
{% assign modulename = basename | append: 'panel' %}
{% include modulename, liquivelte: true, props: props_Panel, sub_include: true, slot_contents: slot_content_Panel, basename: '' %}
{% assign props = '' %}
{% endif %}

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign openIn = null
			assign url = null
			assign viewSelector = null
			assign targetEl = null
			assign side = null
			assign effect = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_router-open-in-component = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	