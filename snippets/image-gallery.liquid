
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component image-gallery svelte-1j1mv4x" data-liquivelte-component-name="image-gallery.liquivelte">
	{%- endunless -%}
	



	{%- liquid 
	assign dynamic_classes = ''
	  if initialized != true
	assign dynamic_classes = dynamic_classes | append: ' uninitialized'
	endif
	-%}
	<div style="--swiper-navigation-color: #fff; --swiper-pagination-color: #fff; grid-template-columns: 100px auto; --max-height: {gallery_images[0] ? gallery_images[0].clientHeight : 500}px"
     class="mt-6 w-2xl max-w-2xl mx-auto sm:px-6 lg:max-w-7xl lg:px-8 lg:grid justify-items-center lg:gap-8 image-gallery{{ dynamic_classes }} svelte-1j1mv4x">
    <div  class="thumbs-slider swiper max-w-full hidden lg:flex justify-items-center overflow-hidden svelte-1j1mv4x">
      <div  class="mx-auto max-w-full svelte-1j1mv4x" bind:this="{thubmnailsElement}">
        <div  class="flex-column swiper-wrapper svelte-1j1mv4x"> 
          {% for image in product.images %}
    {% assign index = forloop.index0 %}
          <div  class="swiper-slide slide-thumbs  svelte-1j1mv4x">
            <div  class="w-fit aspect-w-4 aspect-h-5 sm:rounded-lg sm:overflow-hidden lg:aspect-w-3 lg:aspect-h-4 svelte-1j1mv4x">
              <img src="{{ image | img_url: '100x' }}" liquivelte-value-cache="img_urlÂ§{{image}}, {{'100x'}}Â§{{image| img_url: '100x'  }}" alt="{{ image.alt }}"  class="object-center object-cover svelte-1j1mv4x">
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
    </div>
    <div  class="swiper max-w-full svelte-1j1mv4x" bind:this="{galleryElement}">
    <div  class="swiper-wrapper svelte-1j1mv4x">
      {% for image in product.images %}
    {% assign index = forloop.index0 %}
        <div  class="swiper-slide aspect-w-4 aspect-h-5 sm:rounded-lg sm:overflow-hidden lg:aspect-w-3 lg:aspect-h-4 svelte-1j1mv4x">
          <div  class="swiper-zoom-container svelte-1j1mv4x" data-swiper-zoom="5">
          <img bind:this="{gallery_images[index]}" src="{{ image | img_url: '500x' }}" liquivelte-value-cache="img_urlÂ§{{image}}, {{'500x'}}Â§{{image| img_url: '500x'  }}" alt="{{ image.alt }}"  class="w-full h-full object-center object-cover svelte-1j1mv4x">
          </div>
        </div>
      {% endfor %}
      <div  class="swiper-button-next svelte-1j1mv4x"></div>
      <div  class="swiper-button-prev svelte-1j1mv4x"></div>
    </div>
  </div>
</div>
  <!-- Image gallery -->
  <!-- <div  class="mt-6 max-w-2xl mx-auto sm:px-6 lg:max-w-7xl lg:px-8 lg:grid lg:grid-cols-3 lg:gap-8 svelte-1j1mv4x">
    {% for image in product.images %}
    {% assign index = forloop.index0 %}
      <div  class="aspect-w-4 aspect-h-5 sm:rounded-lg sm:overflow-hidden lg:aspect-w-3 lg:aspect-h-4 svelte-1j1mv4x">
        <img src="{{ image | img_url: '500x' }}" liquivelte-value-cache="img_urlÂ§{{image}}, {{'500x'}}Â§{{image| img_url: '500x'  }}" alt="{{ image.alt }}"  class="w-full h-full object-center object-cover svelte-1j1mv4x">
      </div>
    {% endfor %}
  </div> -->


	
						
						
	<script type="text/noscript"  class="instance-data svelte-1j1mv4x">{
	"product" : {{ product | json }} 
	
	

	}</script>
	
	<script  class="liquivelte-prop-script svelte-1j1mv4x">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	