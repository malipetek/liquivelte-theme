	{%- liquid
			
			
			assign classes = null
			assign title = null
			assign content = null
			assign footer = null
			assign outline = null
			assign expandable = null
			assign expandableAnimateWidth = null
			assign expandableOpened = null
			assign animate = null
			assign hideNavbarOnOpen = null
			assign hideToolbarOnOpen = null
			assign hideStatusbarOnOpen = null
			assign scrollableEl = null
			assign swipeToClose = null
			assign closeByBackdropClick = null
			assign backdrop = null
			assign backdropEl = null
			assign noShadow = null
			assign noBorder = null
			assign padding = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'classes'
		assign classes = lv_propValue
	endif
	if lv_propName == 'title'
		assign title = lv_propValue
	endif
	if lv_propName == 'content'
		assign content = lv_propValue
	endif
	if lv_propName == 'footer'
		assign footer = lv_propValue
	endif
	if lv_propName == 'outline'
		assign outline = lv_propValue
	endif
	if lv_propName == 'expandable'
		assign expandable = lv_propValue
	endif
	if lv_propName == 'expandableAnimateWidth'
		assign expandableAnimateWidth = lv_propValue
	endif
	if lv_propName == 'expandableOpened'
		assign expandableOpened = lv_propValue
	endif
	if lv_propName == 'animate'
		assign animate = lv_propValue
	endif
	if lv_propName == 'hideNavbarOnOpen'
		assign hideNavbarOnOpen = lv_propValue
	endif
	if lv_propName == 'hideToolbarOnOpen'
		assign hideToolbarOnOpen = lv_propValue
	endif
	if lv_propName == 'hideStatusbarOnOpen'
		assign hideStatusbarOnOpen = lv_propValue
	endif
	if lv_propName == 'scrollableEl'
		assign scrollableEl = lv_propValue
	endif
	if lv_propName == 'swipeToClose'
		assign swipeToClose = lv_propValue
	endif
	if lv_propName == 'closeByBackdropClick'
		assign closeByBackdropClick = lv_propValue
	endif
	if lv_propName == 'backdrop'
		assign backdrop = lv_propValue
	endif
	if lv_propName == 'backdropEl'
		assign backdropEl = lv_propValue
	endif
	if lv_propName == 'noShadow'
		assign noShadow = lv_propValue
	endif
	if lv_propName == 'noBorder'
		assign noBorder = lv_propValue
	endif
	if lv_propName == 'padding'
		assign padding = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					if lv_module == 'framework7-liquivelte-card' and lv_name == 'header'
						assign slot_header_framework7-liquivelte_card = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-card' and lv_name == 'content'
						assign slot_content_framework7-liquivelte_card = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-card' and lv_name == 'footer'
						assign slot_footer_framework7-liquivelte_card = lv_value | strip
					endif
					
					if lv_module == 'framework7-liquivelte-card'
						assign slot_default_framework7-liquivelte_card = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component card" data-liquivelte-component-name="card.liquivelte">
	{%- endunless -%}
	

<div
  bind:this="{el}"
  class="card {{ classes }} {{ computedClasses }}"
  data-animate={typeof animate === 'undefined' ? animate : animate.toString()}
  data-hide-navbar-on-open={typeof hideNavbarOnOpen === 'undefined'
    ? hideNavbarOnOpen
    : hideNavbarOnOpen.toString()}
  data-hide-toolbar-on-open={typeof hideToolbarOnOpen === 'undefined'
    ? hideToolbarOnOpen
    : hideToolbarOnOpen.toString()}
  data-hide-statusbar-on-open={typeof hideStatusbarOnOpen === 'undefined'
    ? hideStatusbarOnOpen
    : hideStatusbarOnOpen.toString()}
  data-scrollable-el={scrollableEl}
  data-swipe-to-close={typeof swipeToClose === 'undefined' ? swipeToClose : swipeToClose.toString()}
  data-close-by-backdrop-click={typeof closeByBackdropClick === 'undefined'
    ? closeByBackdropClick
    : closeByBackdropClick.toString()}
  data-backdrop={typeof backdrop === 'undefined' ? backdrop : backdrop.toString()}
  data-backdrop-el={backdropEl}
  {...restProps($$restProps)}
>
  {% if title != blank or hasHeaderSlots %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_CardHeader %}undefined-kvsp-1{% endcapture %}

{%- capture slot_content_def_CardHeader -%}
      {{ title }}
      
	{%- if slot_header_framework7-liquivelte_card != blank -%}
		{{- slot_header_framework7-liquivelte_card -}}
	{%- endif -%}

    {%- endcapture -%}
{% assign slot_content_CardHeader = slot_content_CardHeader | append: '-scs-' | append: 'card-header' | append: '-scvs-' | append: slot_content_def_CardHeader %}
{% assign modulename = basename | append: 'card-header' %}
{% include modulename, liquivelte: true, props: props_CardHeader, sub_include: true, slot_contents: slot_content_CardHeader, basename: '' %}
{% assign props = '' %}
  {% endif %}
  {% if content != blank or hasContentSlots %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_CardContent %}{padding}-kvsp-1{% endcapture %}

{%- capture slot_content_def_CardContent -%}
      {{ content }}
      
	{%- if slot_content_framework7-liquivelte_card != blank -%}
		{{- slot_content_framework7-liquivelte_card -}}
	{%- endif -%}

    {%- endcapture -%}
{% assign slot_content_CardContent = slot_content_CardContent | append: '-scs-' | append: 'card-content' | append: '-scvs-' | append: slot_content_def_CardContent %}
{% assign modulename = basename | append: 'card-content' %}
{% include modulename, liquivelte: true, props: props_CardContent, sub_include: true, slot_contents: slot_content_CardContent, basename: '' %}
{% assign props = '' %}
  {% endif %}
  {% if footer != blank or hasFooterSlots %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_CardFooter %}undefined-kvsp-1{% endcapture %}

{%- capture slot_content_def_CardFooter -%}
      {{ footer }}
      
	{%- if slot_footer_framework7-liquivelte_card != blank -%}
		{{- slot_footer_framework7-liquivelte_card -}}
	{%- endif -%}

    {%- endcapture -%}
{% assign slot_content_CardFooter = slot_content_CardFooter | append: '-scs-' | append: 'card-footer' | append: '-scvs-' | append: slot_content_def_CardFooter %}
{% assign modulename = basename | append: 'card-footer' %}
{% include modulename, liquivelte: true, props: props_CardFooter, sub_include: true, slot_contents: slot_content_CardFooter, basename: '' %}
{% assign props = '' %}
  {% endif %}
  
	{%- if sub_include -%}
		{%- if slot_default_framework7-liquivelte_card != blank -%}
			{{- slot_default_framework7-liquivelte_card -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign classes = null
			assign title = null
			assign content = null
			assign footer = null
			assign outline = null
			assign expandable = null
			assign expandableAnimateWidth = null
			assign expandableOpened = null
			assign animate = null
			assign hideNavbarOnOpen = null
			assign hideToolbarOnOpen = null
			assign hideStatusbarOnOpen = null
			assign scrollableEl = null
			assign swipeToClose = null
			assign closeByBackdropClick = null
			assign backdrop = null
			assign backdropEl = null
			assign noShadow = null
			assign noBorder = null
			assign padding = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_card = null
			assign slot_header_framework7-liquivelte_card = null
			assign slot_content_framework7-liquivelte_card = null
			assign slot_footer_framework7-liquivelte_card = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	