
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'title'
	assign title = propValue
	endif
	if propName == 'content'
	assign content = propValue
	endif
	if propName == 'footer'
	assign footer = propValue
	endif
	if propName == 'outline'
	assign outline = propValue
	endif
	if propName == 'expandable'
	assign expandable = propValue
	endif
	if propName == 'expandableAnimateWidth'
	assign expandableAnimateWidth = propValue
	endif
	if propName == 'expandableOpened'
	assign expandableOpened = propValue
	endif
	if propName == 'animate'
	assign animate = propValue
	endif
	if propName == 'hideNavbarOnOpen'
	assign hideNavbarOnOpen = propValue
	endif
	if propName == 'hideToolbarOnOpen'
	assign hideToolbarOnOpen = propValue
	endif
	if propName == 'hideStatusbarOnOpen'
	assign hideStatusbarOnOpen = propValue
	endif
	if propName == 'scrollableEl'
	assign scrollableEl = propValue
	endif
	if propName == 'swipeToClose'
	assign swipeToClose = propValue
	endif
	if propName == 'closeByBackdropClick'
	assign closeByBackdropClick = propValue
	endif
	if propName == 'backdrop'
	assign backdrop = propValue
	endif
	if propName == 'backdropEl'
	assign backdropEl = propValue
	endif
	if propName == 'noShadow'
	assign noShadow = propValue
	endif
	if propName == 'noBorder'
	assign noBorder = propValue
	endif
	if propName == 'padding'
	assign padding = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component card" data-liquivelte-component-name="card.liquivelte">
	{%- endunless -%}
	

<div
  bind:this="{el}"
  class="card {{ classes }}"
  data-animate={typeof animate === 'undefined' ? animate : animate.toString()}
  data-hide-navbar-on-open={typeof hideNavbarOnOpen === 'undefined'
    ? hideNavbarOnOpen
    : hideNavbarOnOpen.toString()}
  data-hide-toolbar-on-open={typeof hideToolbarOnOpen === 'undefined'
    ? hideToolbarOnOpen
    : hideToolbarOnOpen.toString()}
  data-hide-statusbar-on-open={typeof hideStatusbarOnOpen === 'undefined'
    ? hideStatusbarOnOpen
    : hideStatusbarOnOpen.toString()}
  data-scrollable-el={scrollableEl}
  data-swipe-to-close={typeof swipeToClose === 'undefined' ? swipeToClose : swipeToClose.toString()}
  data-close-by-backdrop-click={typeof closeByBackdropClick === 'undefined'
    ? closeByBackdropClick
    : closeByBackdropClick.toString()}
  data-backdrop={typeof backdrop === 'undefined' ? backdrop : backdrop.toString()}
  data-backdrop-el={backdropEl}
  {...restProps($$restProps)}
>
  {% if title != blank or hasHeaderSlots %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}undefined-kvsp-{% endcapture %}

{% capture slot_content_CardHeader %}
      {{ title }}
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-card' and name == 'header'
	assign children_header = value | strip
	endif
	endfor
	-%}
	{%- if children_header != blank -%}
	{{- children_header -}}
	{%- endif -%}
	{%- assign children_header = '' -%}
	
    {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'card-header' | append: '-scvs-' | append: slot_content_CardHeader %}
{% assign modulename = basename | append: 'card-header' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: '' %}
{% assign props = '' %}
  {% endif %}
  {% if content != blank or hasContentSlots %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}{padding}-kvsp-{% endcapture %}

{% capture slot_content_CardContent %}
      {{ content }}
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-card' and name == 'content'
	assign children_content = value | strip
	endif
	endfor
	-%}
	{%- if children_content != blank -%}
	{{- children_content -}}
	{%- endif -%}
	{%- assign children_content = '' -%}
	
    {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'card-content' | append: '-scvs-' | append: slot_content_CardContent %}
{% assign modulename = basename | append: 'card-content' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: '' %}
{% assign props = '' %}
  {% endif %}
  {% if footer != blank or hasFooterSlots %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}undefined-kvsp-{% endcapture %}

{% capture slot_content_CardFooter %}
      {{ footer }}
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-card' and name == 'footer'
	assign children_footer = value | strip
	endif
	endfor
	-%}
	{%- if children_footer != blank -%}
	{{- children_footer -}}
	{%- endif -%}
	{%- assign children_footer = '' -%}
	
    {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'card-footer' | append: '-scvs-' | append: slot_content_CardFooter %}
{% assign modulename = basename | append: 'card-footer' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: '' %}
{% assign props = '' %}
  {% endif %}
  {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-card'
	assign children = value | strip
	endif
	endfor
	-%}
	
	{%- if sub_include -%}
		{%- if children != blank -%}
			{{- children -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	{%- assign children = '' -%}
	
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	