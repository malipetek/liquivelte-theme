
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'sliding'
	assign sliding = propValue
	endif
	if propName == 'title'
	assign title = propValue
	endif
	if propName == 'inner'
	assign inner = propValue
	endif
	if propName == 'f7Slot'
	assign f7Slot = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component subnavbar" data-liquivelte-component-name="subnavbar.liquivelte">
	{%- endunless -%}
	

<div class={classes} data-f7-slot={f7Slot} {...restProps($$restProps)}>
  {#if inner}
    <div class="subnavbar-inner">
      {#if title}
        <div class="subnavbar-title">{title}</div>
      {/if}
      {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-subnavbar'
	assign children = value | strip
	endif
	endfor
	-%}
	
	{%- if sub_include -%}
		{%- if children != blank -%}
			{{- children -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	{%- assign children = '' -%}
	
    </div>
  {:else}
    {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'framework7-liquivelte-subnavbar'
	assign children = value | strip
	endif
	endfor
	-%}
	
	{%- if sub_include -%}
		{%- if children != blank -%}
			{{- children -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	{%- assign children = '' -%}
	
  {/if}
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	