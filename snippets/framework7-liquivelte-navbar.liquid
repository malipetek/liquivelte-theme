
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'backLink'
	assign backLink = propValue
	endif
	if propName == 'backLinkUrl'
	assign backLinkUrl = propValue
	endif
	if propName == 'backLinkForce'
	assign backLinkForce = propValue
	endif
	if propName == 'backLinkShowText'
	assign backLinkShowText = propValue
	endif
	if propName == 'sliding'
	assign sliding = propValue
	endif
	if propName == 'title'
	assign title = propValue
	endif
	if propName == 'subtitle'
	assign subtitle = propValue
	endif
	if propName == 'hidden'
	assign hidden = propValue
	endif
	if propName == 'noShadow'
	assign noShadow = propValue
	endif
	if propName == 'noHairline'
	assign noHairline = propValue
	endif
	if propName == 'innerClass'
	assign innerClass = propValue
	endif
	if propName == 'innerClassName'
	assign innerClassName = propValue
	endif
	if propName == 'large'
	assign large = propValue
	endif
	if propName == 'largeTransparent'
	assign largeTransparent = propValue
	endif
	if propName == 'transparent'
	assign transparent = propValue
	endif
	if propName == 'titleLarge'
	assign titleLarge = propValue
	endif
	if propName == 'f7Slot'
	assign f7Slot = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component navbar" data-liquivelte-component-name="navbar.liquivelte">
	{%- endunless -%}
	

<div class={classes} bind:this={el} data-f7-slot={f7Slot} {...restProps($$restProps)}>
  <div class="navbar-bg" />
  {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'before-inner'
	assign children_before-inner = value | strip
	endif
	endfor
	-%}
	{%- if children_before-inner != blank -%}
	{{- children_before-inner -}}
	{%- endif -%}
	{%- assign children_before-inner = '' -%}
	
  <div class={innerClasses}>
    {#if backLink || hasLeftSlots}
      
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}{backLink}-kvsp--prsp-{backLinkUrl}-kvsp--prsp-{backLinkForce}-kvsp--prsp-{backLinkShowText}-kvsp--prsp-{onBackClick}-kvsp-{% endcapture %}

{% capture slot_content_NavLeft %}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'nav-left'
	assign children_nav-left = value | strip
	endif
	endfor
	-%}
	{%- if children_nav-left != blank -%}
	{{- children_nav-left -}}
	{%- endif -%}
	{%- assign children_nav-left = '' -%}
	
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'left'
	assign children_left = value | strip
	endif
	endfor
	-%}
	{%- if children_left != blank -%}
	{{- children_left -}}
	{%- endif -%}
	{%- assign children_left = '' -%}
	
      {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'nav-left' | append: '-scvs-' | append: slot_content_NavLeft %}

{% include 'nav-left', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
    {/if}
    {#if title || subtitle || hasTitleSlots}
      
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}{title}-kvsp--prsp-{subtitle}-kvsp-{% endcapture %}

{% capture slot_content_NavTitle %}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'title'
	assign children_title = value | strip
	endif
	endfor
	-%}
	{%- if children_title != blank -%}
	{{- children_title -}}
	{%- endif -%}
	{%- assign children_title = '' -%}
	
      {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'nav-title' | append: '-scvs-' | append: slot_content_NavTitle %}

{% include 'nav-title', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
    {/if}
    {#if hasRightSlots}
      
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}undefined-kvsp-{% endcapture %}

{% capture slot_content_NavRight %}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'nav-right'
	assign children_nav-right = value | strip
	endif
	endfor
	-%}
	{%- if children_nav-right != blank -%}
	{{- children_nav-right -}}
	{%- endif -%}
	{%- assign children_nav-right = '' -%}
	
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'right'
	assign children_right = value | strip
	endif
	endfor
	-%}
	{%- if children_right != blank -%}
	{{- children_right -}}
	{%- endif -%}
	{%- assign children_right = '' -%}
	
      {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'nav-right' | append: '-scvs-' | append: slot_content_NavRight %}

{% include 'nav-right', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
    {/if}
    {#if largeTitle || hasTitleLargeSlots}
      <div class="title-large">
        <div class="title-large-text">
          {plainText(largeTitle)}
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'title-large'
	assign children_title-large = value | strip
	endif
	endfor
	-%}
	{%- if children_title-large != blank -%}
	{{- children_title-large -}}
	{%- endif -%}
	{%- assign children_title-large = '' -%}
	
        </div>
      </div>
    {/if}
    {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar'
	assign children = value | strip
	endif
	endfor
	-%}
	{%- if children != blank -%}
	{{- children -}}
	{%- endif -%}
	{%- assign children = '' -%}
	
  </div>
  {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'navbar' and name == 'after-inner'
	assign children_after-inner = value | strip
	endif
	endfor
	-%}
	{%- if children_after-inner != blank -%}
	{{- children_after-inner -}}
	{%- endif -%}
	{%- assign children_after-inner = '' -%}
	
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	