	{%- liquid
			
			
			assign classes = null
			assign init = null
			assign value = null
			assign min = null
			assign max = null
			assign step = null
			assign formatValue = null
			assign name = null
			assign inputId = null
			assign input = null
			assign inputType = null
			assign inputReadonly = null
			assign autorepeat = null
			assign autorepeatDynamic = null
			assign wraps = null
			assign manualInputMode = null
			assign decimalPoint = null
			assign buttonsEndInputMode = null
			assign disabled = null
			assign buttonsOnly = null
			assign round = null
			assign roundMd = null
			assign roundIos = null
			assign roundAurora = null
			assign fill = null
			assign fillMd = null
			assign fillIos = null
			assign fillAurora = null
			assign large = null
			assign largeMd = null
			assign largeIos = null
			assign largeAurora = null
			assign small = null
			assign smallMd = null
			assign smallIos = null
			assign smallAurora = null
			assign raised = null
			assign raisedMd = null
			assign raisedIos = null
			assign raisedAurora = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'classes'
		assign classes = lv_propValue
	endif
	if lv_propName == 'init'
		assign init = lv_propValue
	endif
	if lv_propName == 'value'
		assign value = lv_propValue
	endif
	if lv_propName == 'min'
		assign min = lv_propValue
	endif
	if lv_propName == 'max'
		assign max = lv_propValue
	endif
	if lv_propName == 'step'
		assign step = lv_propValue
	endif
	if lv_propName == 'formatValue'
		assign formatValue = lv_propValue
	endif
	if lv_propName == 'name'
		assign name = lv_propValue
	endif
	if lv_propName == 'inputId'
		assign inputId = lv_propValue
	endif
	if lv_propName == 'input'
		assign input = lv_propValue
	endif
	if lv_propName == 'inputType'
		assign inputType = lv_propValue
	endif
	if lv_propName == 'inputReadonly'
		assign inputReadonly = lv_propValue
	endif
	if lv_propName == 'autorepeat'
		assign autorepeat = lv_propValue
	endif
	if lv_propName == 'autorepeatDynamic'
		assign autorepeatDynamic = lv_propValue
	endif
	if lv_propName == 'wraps'
		assign wraps = lv_propValue
	endif
	if lv_propName == 'manualInputMode'
		assign manualInputMode = lv_propValue
	endif
	if lv_propName == 'decimalPoint'
		assign decimalPoint = lv_propValue
	endif
	if lv_propName == 'buttonsEndInputMode'
		assign buttonsEndInputMode = lv_propValue
	endif
	if lv_propName == 'disabled'
		assign disabled = lv_propValue
	endif
	if lv_propName == 'buttonsOnly'
		assign buttonsOnly = lv_propValue
	endif
	if lv_propName == 'round'
		assign round = lv_propValue
	endif
	if lv_propName == 'roundMd'
		assign roundMd = lv_propValue
	endif
	if lv_propName == 'roundIos'
		assign roundIos = lv_propValue
	endif
	if lv_propName == 'roundAurora'
		assign roundAurora = lv_propValue
	endif
	if lv_propName == 'fill'
		assign fill = lv_propValue
	endif
	if lv_propName == 'fillMd'
		assign fillMd = lv_propValue
	endif
	if lv_propName == 'fillIos'
		assign fillIos = lv_propValue
	endif
	if lv_propName == 'fillAurora'
		assign fillAurora = lv_propValue
	endif
	if lv_propName == 'large'
		assign large = lv_propValue
	endif
	if lv_propName == 'largeMd'
		assign largeMd = lv_propValue
	endif
	if lv_propName == 'largeIos'
		assign largeIos = lv_propValue
	endif
	if lv_propName == 'largeAurora'
		assign largeAurora = lv_propValue
	endif
	if lv_propName == 'small'
		assign small = lv_propValue
	endif
	if lv_propName == 'smallMd'
		assign smallMd = lv_propValue
	endif
	if lv_propName == 'smallIos'
		assign smallIos = lv_propValue
	endif
	if lv_propName == 'smallAurora'
		assign smallAurora = lv_propValue
	endif
	if lv_propName == 'raised'
		assign raised = lv_propValue
	endif
	if lv_propName == 'raisedMd'
		assign raisedMd = lv_propValue
	endif
	if lv_propName == 'raisedIos'
		assign raisedIos = lv_propValue
	endif
	if lv_propName == 'raisedAurora'
		assign raisedAurora = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'framework7-liquivelte-stepper'
						assign slot_default_framework7-liquivelte_stepper = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component stepper" data-liquivelte-component-name="stepper.liquivelte">
	{%- endunless -%}
	{% liquid
  assign init = true
  assign value = 0
  assign min = 0
  assign max = 100
  assign step = 1
  assign input = true
  assign inputType = 'text'
  assign inputReadonly = false
  assign autorepeat = false
  assign autorepeatDynamic = false
  assign wraps = false
  assign manualInputMode = false
  assign decimalPoint = 4
  assign buttonsEndInputMode = true
%}


<div bind:this="{el}" class="stepper {{ classes }} {{ computedClasses }}" {...restProps($$restProps)} >
  <div on:click="{onMinusClick}" class="stepper-button-minus" ></div>
  {% if input and buttonsOnly != true %}
    <div class="stepper-input-wrap">
      <input
        name="{name}"
        id="{inputId}"
        type="{inputType}"
        min="{inputType === 'number' ? min : undefined}"
        max="{inputType === 'number' ? max : undefined}"
        step="{inputType === 'number' ? step : undefined}"
        on:input="{onInput}"
        on:change="{onChange}"
        value="{{ value }}"
        readonly="{inputReadonly}"
      />
    </div>
  {% endif %}
  {% unless input or buttonsOnly %}
    <div class="stepper-value">{{ value | default: '' }}</div>
  {% endunless %}
  <div on:click="{onPlusClick}" class="stepper-button-plus" ></div>
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign classes = null
			assign init = null
			assign value = null
			assign min = null
			assign max = null
			assign step = null
			assign formatValue = null
			assign name = null
			assign inputId = null
			assign input = null
			assign inputType = null
			assign inputReadonly = null
			assign autorepeat = null
			assign autorepeatDynamic = null
			assign wraps = null
			assign manualInputMode = null
			assign decimalPoint = null
			assign buttonsEndInputMode = null
			assign disabled = null
			assign buttonsOnly = null
			assign round = null
			assign roundMd = null
			assign roundIos = null
			assign roundAurora = null
			assign fill = null
			assign fillMd = null
			assign fillIos = null
			assign fillAurora = null
			assign large = null
			assign largeMd = null
			assign largeIos = null
			assign largeAurora = null
			assign small = null
			assign smallMd = null
			assign smallIos = null
			assign smallAurora = null
			assign raised = null
			assign raisedMd = null
			assign raisedIos = null
			assign raisedAurora = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_stepper = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	