
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'init'
	assign init = propValue
	endif
	if propName == 'value'
	assign value = propValue
	endif
	if propName == 'min'
	assign min = propValue
	endif
	if propName == 'max'
	assign max = propValue
	endif
	if propName == 'step'
	assign step = propValue
	endif
	if propName == 'formatValue'
	assign formatValue = propValue
	endif
	if propName == 'name'
	assign name = propValue
	endif
	if propName == 'inputId'
	assign inputId = propValue
	endif
	if propName == 'input'
	assign input = propValue
	endif
	if propName == 'inputType'
	assign inputType = propValue
	endif
	if propName == 'inputReadonly'
	assign inputReadonly = propValue
	endif
	if propName == 'autorepeat'
	assign autorepeat = propValue
	endif
	if propName == 'autorepeatDynamic'
	assign autorepeatDynamic = propValue
	endif
	if propName == 'wraps'
	assign wraps = propValue
	endif
	if propName == 'manualInputMode'
	assign manualInputMode = propValue
	endif
	if propName == 'decimalPoint'
	assign decimalPoint = propValue
	endif
	if propName == 'buttonsEndInputMode'
	assign buttonsEndInputMode = propValue
	endif
	if propName == 'disabled'
	assign disabled = propValue
	endif
	if propName == 'buttonsOnly'
	assign buttonsOnly = propValue
	endif
	if propName == 'round'
	assign round = propValue
	endif
	if propName == 'roundMd'
	assign roundMd = propValue
	endif
	if propName == 'roundIos'
	assign roundIos = propValue
	endif
	if propName == 'roundAurora'
	assign roundAurora = propValue
	endif
	if propName == 'fill'
	assign fill = propValue
	endif
	if propName == 'fillMd'
	assign fillMd = propValue
	endif
	if propName == 'fillIos'
	assign fillIos = propValue
	endif
	if propName == 'fillAurora'
	assign fillAurora = propValue
	endif
	if propName == 'large'
	assign large = propValue
	endif
	if propName == 'largeMd'
	assign largeMd = propValue
	endif
	if propName == 'largeIos'
	assign largeIos = propValue
	endif
	if propName == 'largeAurora'
	assign largeAurora = propValue
	endif
	if propName == 'small'
	assign small = propValue
	endif
	if propName == 'smallMd'
	assign smallMd = propValue
	endif
	if propName == 'smallIos'
	assign smallIos = propValue
	endif
	if propName == 'smallAurora'
	assign smallAurora = propValue
	endif
	if propName == 'raised'
	assign raised = propValue
	endif
	if propName == 'raisedMd'
	assign raisedMd = propValue
	endif
	if propName == 'raisedIos'
	assign raisedIos = propValue
	endif
	if propName == 'raisedAurora'
	assign raisedAurora = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component stepper" data-liquivelte-component-name="stepper.liquivelte">
	{%- endunless -%}
	

<div bind:this={el} class={classes} {...restProps($$restProps)}>
  <div on:click={onMinusClick} class="stepper-button-minus" />
  {#if input && !buttonsOnly}
    <div class="stepper-input-wrap">
      <input
        {name}
        id={inputId}
        type={inputType}
        min={inputType === 'number' ? min : undefined}
        max={inputType === 'number' ? max : undefined}
        step={inputType === 'number' ? step : undefined}
        on:input={onInput}
        on:change={onChange}
        value={typeof value === 'undefined' ? '' : value}
        readonly={inputReadonly}
      />
    </div>
  {/if}
  {#if !input && !buttonsOnly}
    <div class="stepper-value">{plainText(value)}</div>
  {/if}
  <div on:click={onPlusClick} class="stepper-button-plus" />
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	