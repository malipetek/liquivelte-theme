	{%- liquid
			
			
			assign classes = null
			assign text = null
			assign htmlText = null
			assign name = null
			assign avatar = null
			assign type = null
			assign image = null
			assign header = null
			assign footer = null
			assign textHeader = null
			assign textFooter = null
			assign first = null
			assign last = null
			assign tail = null
			assign sameName = null
			assign sameHeader = null
			assign sameFooter = null
			assign sameAvatar = null
			assign typing = null
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'classes'
		assign classes = lv_propValue
	endif
	if lv_propName == 'text'
		assign text = lv_propValue
	endif
	if lv_propName == 'htmlText'
		assign htmlText = lv_propValue
	endif
	if lv_propName == 'name'
		assign name = lv_propValue
	endif
	if lv_propName == 'avatar'
		assign avatar = lv_propValue
	endif
	if lv_propName == 'type'
		assign type = lv_propValue
	endif
	if lv_propName == 'image'
		assign image = lv_propValue
	endif
	if lv_propName == 'header'
		assign header = lv_propValue
	endif
	if lv_propName == 'footer'
		assign footer = lv_propValue
	endif
	if lv_propName == 'textHeader'
		assign textHeader = lv_propValue
	endif
	if lv_propName == 'textFooter'
		assign textFooter = lv_propValue
	endif
	if lv_propName == 'first'
		assign first = lv_propValue
	endif
	if lv_propName == 'last'
		assign last = lv_propValue
	endif
	if lv_propName == 'tail'
		assign tail = lv_propValue
	endif
	if lv_propName == 'sameName'
		assign sameName = lv_propValue
	endif
	if lv_propName == 'sameHeader'
		assign sameHeader = lv_propValue
	endif
	if lv_propName == 'sameFooter'
		assign sameFooter = lv_propValue
	endif
	if lv_propName == 'sameAvatar'
		assign sameAvatar = lv_propValue
	endif
	if lv_propName == 'typing'
		assign typing = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'start'
						assign slot_start_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'avatar'
						assign slot_avatar_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'content-start'
						assign slot_content-start_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'name'
						assign slot_name_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'header'
						assign slot_header_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'bubble-start'
						assign slot_bubble-start_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'image'
						assign slot_image_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'text-header'
						assign slot_text-header_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'text'
						assign slot_text_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'text-footer'
						assign slot_text-footer_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'bubble-end'
						assign slot_bubble-end_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'footer'
						assign slot_footer_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'content-end'
						assign slot_content-end_framework7-liquivelte_message = lv_value | strip
					endif
					if lv_module == 'framework7-liquivelte-message' and lv_name == 'end'
						assign slot_end_framework7-liquivelte_message = lv_value | strip
					endif
					
					if lv_module == 'framework7-liquivelte-message'
						assign slot_default_framework7-liquivelte_message = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component message" data-liquivelte-component-name="message.liquivelte">
	{%- endunless -%}
	

<!-- svelte-ignore a11y-missing-attribute -->
<div class={computedClasses} on:click={onClick} {...restProps($$restProps)}>
  
	{%- if slot_start_framework7-liquivelte_message != blank -%}
		{{- slot_start_framework7-liquivelte_message -}}
	{%- endif -%}

  {#if avatar || hasAvatarSlots}
    <div
      on:click={onAvatarClick}
      class="message-avatar"
      style={avatar ? `background-image: url(${avatar})` : undefined}
    >
      
	{%- if slot_avatar_framework7-liquivelte_message != blank -%}
		{{- slot_avatar_framework7-liquivelte_message -}}
	{%- endif -%}

    </div>
  {/if}
  <div class="message-content">
    
	{%- if slot_content-start_framework7-liquivelte_message != blank -%}
		{{- slot_content-start_framework7-liquivelte_message -}}
	{%- endif -%}

    {#if hasNameSlots || name}
      <div class="message-name" on:click={onNameClick}>
        {{ name }}
        
	{%- if slot_name_framework7-liquivelte_message != blank -%}
		{{- slot_name_framework7-liquivelte_message -}}
	{%- endif -%}

      </div>
    {/if}
    {#if hasHeaderSlots || header}
      <div class="message-header" on:click={onHeaderClick}>
        {{ header }}
        
	{%- if slot_header_framework7-liquivelte_message != blank -%}
		{{- slot_header_framework7-liquivelte_message -}}
	{%- endif -%}

      </div>
    {/if}
    <div class="message-bubble" on:click={onBubbleClick}>
      
	{%- if slot_bubble-start_framework7-liquivelte_message != blank -%}
		{{- slot_bubble-start_framework7-liquivelte_message -}}
	{%- endif -%}

      {#if hasImageSlots || image}
        <div class="message-image">
          {#if image}
            <img src={image} />
          {/if}
          
	{%- if slot_image_framework7-liquivelte_message != blank -%}
		{{- slot_image_framework7-liquivelte_message -}}
	{%- endif -%}

        </div>
      {/if}
      {#if hasTextHeaderSlots || textHeader}
        <div class="message-text-header">
          {{ textHeader }}
          
	{%- if slot_text-header_framework7-liquivelte_message != blank -%}
		{{- slot_text-header_framework7-liquivelte_message -}}
	{%- endif -%}

        </div>
      {/if}
      {#if hasTextSlots || text || htmlText || typing}
        <div class="message-text" on:click={onTextClick}>
          {{ text }}
          {#if htmlText}{@html htmlText}{/if}
          
	{%- if slot_text_framework7-liquivelte_message != blank -%}
		{{- slot_text_framework7-liquivelte_message -}}
	{%- endif -%}

          {#if typing}
            <div class="message-typing-indicator">
              <div />
              <div />
              <div />
            </div>
          {/if}
        </div>
      {/if}
      {#if hasTextFooterSlots || textFooter}
        <div class="message-text-footer">
          {{ textFooter }}
          
	{%- if slot_text-footer_framework7-liquivelte_message != blank -%}
		{{- slot_text-footer_framework7-liquivelte_message -}}
	{%- endif -%}

        </div>
      {/if}
      
	{%- if slot_bubble-end_framework7-liquivelte_message != blank -%}
		{{- slot_bubble-end_framework7-liquivelte_message -}}
	{%- endif -%}

      
	{%- if sub_include -%}
		{%- if slot_default_framework7-liquivelte_message != blank -%}
			{{- slot_default_framework7-liquivelte_message -}}
		{%- endif -%}
	{%- else -%}
		{%- if main_content != blank -%}
			{{- main_content -}}
		{%- endif -%}
	{%- endif -%}
	
    </div>
    {#if hasFooterSlots || footer}
      <div class="message-footer" on:click={onFooterClick}>
        {{ footer }}
        
	{%- if slot_footer_framework7-liquivelte_message != blank -%}
		{{- slot_footer_framework7-liquivelte_message -}}
	{%- endif -%}

      </div>
    {/if}
    
	{%- if slot_content-end_framework7-liquivelte_message != blank -%}
		{{- slot_content-end_framework7-liquivelte_message -}}
	{%- endif -%}

  </div>
  
	{%- if slot_end_framework7-liquivelte_message != blank -%}
		{{- slot_end_framework7-liquivelte_message -}}
	{%- endif -%}

</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	
	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			assign classes = null
			assign text = null
			assign htmlText = null
			assign name = null
			assign avatar = null
			assign type = null
			assign image = null
			assign header = null
			assign footer = null
			assign textHeader = null
			assign textFooter = null
			assign first = null
			assign last = null
			assign tail = null
			assign sameName = null
			assign sameHeader = null
			assign sameFooter = null
			assign sameAvatar = null
			assign typing = null
			-%}
	{%- liquid 
			assign slot_default_framework7-liquivelte_message = null
			assign slot_start_framework7-liquivelte_message = null
			assign slot_avatar_framework7-liquivelte_message = null
			assign slot_content-start_framework7-liquivelte_message = null
			assign slot_name_framework7-liquivelte_message = null
			assign slot_header_framework7-liquivelte_message = null
			assign slot_bubble-start_framework7-liquivelte_message = null
			assign slot_image_framework7-liquivelte_message = null
			assign slot_text-header_framework7-liquivelte_message = null
			assign slot_text_framework7-liquivelte_message = null
			assign slot_text-footer_framework7-liquivelte_message = null
			assign slot_bubble-end_framework7-liquivelte_message = null
			assign slot_footer_framework7-liquivelte_message = null
			assign slot_content-end_framework7-liquivelte_message = null
			assign slot_end_framework7-liquivelte_message = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	