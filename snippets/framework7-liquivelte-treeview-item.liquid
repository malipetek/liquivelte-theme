
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	if propName == 'toggle'
	assign toggle = propValue
	endif
	if propName == 'itemToggle'
	assign itemToggle = propValue
	endif
	if propName == 'selectable'
	assign selectable = propValue
	endif
	if propName == 'selected'
	assign selected = propValue
	endif
	if propName == 'opened'
	assign opened = propValue
	endif
	if propName == 'label'
	assign label = propValue
	endif
	if propName == 'loadChildren'
	assign loadChildren = propValue
	endif
	if propName == 'link'
	assign link = propValue
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div class="liquivelte-component treeview-item" data-liquivelte-component-name="treeview-item.liquivelte">
	{%- endunless -%}
	

<!-- svelte-ignore a11y-missing-attribute -->
<div bind:this={el} class={classes} {...restProps($$restProps)}>
  {#if treeviewRootTag === 'div'}
    <div on:click={onClick} class={itemRootClasses} {...itemRootAttrs}>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'root-start'
	assign children_root-start = value | strip
	endif
	endfor
	-%}
	{%- if children_root-start != blank -%}
	{{- children_root-start -}}
	{%- endif -%}
	{%- assign children_root-start = '' -%}
	
      {#if needToggle}
        <div class="treeview-toggle" />
      {/if}
      <div class="treeview-item-content">
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'content-start'
	assign children_content-start = value | strip
	endif
	endfor
	-%}
	{%- if children_content-start != blank -%}
	{{- children_content-start -}}
	{%- endif -%}
	{%- assign children_content-start = '' -%}
	
        {#if icon}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}{icon}-kvsp-{% endcapture %}
{% include 'use-icon', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
        {/if}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'media'
	assign children_media = value | strip
	endif
	endfor
	-%}
	{%- if children_media != blank -%}
	{{- children_media -}}
	{%- endif -%}
	{%- assign children_media = '' -%}
	
        <div class="treeview-item-label">
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'label-start'
	assign children_label-start = value | strip
	endif
	endfor
	-%}
	{%- if children_label-start != blank -%}
	{{- children_label-start -}}
	{%- endif -%}
	{%- assign children_label-start = '' -%}
	
          {plainText(label)}
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'label'
	assign children_label = value | strip
	endif
	endfor
	-%}
	{%- if children_label != blank -%}
	{{- children_label -}}
	{%- endif -%}
	{%- assign children_label = '' -%}
	
        </div>
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'content'
	assign children_content = value | strip
	endif
	endfor
	-%}
	{%- if children_content != blank -%}
	{{- children_content -}}
	{%- endif -%}
	{%- assign children_content = '' -%}
	
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'content-end'
	assign children_content-end = value | strip
	endif
	endfor
	-%}
	{%- if children_content-end != blank -%}
	{{- children_content-end -}}
	{%- endif -%}
	{%- assign children_content-end = '' -%}
	
      </div>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'root'
	assign children_root = value | strip
	endif
	endfor
	-%}
	{%- if children_root != blank -%}
	{{- children_root -}}
	{%- endif -%}
	{%- assign children_root = '' -%}
	
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'root-end'
	assign children_root-end = value | strip
	endif
	endfor
	-%}
	{%- if children_root-end != blank -%}
	{{- children_root-end -}}
	{%- endif -%}
	{%- assign children_root-end = '' -%}
	
    </div>
  {:else}
    <a on:click={onClick} class={itemRootClasses} {...itemRootAttrs}>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'root-start'
	assign children_root-start = value | strip
	endif
	endfor
	-%}
	{%- if children_root-start != blank -%}
	{{- children_root-start -}}
	{%- endif -%}
	{%- assign children_root-start = '' -%}
	
      {#if needToggle}
        <div class="treeview-toggle" />
      {/if}
      <div class="treeview-item-content">
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'content-start'
	assign children_content-start = value | strip
	endif
	endfor
	-%}
	{%- if children_content-start != blank -%}
	{{- children_content-start -}}
	{%- endif -%}
	{%- assign children_content-start = '' -%}
	
        {#if icon}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}{icon}-kvsp-{% endcapture %}
{% include 'use-icon', liquivelte: true, props: props, sub_include: true %}
{% assign props = '' %}
        {/if}
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'media'
	assign children_media = value | strip
	endif
	endfor
	-%}
	{%- if children_media != blank -%}
	{{- children_media -}}
	{%- endif -%}
	{%- assign children_media = '' -%}
	
        <div class="treeview-item-label">
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'label-start'
	assign children_label-start = value | strip
	endif
	endfor
	-%}
	{%- if children_label-start != blank -%}
	{{- children_label-start -}}
	{%- endif -%}
	{%- assign children_label-start = '' -%}
	
          {plainText(label)}
          {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'label'
	assign children_label = value | strip
	endif
	endfor
	-%}
	{%- if children_label != blank -%}
	{{- children_label -}}
	{%- endif -%}
	{%- assign children_label = '' -%}
	
        </div>
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'content'
	assign children_content = value | strip
	endif
	endfor
	-%}
	{%- if children_content != blank -%}
	{{- children_content -}}
	{%- endif -%}
	{%- assign children_content = '' -%}
	
        {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'content-end'
	assign children_content-end = value | strip
	endif
	endfor
	-%}
	{%- if children_content-end != blank -%}
	{{- children_content-end -}}
	{%- endif -%}
	{%- assign children_content-end = '' -%}
	
      </div>
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'root'
	assign children_root = value | strip
	endif
	endfor
	-%}
	{%- if children_root != blank -%}
	{{- children_root -}}
	{%- endif -%}
	{%- assign children_root = '' -%}
	
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'root-end'
	assign children_root-end = value | strip
	endif
	endfor
	-%}
	{%- if children_root-end != blank -%}
	{{- children_root-end -}}
	{%- endif -%}
	{%- assign children_root-end = '' -%}
	
    </a>
  {/if}
  {#if hasChildren}
    <div class="treeview-item-children">
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'children-start'
	assign children_children-start = value | strip
	endif
	endfor
	-%}
	{%- if children_children-start != blank -%}
	{{- children_children-start -}}
	{%- endif -%}
	{%- assign children_children-start = '' -%}
	
      {%- liquid 
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module = content_and_value | split: '-scvs-' | first
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item'
	assign children = value | strip
	endif
	endfor
	-%}
	{%- if children != blank -%}
	{{- children -}}
	{%- endif -%}
	{%- assign children = '' -%}
	
      {%- liquid
	assign slot_contents_and_values = slot_contents | split: '-scs-'
	for content_and_value in slot_contents_and_values
	assign module_and_slotname = content_and_value | split: '-scvs-' | first
	assign module = module_and_slotname | split: '-smns-' | first
	assign name = module_and_slotname | split: '-smns-' | last
	assign value = content_and_value | split: '-scvs-' | last
	if module == 'treeview-item' and name == 'children'
	assign children_children = value | strip
	endif
	endfor
	-%}
	{%- if children_children != blank -%}
	{{- children_children -}}
	{%- endif -%}
	{%- assign children_children = '' -%}
	
    </div>
  {/if}
</div>

	
						
						
	<script type="text/noscript" class="instance-data">{
	
	
	

	}</script>
	
	<script class="liquivelte-prop-script">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	