import { SvelteComponent, init, safe_not_equal, empty, insert_hydration, group_outros, transition_out, check_outros, transition_in, detach, compute_rest_props, getContext, createEventDispatcher, onMount, onDestroy, assign, exclude_internal_props, binding_callbacks, create_slot, element, space, claim_element, children, claim_space, attr, toggle_class, append_hydration, listen, update_slot_base, get_all_dirty_from_scope, get_slot_changes, set_attributes, get_spread_update } from './liquivelte-svelte-hs8b900a8a.liquivelte.js';
import { createEmitter, f7ready, app, classNames, colorClasses, restProps } from './framework7-liquivelte-hs01c0185d.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/row.liquivelte generated by Svelte v3.50.0 */

function create_if_block_2(ctx) {
	let p;
	let t;
	let p_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let if_block = /*resizable*/ ctx[3] && /*resizableHandler*/ ctx[6] && create_if_block_3();

	return {
		c() {
			p = element("p");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			if (default_slot) default_slot.l(p_nodes);
			t = claim_space(p_nodes);
			if (if_block) if_block.l(p_nodes);
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", p_class_value = "row " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[7]);
			toggle_class(p, "no-gap", /*noGap*/ ctx[1]);
			toggle_class(p, "resizable-fixed", /*resizableFixed*/ ctx[4]);
			toggle_class(p, "resizable-absolute", /*resizableAbsolute*/ ctx[5]);
		},
		m(target, anchor) {
			insert_hydration(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			append_hydration(p, t);
			if (if_block) if_block.m(p, null);
			/*p_binding*/ ctx[15](p);
			current = true;

			if (!mounted) {
				dispose = listen(p, "click", /*onClick*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			if (/*resizable*/ ctx[3] && /*resizableHandler*/ ctx[6]) {
				if (if_block) ; else {
					if_block = create_if_block_3();
					if_block.c();
					if_block.m(p, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*classes, computedClasses*/ 129 && p_class_value !== (p_class_value = "row " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[7])) {
				attr(p, "class", p_class_value);
			}

			if (!current || dirty & /*classes, computedClasses, noGap*/ 131) {
				toggle_class(p, "no-gap", /*noGap*/ ctx[1]);
			}

			if (!current || dirty & /*classes, computedClasses, resizableFixed*/ 145) {
				toggle_class(p, "resizable-fixed", /*resizableFixed*/ ctx[4]);
			}

			if (!current || dirty & /*classes, computedClasses, resizableAbsolute*/ 161) {
				toggle_class(p, "resizable-absolute", /*resizableAbsolute*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*p_binding*/ ctx[15](null);
			mounted = false;
			dispose();
		}
	};
}

// (61:0) {#if tag == 'div' }
function create_if_block(ctx) {
	let div;
	let t;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let if_block = /*resizable*/ ctx[3] && /*resizableHandler*/ ctx[6] && create_if_block_1();

	let div_levels = [
		{
			class: div_class_value = "row " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[7]
		},
		restProps(/*$$restProps*/ ctx[10])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			t = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(div, div_data);
			toggle_class(div, "no-gap", /*noGap*/ ctx[1]);
			toggle_class(div, "resizable-fixed", /*resizableFixed*/ ctx[4]);
			toggle_class(div, "resizable-absolute", /*resizableAbsolute*/ ctx[5]);
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append_hydration(div, t);
			if (if_block) if_block.m(div, null);
			/*div_binding*/ ctx[14](div);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*onClick*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			if (/*resizable*/ ctx[3] && /*resizableHandler*/ ctx[6]) {
				if (if_block) ; else {
					if_block = create_if_block_1();
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*classes, computedClasses*/ 129 && div_class_value !== (div_class_value = "row " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[7])) && { class: div_class_value },
				dirty & /*$$restProps*/ 1024 && restProps(/*$$restProps*/ ctx[10])
			]));

			toggle_class(div, "no-gap", /*noGap*/ ctx[1]);
			toggle_class(div, "resizable-fixed", /*resizableFixed*/ ctx[4]);
			toggle_class(div, "resizable-absolute", /*resizableAbsolute*/ ctx[5]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*div_binding*/ ctx[14](null);
			mounted = false;
			dispose();
		}
	};
}

// (80:4) {#if resizable && resizableHandler }
function create_if_block_3(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			this.h();
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			children(span).forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "resize-handler");
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (70:4) {#if resizable && resizableHandler }
function create_if_block_1(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			this.h();
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			children(span).forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "resize-handler");
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tag*/ ctx[2] == 'div') return 0;
		if (/*tag*/ ctx[2] == 'p') return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"importsSeek","classes","noGap","tag","resizable","resizableFixed","resizableAbsolute","resizableHandler"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { importsSeek = 'lower' } = $$props;
	getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const emit = createEmitter(createEventDispatcher, $$props);
	let computedClasses = undefined;
	let { classes = '' } = $$props;
	let { noGap = false } = $$props;
	let { tag = 'div' } = $$props;
	let { resizable = false } = $$props;
	let { resizableFixed = false } = $$props;
	let { resizableAbsolute = false } = $$props;
	let { resizableHandler = true } = $$props;
	let el;

	function onClick() {
		emit('click');
	}

	function onResize(targetEl) {
		if (el !== targetEl) return;
		emit('gridResize');
	}

	onMount(() => {
		f7ready(() => {
			app.f7.on('gridResize', onResize);
		});
	});

	onDestroy(() => {
		if (!app.f7) return;
		app.f7.off('gridResize', onResize);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(8, el);
		});
	}

	function p_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(8, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(22, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('importsSeek' in $$new_props) $$invalidate(11, importsSeek = $$new_props.importsSeek);
		if ('classes' in $$new_props) $$invalidate(0, classes = $$new_props.classes);
		if ('noGap' in $$new_props) $$invalidate(1, noGap = $$new_props.noGap);
		if ('tag' in $$new_props) $$invalidate(2, tag = $$new_props.tag);
		if ('resizable' in $$new_props) $$invalidate(3, resizable = $$new_props.resizable);
		if ('resizableFixed' in $$new_props) $$invalidate(4, resizableFixed = $$new_props.resizableFixed);
		if ('resizableAbsolute' in $$new_props) $$invalidate(5, resizableAbsolute = $$new_props.resizableAbsolute);
		if ('resizableHandler' in $$new_props) $$invalidate(6, resizableHandler = $$new_props.resizableHandler);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(7, computedClasses = classNames({ resizable }, colorClasses($$props)));
	};

	$$props = exclude_internal_props($$props);

	return [
		classes,
		noGap,
		tag,
		resizable,
		resizableFixed,
		resizableAbsolute,
		resizableHandler,
		computedClasses,
		el,
		onClick,
		$$restProps,
		importsSeek,
		$$scope,
		slots,
		div_binding,
		p_binding
	];
}

class Row extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			importsSeek: 11,
			classes: 0,
			noGap: 1,
			tag: 2,
			resizable: 3,
			resizableFixed: 4,
			resizableAbsolute: 5,
			resizableHandler: 6
		});
	}
}

export { Row };
