import { SvelteComponent, init, safe_not_equal, element, claim_element, children, detach, attr, add_render_callback, toggle_class, insert_hydration, listen, noop, destroy_each, run_all, getContext, onMount, assign, exclude_internal_props, src_url_equal, binding_callbacks, text, claim_text, append_hydration, set_data, create_slot, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, create_component, claim_component, mount_component, destroy_component, empty, svg_element, space, claim_svg_element, claim_space, set_style, check_outros, group_outros, HtmlTagHydration, claim_html_tag, bind, add_flush_callback } from './liquivelte-svelte-hse72de747.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs18c7db27.liquivelte.js';
import './framework7-liquivelte-get-params-hs062c4e9e.liquivelte.js';
import './framework7-liquivelte-utils-hs98d1f35e.liquivelte.js';
import './framework7-liquivelte-params-list-hsa4b1a348.liquivelte.js';

var debounce, throttle;

debounce = function(func, wait, immediate) {
  var timeout;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    if (immediate && !timeout) func.apply(context, args);
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

throttle = function(func, wait) {
  var context, args, timeout, throttling, more, result;
  var whenDone = debounce(function(){ more = throttling = false; }, wait);
  return function() {
    context = this; args = arguments;
    var later = function() {
      timeout = null;
      if (more) func.apply(context, args);
      whenDone();
    };
    if (!timeout) timeout = setTimeout(later, wait);
    if (throttling) {
      more = true;
    } else {
      result = func.apply(context, args);
    }
    whenDone();
    throttling = true;
    return result;
  };
};

Function.prototype.debounce = function(wait, immediate) {
  return debounce(this, wait, immediate);
};

Function.prototype.throttle = function(wait) {
  return throttle(this, wait);
};

class AnimationFrame {
  constructor(cb) {
    this.requestId;
    this.cb = cb || (() => 1);
  }

  loop() {
    this.requestId = undefined;
    this.cb();
    this.start();
  }

  start() {
    if (!this.requestId) {
      this.requestId = window.requestAnimationFrame(this.loop.bind(this));
    }
  }

  stop() {
    if (this.requestId) {
      window.cancelAnimationFrame(this.requestId);
      this.requestId = undefined;
    }
  }
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/video.liquivelte generated by Svelte v3.50.0 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	child_ctx[22] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[22] === 0,
		index: /*index*/ child_ctx[22] + 1,
		index0: /*index*/ child_ctx[22],
		last: /*index*/ child_ctx[22] === /*block*/ child_ctx[1].settings.video.sources.length - 1,
		rindex: /*block*/ child_ctx[1].settings.video.sources.length - /*index*/ child_ctx[22],
		rindex0: /*block*/ child_ctx[1].settings.video.sources.length - /*index*/ child_ctx[22] - 1,
		length: /*block*/ child_ctx[1].settings.video.sources.length
	};

	child_ctx[20] = constants_0;
	return child_ctx;
}

// (84:2) {#each  block.settings.video.sources as source, index   }
function create_each_block$1(ctx) {
	let source;
	let source_src_value;
	let source_type_value;

	return {
		c() {
			source = element("source");
			this.h();
		},
		l(nodes) {
			source = claim_element(nodes, "SOURCE", { src: true, type: true });
			this.h();
		},
		h() {
			if (!src_url_equal(source.src, source_src_value = /*source*/ ctx[19].url)) attr(source, "src", source_src_value);
			attr(source, "type", source_type_value = /*source*/ ctx[19].mime_type);
		},
		m(target, anchor) {
			insert_hydration(target, source, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 2 && !src_url_equal(source.src, source_src_value = /*source*/ ctx[19].url)) {
				attr(source, "src", source_src_value);
			}

			if (dirty & /*block*/ 2 && source_type_value !== (source_type_value = /*source*/ ctx[19].mime_type)) {
				attr(source, "type", source_type_value);
			}
		},
		d(detaching) {
			if (detaching) detach(source);
		}
	};
}

function create_fragment$4(ctx) {
	let video_1;
	let video_1_poster_value;
	let mounted;
	let dispose;
	let each_value = /*block*/ ctx[1].settings.video.sources;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			video_1 = element("video");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			video_1 = claim_element(nodes, "VIDEO", {
				style: true,
				class: true,
				poster: true,
				preload: true,
				loading: true
			});

			var video_1_nodes = children(video_1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(video_1_nodes);
			}

			video_1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(video_1, "style", /*anim_style*/ ctx[0]);
			attr(video_1, "class", "video svelte-jqn7s3");
			attr(video_1, "poster", video_1_poster_value = /*liquid*/ ctx[5].image_url(/*block*/ ctx[1].settings.video.preview_image, { "width": "400" }));
			attr(video_1, "preload", "metadata");
			attr(video_1, "loading", "lazy");
			video_1.playsInline = true;
			video_1.muted = true;
			if (/*duration*/ ctx[3] === void 0) add_render_callback(() => /*video_1_durationchange_handler*/ ctx[11].call(video_1));
			toggle_class(video_1, "bg-video", /*block*/ ctx[1].settings.is_bg);
		},
		m(target, anchor) {
			insert_hydration(target, video_1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(video_1, null);
			}

			/*video_1_binding*/ ctx[10](video_1);

			if (!mounted) {
				dispose = [
					listen(video_1, "durationchange", /*video_1_durationchange_handler*/ ctx[11]),
					listen(video_1, "seeked", /*seeked_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*block*/ 2) {
				each_value = /*block*/ ctx[1].settings.video.sources;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(video_1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*anim_style*/ 1) {
				attr(video_1, "style", /*anim_style*/ ctx[0]);
			}

			if (dirty & /*block*/ 2 && video_1_poster_value !== (video_1_poster_value = /*liquid*/ ctx[5].image_url(/*block*/ ctx[1].settings.video.preview_image, { "width": "400" }))) {
				attr(video_1, "poster", video_1_poster_value);
			}

			if (dirty & /*block*/ 2) {
				toggle_class(video_1, "bg-video", /*block*/ ctx[1].settings.is_bg);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video_1);
			destroy_each(each_blocks, detaching);
			/*video_1_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// $: if(video && !blob_src) {
//   const src = video.getAttribute('data-src');
//   fetch(src).then(res => res.blob()).then(blob => {
//     blob_src = URL.createObjectURL(blob);
//   });
// }
const progressDelta = 0.3;

function instance$4($$self, $$props, $$invalidate) {
	let { importsSeek = 'lower' } = $$props;
	getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const liquid = cachedLiquid(lec);
	let { keptFor } = $$props;
	let { keepFor } = $$props;
	let { scrollY } = $$props;
	let { anim_style } = $$props;
	let { block = {} } = $$props;
	console.log('block ', block);
	let video, duration;
	let seeked = true;
	let lastProgress = 0;

	onMount(() => {
		function lerp(x, y, t) {
			return (1 - t) * x + t * y;
		}

		const animation = new AnimationFrame(() => {
				if (!seeked || !duration) return;
				$$invalidate(4, seeked = false);

				// progressPercent = ((scrollY + window.innerHeight) - container.offsetTop) / (container.clientHeight + window.innerHeight) * 100,
				// progressPercent = progressPercent > 0 ? progressPercent : 0;
				let scrollProgress = keptFor / keepFor;

				// const scrollProgress = progressPercent;
				// Round to 2 decimal places
				const progress = Math.round(// Smoothly approach scroll progress instead of instantly
				lerp(lastProgress, scrollProgress, progressDelta) * 100) / 100;

				$$invalidate(2, video.currentTime = duration * progress, video);
				lastProgress = progress;
			});

		animation.start();

		return () => {
			animation.stop();
		};
	});

	function video_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			video = $$value;
			$$invalidate(2, video);
		});
	}

	function video_1_durationchange_handler() {
		duration = this.duration;
		$$invalidate(3, duration);
	}

	const seeked_handler = () => $$invalidate(4, seeked = true);

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(6, importsSeek = $$new_props.importsSeek);
		if ('keptFor' in $$new_props) $$invalidate(7, keptFor = $$new_props.keptFor);
		if ('keepFor' in $$new_props) $$invalidate(8, keepFor = $$new_props.keepFor);
		if ('scrollY' in $$new_props) $$invalidate(9, scrollY = $$new_props.scrollY);
		if ('anim_style' in $$new_props) $$invalidate(0, anim_style = $$new_props.anim_style);
		if ('block' in $$new_props) $$invalidate(1, block = $$new_props.block);
	};

	$$props = exclude_internal_props($$props);

	return [
		anim_style,
		block,
		video,
		duration,
		seeked,
		liquid,
		importsSeek,
		keptFor,
		keepFor,
		scrollY,
		video_1_binding,
		video_1_durationchange_handler,
		seeked_handler
	];
}

class Video extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			importsSeek: 6,
			keptFor: 7,
			keepFor: 8,
			scrollY: 9,
			anim_style: 0,
			block: 1
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/title.liquivelte generated by Svelte v3.50.0 */

function create_fragment$3(ctx) {
	let div;
	let t_value = /*block*/ ctx[5].settings.content + "";
	let t;
	let div_style_value;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", " svelte-e2nbez");
			attr(div, "style", div_style_value = "top:" + /*title_top*/ ctx[1] + "%; left:" + /*left*/ ctx[0] + "%; font-size: " + /*font_size*/ ctx[2] + "em; " + /*anim_style*/ ctx[4] + "; font-weight: " + /*bold*/ ctx[3]);
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*block*/ 32 && t_value !== (t_value = /*block*/ ctx[5].settings.content + "")) set_data(t, t_value);

			if (dirty & /*title_top, left, font_size, anim_style, bold*/ 31 && div_style_value !== (div_style_value = "top:" + /*title_top*/ ctx[1] + "%; left:" + /*left*/ ctx[0] + "%; font-size: " + /*font_size*/ ctx[2] + "em; " + /*anim_style*/ ctx[4] + "; font-weight: " + /*bold*/ ctx[3])) {
				attr(div, "style", div_style_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function fc$1(e, t, r) {
	const n = e.find(e => e === t);

	return n || e.reduce((e, n) => {
		let o = Math.abs(e - t), i = Math.abs(n - t);

		return "higher" === r
		? n > t && i <= o ? n : e
		: "lower" === r ? n < t && i <= o ? n : e : void 0;
	});
}

function instance$3($$self, $$props, $$invalidate) {
	let { importsSeek = 'lower' } = $$props;
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const cic = window.cicR;
	let block = {};
	let { blockƒƒsettings } = $$props;

	try {
		block = block || {};
	} catch(e) {
		
	} /*whatever*/

	block.settings = themeImports['blockƒƒsettings'].find(e => e.component_index == fc$1(themeImports['blockƒƒsettings'].map(e => e.component_index), cic, importsSeek)).value;
	let { left = themeImports['left'].find(e => e.component_index == fc$1(themeImports['left'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { title_top = themeImports['title_top'].find(e => e.component_index == fc$1(themeImports['title_top'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { font_size = themeImports['font_size'].find(e => e.component_index == fc$1(themeImports['font_size'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { color = themeImports['color'].find(e => e.component_index == fc$1(themeImports['color'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { bold = themeImports['bold'].find(e => e.component_index == fc$1(themeImports['bold'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { anim_style } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(6, importsSeek = $$new_props.importsSeek);
		if ('blockƒƒsettings' in $$new_props) $$invalidate(7, blockƒƒsettings = $$new_props.blockƒƒsettings);
		if ('left' in $$new_props) $$invalidate(0, left = $$new_props.left);
		if ('title_top' in $$new_props) $$invalidate(1, title_top = $$new_props.title_top);
		if ('font_size' in $$new_props) $$invalidate(2, font_size = $$new_props.font_size);
		if ('color' in $$new_props) $$invalidate(8, color = $$new_props.color);
		if ('bold' in $$new_props) $$invalidate(3, bold = $$new_props.bold);
		if ('anim_style' in $$new_props) $$invalidate(4, anim_style = $$new_props.anim_style);
	};

	$$props = exclude_internal_props($$props);

	return [
		left,
		title_top,
		font_size,
		bold,
		anim_style,
		block,
		importsSeek,
		blockƒƒsettings,
		color
	];
}

class Title extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			importsSeek: 6,
			blockƒƒsettings: 7,
			left: 0,
			title_top: 1,
			font_size: 2,
			color: 8,
			bold: 3,
			anim_style: 4
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/positionable.liquivelte generated by Svelte v3.50.0 */

function create_fragment$2(ctx) {
	let div;
	let div_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", " svelte-1866dou");
			attr(div, "style", div_style_value = "top: " + /*block*/ ctx[0].settings.top + "%; left: " + /*block*/ ctx[0].settings.left + "%; " + /*anim_style*/ ctx[1] + ";");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*block, anim_style*/ 3 && div_style_value !== (div_style_value = "top: " + /*block*/ ctx[0].settings.top + "%; left: " + /*block*/ ctx[0].settings.left + "%; " + /*anim_style*/ ctx[1] + ";")) {
				attr(div, "style", div_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { importsSeek = 'lower' } = $$props;
	getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	let { block } = $$props;
	let { anim_style } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(2, importsSeek = $$new_props.importsSeek);
		if ('block' in $$new_props) $$invalidate(0, block = $$new_props.block);
		if ('anim_style' in $$new_props) $$invalidate(1, anim_style = $$new_props.anim_style);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);
	return [block, anim_style, importsSeek, $$scope, slots];
}

class Positionable extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { importsSeek: 2, block: 0, anim_style: 1 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/shape.liquivelte generated by Svelte v3.50.0 */

function create_if_block_2$1(ctx) {
	let div;
	let svg;
	let path;
	let t0;
	let p;
	let t1_value = /*liquid*/ ctx[2].default(/*block*/ ctx[0].settings.content, '') + "";
	let t1;

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			svg = claim_svg_element(div_nodes, "svg", {
				version: true,
				xmlns: true,
				"xmlns:xlink": true,
				x: true,
				y: true,
				viewBox: true,
				style: true,
				"xml:space": true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M55.818,21.578c-0.118-0.362-0.431-0.626-0.808-0.681L36.92,18.268L28.83,1.876c-0.168-0.342-0.516-0.558-0.896-0.558\n      s-0.729,0.216-0.896,0.558l-8.091,16.393l-18.09,2.629c-0.377,0.055-0.689,0.318-0.808,0.681c-0.117,0.361-0.02,0.759,0.253,1.024\n      l13.091,12.76l-3.091,18.018c-0.064,0.375,0.09,0.754,0.397,0.978c0.309,0.226,0.718,0.255,1.053,0.076l16.182-8.506l16.18,8.506\n      c0.146,0.077,0.307,0.115,0.466,0.115c0.207,0,0.413-0.064,0.588-0.191c0.308-0.224,0.462-0.603,0.397-0.978l-3.09-18.017\n      l13.091-12.761C55.838,22.336,55.936,21.939,55.818,21.578z");
			attr(svg, "version", "1.1");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr(svg, "x", "0px");
			attr(svg, "y", "0px");
			attr(svg, "viewBox", "0 0 55.867 55.867");
			set_style(svg, "enable-background", "new 0 0 55.867 55.867");
			set_style(svg, "fill", "currentColor");
			attr(svg, "xml:space", "preserve");
			attr(p, "class", "text-base");
			attr(div, "class", "relative");
			set_style(div, "width", "100px");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, svg);
			append_hydration(svg, path);
			append_hydration(div, t0);
			append_hydration(div, p);
			append_hydration(p, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 1 && t1_value !== (t1_value = /*liquid*/ ctx[2].default(/*block*/ ctx[0].settings.content, '') + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (27:47) 
function create_if_block_1$1(ctx) {
	let div;
	let t_value = /*block*/ ctx[0].settings.content + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "circle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 1 && t_value !== (t_value = /*block*/ ctx[0].settings.content + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (23:2) {#if block.settings.shape == 'square' }
function create_if_block$1(ctx) {
	let div;
	let t_value = /*block*/ ctx[0].settings.content + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "square text-red-50");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 1 && t_value !== (t_value = /*block*/ ctx[0].settings.content + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (22:0) <Positionable  block="{ block }" anim_style="{ anim_style }"  >
function create_default_slot(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*block*/ ctx[0].settings.shape == 'square') return create_if_block$1;
		if (/*block*/ ctx[0].settings.shape == 'circle') return create_if_block_1$1;
		if (/*block*/ ctx[0].settings.shape == 'star') return create_if_block_2$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1(ctx) {
	let positionable;
	let current;

	positionable = new Positionable({
			props: {
				block: /*block*/ ctx[0],
				anim_style: /*anim_style*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(positionable.$$.fragment);
		},
		l(nodes) {
			claim_component(positionable.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(positionable, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const positionable_changes = {};
			if (dirty & /*block*/ 1) positionable_changes.block = /*block*/ ctx[0];
			if (dirty & /*anim_style*/ 2) positionable_changes.anim_style = /*anim_style*/ ctx[1];

			if (dirty & /*$$scope, block*/ 257) {
				positionable_changes.$$scope = { dirty, ctx };
			}

			positionable.$set(positionable_changes);
		},
		i(local) {
			if (current) return;
			transition_in(positionable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(positionable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(positionable, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { importsSeek = 'lower' } = $$props;
	getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const liquid = cachedLiquid(lec);
	let { block = {} } = $$props;
	let { anim_style } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(3, importsSeek = $$new_props.importsSeek);
		if ('block' in $$new_props) $$invalidate(0, block = $$new_props.block);
		if ('anim_style' in $$new_props) $$invalidate(1, anim_style = $$new_props.anim_style);
	};

	$$props = exclude_internal_props($$props);
	return [block, anim_style, liquid, importsSeek];
}

class Shape extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { importsSeek: 3, block: 0, anim_style: 1 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/index.liquivelte generated by Svelte v3.50.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[37] = list[i];
	child_ctx[40] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[40] === 0,
		index: /*index*/ child_ctx[40] + 1,
		index0: /*index*/ child_ctx[40],
		last: /*index*/ child_ctx[40] === /*section*/ child_ctx[3].blocks.length - 1,
		rindex: /*section*/ child_ctx[3].blocks.length - /*index*/ child_ctx[40],
		rindex0: /*section*/ child_ctx[3].blocks.length - /*index*/ child_ctx[40] - 1,
		length: /*section*/ child_ctx[3].blocks.length
	};

	child_ctx[38] = constants_0;
	return child_ctx;
}

// (145:8) {#if block.type == 'title' }
function create_if_block_4(ctx) {
	let title;
	let current;

	title = new Title({
			props: {
				anim_style: /*block*/ ctx[37].settings.anim_style
			}
		});

	return {
		c() {
			create_component(title.$$.fragment);
		},
		l(nodes) {
			claim_component(title.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(title, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const title_changes = {};
			if (dirty[0] & /*section*/ 8) title_changes.anim_style = /*block*/ ctx[37].settings.anim_style;
			title.$set(title_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(title, detaching);
		}
	};
}

// (149:8) {#if block.type == 'image' }
function create_if_block_3(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { loading: true, src: true, class: true });
			this.h();
		},
		h() {
			attr(img, "loading", "lazy");
			if (!src_url_equal(img.src, img_src_value = /*block*/ ctx[37].settings.image)) attr(img, "src", img_src_value);
			attr(img, "class", "svelte-strz53");
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*section*/ 8 && !src_url_equal(img.src, img_src_value = /*block*/ ctx[37].settings.image)) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (153:8) {#if block.type == 'text' }
function create_if_block_2(ctx) {
	let html_tag;
	let raw_value = (/*block*/ ctx[37].settings.content || '') + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTagHydration(false);
			html_anchor = empty();
			this.h();
		},
		l(nodes) {
			html_tag = claim_html_tag(nodes, false);
			html_anchor = empty();
			this.h();
		},
		h() {
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_hydration(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*section*/ 8 && raw_value !== (raw_value = (/*block*/ ctx[37].settings.content || '') + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (157:8) {#if block.type == 'video' }
function create_if_block_1(ctx) {
	let scrollvideo;
	let updating_keptFor;
	let current;

	function scrollvideo_keptFor_binding(value) {
		/*scrollvideo_keptFor_binding*/ ctx[19](value);
	}

	let scrollvideo_props = {
		block: /*block*/ ctx[37],
		keepFor: /*keepFor*/ ctx[8],
		anim_style: /*block*/ ctx[37].settings.anim_style
	};

	if (/*keptFor*/ ctx[2] !== void 0) {
		scrollvideo_props.keptFor = /*keptFor*/ ctx[2];
	}

	scrollvideo = new Video({ props: scrollvideo_props });
	binding_callbacks.push(() => bind(scrollvideo, 'keptFor', scrollvideo_keptFor_binding));

	return {
		c() {
			create_component(scrollvideo.$$.fragment);
		},
		l(nodes) {
			claim_component(scrollvideo.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(scrollvideo, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const scrollvideo_changes = {};
			if (dirty[0] & /*section*/ 8) scrollvideo_changes.block = /*block*/ ctx[37];
			if (dirty[0] & /*section*/ 8) scrollvideo_changes.anim_style = /*block*/ ctx[37].settings.anim_style;

			if (!updating_keptFor && dirty[0] & /*keptFor*/ 4) {
				updating_keptFor = true;
				scrollvideo_changes.keptFor = /*keptFor*/ ctx[2];
				add_flush_callback(() => updating_keptFor = false);
			}

			scrollvideo.$set(scrollvideo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(scrollvideo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(scrollvideo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(scrollvideo, detaching);
		}
	};
}

// (161:8) {#if block.type == 'shape' }
function create_if_block(ctx) {
	let shape;
	let current;

	shape = new Shape({
			props: {
				block: /*block*/ ctx[37],
				anim_style: /*block*/ ctx[37].settings.anim_style
			}
		});

	return {
		c() {
			create_component(shape.$$.fragment);
		},
		l(nodes) {
			claim_component(shape.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(shape, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const shape_changes = {};
			if (dirty[0] & /*section*/ 8) shape_changes.block = /*block*/ ctx[37];
			if (dirty[0] & /*section*/ 8) shape_changes.anim_style = /*block*/ ctx[37].settings.anim_style;
			shape.$set(shape_changes);
		},
		i(local) {
			if (current) return;
			transition_in(shape.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(shape.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(shape, detaching);
		}
	};
}

// (134:6) {#each  section.blocks as block, index   }
function create_each_block(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let if_block4_anchor;
	let current;
	let if_block0 = /*block*/ ctx[37].type == 'title' && create_if_block_4(ctx);
	let if_block1 = /*block*/ ctx[37].type == 'image' && create_if_block_3(ctx);
	let if_block2 = /*block*/ ctx[37].type == 'text' && create_if_block_2(ctx);
	let if_block3 = /*block*/ ctx[37].type == 'video' && create_if_block_1(ctx);
	let if_block4 = /*block*/ ctx[37].type == 'shape' && create_if_block(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			if_block4_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, if_block4_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*block*/ ctx[37].type == 'title') {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*section*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*block*/ ctx[37].type == 'image') {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*block*/ ctx[37].type == 'text') {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*block*/ ctx[37].type == 'video') {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*section*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*block*/ ctx[37].type == 'shape') {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*section*/ 8) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(if_block4_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div1;
	let div0;
	let t0;
	let div2;
	let t1;
	let div3_style_value;
	let current;
	let each_value = /*section*/ ctx[3].blocks;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div2 = element("div");
			t1 = text(" ");
			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			t1 = claim_text(div2_nodes, " ");
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "animation-stage svelte-strz53");
			attr(div1, "class", "stage-container svelte-strz53");
			attr(div2, "class", "stage-placeholder");
			set_style(div2, "height", /*stageHeight*/ ctx[4] + /*keepFor*/ ctx[8] + "px");
			attr(div3, "class", "animation-container svelte-strz53");
			attr(div3, "style", div3_style_value = "--explode-gap: 1em; --explode-size-imbalance: 0%; --image-oversize: 1; " + /*animationVariables*/ ctx[5].join(';') + "; " + /*widthVariables*/ ctx[7].join(';') + "; " + /*heightVariables*/ ctx[6].join(';'));
		},
		m(target, anchor) {
			insert_hydration(target, div3, anchor);
			append_hydration(div3, div1);
			append_hydration(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			/*div0_binding*/ ctx[20](div0);
			append_hydration(div3, t0);
			append_hydration(div3, div2);
			append_hydration(div2, t1);
			/*div3_binding*/ ctx[21](div3);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*section, keepFor, keptFor*/ 268) {
				each_value = /*section*/ ctx[3].blocks;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty[0] & /*stageHeight*/ 16) {
				set_style(div2, "height", /*stageHeight*/ ctx[4] + /*keepFor*/ ctx[8] + "px");
			}

			if (!current || dirty[0] & /*animationVariables, widthVariables, heightVariables*/ 224 && div3_style_value !== (div3_style_value = "--explode-gap: 1em; --explode-size-imbalance: 0%; --image-oversize: 1; " + /*animationVariables*/ ctx[5].join(';') + "; " + /*widthVariables*/ ctx[7].join(';') + "; " + /*heightVariables*/ ctx[6].join(';'))) {
				attr(div3, "style", div3_style_value);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
			/*div0_binding*/ ctx[20](null);
			/*div3_binding*/ ctx[21](null);
		}
	};
}

function fc(e, t, r) {
	const n = e.find(e => e === t);

	return n || e.reduce((e, n) => {
		let o = Math.abs(e - t), i = Math.abs(n - t);

		return "higher" === r
		? n > t && i <= o ? n : e
		: "lower" === r ? n < t && i <= o ? n : e : void 0;
	});
}

function instance($$self, $$props, $$invalidate) {
	let widthVariables;
	let heightVariables;
	let { importsSeek = 'lower' } = $$props;
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const cic = window.cicR;
	const section = {};
	let { sectionƒƒsettings } = $$props;

	try {
		section = section || {};
	} catch(e) {
		
	} /*whatever*/

	section.settings = themeImports['sectionƒƒsettings'].find(e => e.component_index == fc(themeImports['sectionƒƒsettings'].map(e => e.component_index), cic, importsSeek)).value;
	let { sectionƒƒblocks } = $$props;

	try {
		section = section || {};
	} catch(e) {
		
	} /*whatever*/

	section.blocks = themeImports['sectionƒƒblocks'].find(e => e.component_index == fc(themeImports['sectionƒƒblocks'].map(e => e.component_index), cic, importsSeek)).value;
	let { animations = themeImports['animations'].find(e => e.component_index == fc(themeImports['animations'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	console.log('section blocks 1', animations, section.blocks);

	section.blocks = section.blocks.map(block => ({
		...block,
		settings: {
			...block.settings,
			anim_style: animations.filter(anim => anim.target == block.settings.id).reduce((c, anim) => `${c}${anim.anim_style}`, '')
		}
	}));

	console.log('section blocks 2', animations, section.blocks);
	let container, stage;
	let scrollY = 0;
	let keepFor = section.settings.animation_duration / 200 * window.innerHeight;
	console.log('section settings ', section.settings, keepFor);
	let height = 0;
	let isTopped = 0;
	let cachedHeight = 0;
	let keptFor = 0;
	let progressPercent = 0;
	let stageHeight = 0;
	let progress = 0;
	const itemWidths = [];
	const itemHeights = [];

	onMount(() => {
		document.querySelector('.mainview .page-content').addEventListener('scroll', e => {
			$$invalidate(13, scrollY = e.target.scrollTop);
		});
	});

	let animationVariables = [];

	function scrollvideo_keptFor_binding(value) {
		keptFor = value;
		((((((($$invalidate(2, keptFor), $$invalidate(0, container)), $$invalidate(1, stage)), $$invalidate(13, scrollY)), $$invalidate(15, isTopped)), $$invalidate(8, keepFor)), $$invalidate(16, cachedHeight)), $$invalidate(17, progressPercent));
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			stage = $$value;
			$$invalidate(1, stage);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(0, container);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(36, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(9, importsSeek = $$new_props.importsSeek);
		if ('sectionƒƒsettings' in $$new_props) $$invalidate(10, sectionƒƒsettings = $$new_props.sectionƒƒsettings);
		if ('sectionƒƒblocks' in $$new_props) $$invalidate(11, sectionƒƒblocks = $$new_props.sectionƒƒblocks);
		if ('animations' in $$new_props) $$invalidate(12, animations = $$new_props.animations);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*container, stage, scrollY, isTopped, keptFor, cachedHeight, progressPercent*/ 237575) {
			// [
			//   {
			//     from: 52,
			//     to: 77,
			//     valueFrom: 1,
			//     valueTo: 10,
			//     variable: '--explode-gap',
			//     unit: 'em'
			//   },
			//   {
			//     from: 33,
			//     to: 66,
			//     valueFrom: 0,
			//     valueTo: 20,
			//     variable: '--explode-size-imbalance',
			//     unit: '%'
			//   },
			//   {
			//     from: 66,
			//     to: 100,
			//     valueFrom: 1,
			//     valueTo: 2,
			//     variable: '--image-oversize'
			//   }
			// ];
			if (container && stage) {
				(container.offsetTop, $$invalidate(14, height = container.clientHeight), container.offsetTop < scrollY + window.innerHeight, container.offsetTop - (scrollY + window.innerHeight), $$invalidate(15, isTopped = container.offsetTop - scrollY < 0), $$invalidate(16, cachedHeight = isTopped ? cachedHeight : container.clientHeight), $$invalidate(2, keptFor = Math.abs(container.offsetTop - scrollY)), container.offsetTop - scrollY < 0 && keepFor > keptFor
				? keptFor
				: isTopped ? keepFor : 0, $$invalidate(17, progressPercent = (scrollY + window.innerHeight - container.offsetTop) / (container.clientHeight + window.innerHeight) * 100), $$invalidate(17, progressPercent = progressPercent > 0 ? progressPercent : 0));

				$$invalidate(18, progress = progressPercent);
				$$invalidate(4, stageHeight = stage.clientHeight);
			}
		}

		if ($$self.$$.dirty[0] & /*container, scrollY*/ 8193) {
			// $: if(scrollY && container && seeked) {
			//   seeked = false;
			//   top = container.offsetTop; 
			//   height = container.clientHeight;
			//   // time = duration * keptFor / keepFor;
			// }
			if (container) {
				$$invalidate(2, keptFor = container.offsetTop < scrollY
				? -1 * (container.offsetTop - scrollY)
				: 0);
			} // console.log('keptFor index ', keptFor);
		}

		if ($$self.$$.dirty[0] & /*animations, progress*/ 266240) {
			$$invalidate(5, animationVariables = animations.map(animation => {
				let animationProgress = (progress - animation.from) / (animation.to - animation.from);
				let value = animation.valueFrom + (animation.valueTo - animation.valueFrom) * animationProgress;

				value = value < animation.valueFrom
				? animation.valueFrom
				: value > animation.valueTo
					? animation.valueTo
					: Math.round(value * 1e6) / 1e6;

				return `${animation.variable}:${value}${animation.unit || ''}`;
			}));
		}
	};

	$$invalidate(7, widthVariables = itemWidths.map((width, index) => `--item-${index}-width: ${width}px`));
	$$invalidate(6, heightVariables = itemHeights.map((height, index) => `--item-${index}-height: ${height}px`));
	$$props = exclude_internal_props($$props);

	return [
		container,
		stage,
		keptFor,
		section,
		stageHeight,
		animationVariables,
		heightVariables,
		widthVariables,
		keepFor,
		importsSeek,
		sectionƒƒsettings,
		sectionƒƒblocks,
		animations,
		scrollY,
		height,
		isTopped,
		cachedHeight,
		progressPercent,
		progress,
		scrollvideo_keptFor_binding,
		div0_binding,
		div3_binding
	];
}

class Scroll_animation extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				importsSeek: 9,
				sectionƒƒsettings: 10,
				sectionƒƒblocks: 11,
				animations: 12
			},
			null,
			[-1, -1]
		);
	}
}

export { Scroll_animation as default };
