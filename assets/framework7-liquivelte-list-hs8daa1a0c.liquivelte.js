import { SvelteComponent, init, safe_not_equal, empty, insert_hydration, group_outros, transition_out, check_outros, transition_in, detach, compute_rest_props, compute_slots, getContext, createEventDispatcher, onMount, onDestroy, assign, exclude_internal_props, binding_callbacks, create_slot, element, space, claim_element, children, claim_space, set_attributes, append_hydration, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, listen } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import { createEmitter, setReactiveContext, useTab, f7ready, app, extend, classNames, colorClasses, restProps } from './framework7-liquivelte-hsa0091f48.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/list.liquivelte generated by Svelte v3.50.0 */
const get_after_list_slot_changes_1 = dirty => ({});
const get_after_list_slot_context_1 = ctx => ({});
const get_list_slot_changes_1 = dirty => ({});
const get_list_slot_context_1 = ctx => ({});
const get_before_list_slot_changes_1 = dirty => ({});
const get_before_list_slot_context_1 = ctx => ({});
const get_after_list_slot_changes = dirty => ({});
const get_after_list_slot_context = ctx => ({});
const get_list_slot_changes = dirty => ({});
const get_list_slot_context = ctx => ({});
const get_before_list_slot_changes = dirty => ({});
const get_before_list_slot_context = ctx => ({});

// (224:0) {:else}
function create_else_block_1(ctx) {
	let div;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let div_class_value;
	let div_data_sortable_move_elements_value;
	let current;
	const before_list_slot_template = /*#slots*/ ctx[44]["before-list"];
	const before_list_slot = create_slot(before_list_slot_template, ctx, /*$$scope*/ ctx[43], get_before_list_slot_context_1);
	const if_block_creators = [create_if_block_2, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*hasUlSlots*/ ctx[6] && /*ul*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_list_slot_template = /*#slots*/ ctx[44]["after-list"];
	const after_list_slot = create_slot(after_list_slot_template, ctx, /*$$scope*/ ctx[43], get_after_list_slot_context_1);

	let div_levels = [
		{
			class: div_class_value = "list " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[4]
		},
		{
			"data-sortable-move-elements": div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[2] !== 'undefined'
			? /*sortableMoveElements*/ ctx[2].toString()
			: undefined
		},
		restProps(/*$$restProps*/ ctx[8])
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (before_list_slot) before_list_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_list_slot) after_list_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {
				class: true,
				"data-sortable-move-elements": true
			});

			var div_nodes = children(div);
			if (before_list_slot) before_list_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if_block.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (after_list_slot) after_list_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (before_list_slot) {
				before_list_slot.m(div, null);
			}

			append_hydration(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			append_hydration(div, t1);

			if (after_list_slot) {
				after_list_slot.m(div, null);
			}

			/*div_binding*/ ctx[46](div);
			current = true;
		},
		p(ctx, dirty) {
			if (before_list_slot) {
				if (before_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						before_list_slot,
						before_list_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(before_list_slot_template, /*$$scope*/ ctx[43], dirty, get_before_list_slot_changes_1),
						get_before_list_slot_context_1
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, t1);
			}

			if (after_list_slot) {
				if (after_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						after_list_slot,
						after_list_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(after_list_slot_template, /*$$scope*/ ctx[43], dirty, get_after_list_slot_changes_1),
						get_after_list_slot_context_1
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty[0] & /*classes, computedClasses*/ 17 && div_class_value !== (div_class_value = "list " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[4])) && { class: div_class_value },
				(!current || dirty[0] & /*sortableMoveElements*/ 4 && div_data_sortable_move_elements_value !== (div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[2] !== 'undefined'
				? /*sortableMoveElements*/ ctx[2].toString()
				: undefined)) && {
					"data-sortable-move-elements": div_data_sortable_move_elements_value
				},
				dirty[0] & /*$$restProps*/ 256 && restProps(/*$$restProps*/ ctx[8])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_list_slot, local);
			transition_in(if_block);
			transition_in(after_list_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_list_slot, local);
			transition_out(if_block);
			transition_out(after_list_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (before_list_slot) before_list_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (after_list_slot) after_list_slot.d(detaching);
			/*div_binding*/ ctx[46](null);
		}
	};
}

// (203:0) {#if form }
function create_if_block(ctx) {
	let form_1;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let form_1_class_value;
	let form_1_data_sortable_move_elements_value;
	let current;
	let mounted;
	let dispose;
	const before_list_slot_template = /*#slots*/ ctx[44]["before-list"];
	const before_list_slot = create_slot(before_list_slot_template, ctx, /*$$scope*/ ctx[43], get_before_list_slot_context);
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*hasUlSlots*/ ctx[6] && /*ul*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const after_list_slot_template = /*#slots*/ ctx[44]["after-list"];
	const after_list_slot = create_slot(after_list_slot_template, ctx, /*$$scope*/ ctx[43], get_after_list_slot_context);

	let form_1_levels = [
		{
			class: form_1_class_value = "list " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[4]
		},
		{
			"data-sortable-move-elements": form_1_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[2] !== 'undefined'
			? /*sortableMoveElements*/ ctx[2].toString()
			: undefined
		},
		restProps(/*$$restProps*/ ctx[8])
	];

	let form_1_data = {};

	for (let i = 0; i < form_1_levels.length; i += 1) {
		form_1_data = assign(form_1_data, form_1_levels[i]);
	}

	return {
		c() {
			form_1 = element("form");
			if (before_list_slot) before_list_slot.c();
			t0 = space();
			if_block.c();
			t1 = space();
			if (after_list_slot) after_list_slot.c();
			this.h();
		},
		l(nodes) {
			form_1 = claim_element(nodes, "FORM", {
				class: true,
				"data-sortable-move-elements": true
			});

			var form_1_nodes = children(form_1);
			if (before_list_slot) before_list_slot.l(form_1_nodes);
			t0 = claim_space(form_1_nodes);
			if_block.l(form_1_nodes);
			t1 = claim_space(form_1_nodes);
			if (after_list_slot) after_list_slot.l(form_1_nodes);
			form_1_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(form_1, form_1_data);
		},
		m(target, anchor) {
			insert_hydration(target, form_1, anchor);

			if (before_list_slot) {
				before_list_slot.m(form_1, null);
			}

			append_hydration(form_1, t0);
			if_blocks[current_block_type_index].m(form_1, null);
			append_hydration(form_1, t1);

			if (after_list_slot) {
				after_list_slot.m(form_1, null);
			}

			/*form_1_binding*/ ctx[45](form_1);
			current = true;

			if (!mounted) {
				dispose = listen(form_1, "submit", /*onSubmit*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (before_list_slot) {
				if (before_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						before_list_slot,
						before_list_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(before_list_slot_template, /*$$scope*/ ctx[43], dirty, get_before_list_slot_changes),
						get_before_list_slot_context
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(form_1, t1);
			}

			if (after_list_slot) {
				if (after_list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						after_list_slot,
						after_list_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(after_list_slot_template, /*$$scope*/ ctx[43], dirty, get_after_list_slot_changes),
						get_after_list_slot_context
					);
				}
			}

			set_attributes(form_1, form_1_data = get_spread_update(form_1_levels, [
				(!current || dirty[0] & /*classes, computedClasses*/ 17 && form_1_class_value !== (form_1_class_value = "list " + /*classes*/ ctx[0] + " " + /*computedClasses*/ ctx[4])) && { class: form_1_class_value },
				(!current || dirty[0] & /*sortableMoveElements*/ 4 && form_1_data_sortable_move_elements_value !== (form_1_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[2] !== 'undefined'
				? /*sortableMoveElements*/ ctx[2].toString()
				: undefined)) && {
					"data-sortable-move-elements": form_1_data_sortable_move_elements_value
				},
				dirty[0] & /*$$restProps*/ 256 && restProps(/*$$restProps*/ ctx[8])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(before_list_slot, local);
			transition_in(if_block);
			transition_in(after_list_slot, local);
			current = true;
		},
		o(local) {
			transition_out(before_list_slot, local);
			transition_out(if_block);
			transition_out(after_list_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form_1);
			if (before_list_slot) before_list_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (after_list_slot) after_list_slot.d(detaching);
			/*form_1_binding*/ ctx[45](null);
			mounted = false;
			dispose();
		}
	};
}

// (239:4) {:else}
function create_else_block_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[43], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (234:4) {#if hasUlSlots && ul }
function create_if_block_2(ctx) {
	let ul_1;
	let t;
	let current;
	const list_slot_template = /*#slots*/ ctx[44].list;
	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[43], get_list_slot_context_1);
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			ul_1 = element("ul");
			if (list_slot) list_slot.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			ul_1 = claim_element(nodes, "UL", {});
			var ul_1_nodes = children(ul_1);
			if (list_slot) list_slot.l(ul_1_nodes);
			t = claim_space(ul_1_nodes);
			if (default_slot) default_slot.l(ul_1_nodes);
			ul_1_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, ul_1, anchor);

			if (list_slot) {
				list_slot.m(ul_1, null);
			}

			append_hydration(ul_1, t);

			if (default_slot) {
				default_slot.m(ul_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (list_slot) {
				if (list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						list_slot,
						list_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(list_slot_template, /*$$scope*/ ctx[43], dirty, get_list_slot_changes_1),
						get_list_slot_context_1
					);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[43], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(list_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(list_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul_1);
			if (list_slot) list_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (219:4) {:else}
function create_else_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[43], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (214:4) {#if hasUlSlots && ul }
function create_if_block_1(ctx) {
	let ul_1;
	let t;
	let current;
	const list_slot_template = /*#slots*/ ctx[44].list;
	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[43], get_list_slot_context);
	const default_slot_template = /*#slots*/ ctx[44].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	return {
		c() {
			ul_1 = element("ul");
			if (list_slot) list_slot.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			ul_1 = claim_element(nodes, "UL", {});
			var ul_1_nodes = children(ul_1);
			if (list_slot) list_slot.l(ul_1_nodes);
			t = claim_space(ul_1_nodes);
			if (default_slot) default_slot.l(ul_1_nodes);
			ul_1_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, ul_1, anchor);

			if (list_slot) {
				list_slot.m(ul_1, null);
			}

			append_hydration(ul_1, t);

			if (default_slot) {
				default_slot.m(ul_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (list_slot) {
				if (list_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						list_slot,
						list_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(list_slot_template, /*$$scope*/ ctx[43], dirty, get_list_slot_changes),
						get_list_slot_context
					);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[43],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[43])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[43], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(list_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(list_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul_1);
			if (list_slot) list_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*form*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hasUlSlots;

	const omit_props_names = [
		"classes","ul","inset","xsmallInset","smallInset","mediumInset","largeInset","xlargeInset","mediaList","sortable","sortableTapHold","sortableEnabled","sortableMoveElements","sortableOpposite","accordionList","accordionOpposite","contactsList","simpleList","linksList","menuList","noHairlines","noHairlinesBetween","noHairlinesMd","noHairlinesBetweenMd","noHairlinesIos","noHairlinesBetweenIos","noHairlinesAurora","noHairlinesBetweenAurora","noChevron","chevronCenter","tab","tabActive","form","formStoreData","inlineLabels","virtualList","virtualListParams","virtualListInstance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	getContext('svelteProps') || {};
	getContext('lec') || {};
	const emit = createEmitter(createEventDispatcher, $$props);
	let computedClasses = undefined;
	let { classes = '' } = $$props;
	let { ul = true } = $$props;
	let { inset = false } = $$props;
	let { xsmallInset = false } = $$props;
	let { smallInset = false } = $$props;
	let { mediumInset = false } = $$props;
	let { largeInset = false } = $$props;
	let { xlargeInset = false } = $$props;
	let { mediaList = false } = $$props;
	let { sortable = false } = $$props;
	let { sortableTapHold = false } = $$props;
	let { sortableEnabled = false } = $$props;
	let { sortableMoveElements = undefined } = $$props;
	let { sortableOpposite = false } = $$props;
	let { accordionList = false } = $$props;
	let { accordionOpposite = false } = $$props;
	let { contactsList = false } = $$props;
	let { simpleList = false } = $$props;
	let { linksList = false } = $$props;
	let { menuList = false } = $$props;
	let { noHairlines = false } = $$props;
	let { noHairlinesBetween = false } = $$props;
	let { noHairlinesMd = false } = $$props;
	let { noHairlinesBetweenMd = false } = $$props;
	let { noHairlinesIos = false } = $$props;
	let { noHairlinesBetweenIos = false } = $$props;
	let { noHairlinesAurora = false } = $$props;
	let { noHairlinesBetweenAurora = false } = $$props;
	let { noChevron = false } = $$props;
	let { chevronCenter = false } = $$props;
	let { tab = false } = $$props;
	let { tabActive = false } = $$props;
	let { form = false } = $$props;
	let { formStoreData = false } = $$props;
	let { inlineLabels = false } = $$props;
	let { virtualList = false } = $$props;
	let { virtualListParams = undefined } = $$props;
	let el;
	let f7VirtualList;

	function virtualListInstance() {
		return f7VirtualList;
	}

	setReactiveContext('ListContext', () => ({
		listIsMedia: mediaList,
		listIsSimple: simpleList,
		listIsSortable: sortable,
		listIsSortableOpposite: sortableOpposite
	}));

	function onSubmit(event) {
		emit('submit', [event]);
	}

	function onSortableEnable(sortableEl) {
		if (sortableEl !== el) return;
		emit('sortableEnable');
	}

	function onSortableDisable(sortableEl) {
		if (sortableEl !== el) return;
		emit('sortableDisable');
	}

	function onSortableSort(listItemEl, sortData, listEl) {
		if (listEl !== el) return;
		emit('sortableSort', [sortData]);
	}

	function onSortableMove(listItemEl, listEl) {
		if (listEl !== el) return;
		emit('sortableMove', [listItemEl, listEl]);
	}

	useTab(() => el, emit);

	onMount(() => {
		f7ready(() => {
			app.f7.on('sortableEnable', onSortableEnable);
			app.f7.on('sortableDisable', onSortableDisable);
			app.f7.on('sortableSort', onSortableSort);
			app.f7.on('sortableMove', onSortableMove);
			if (!virtualList) return;
			const vlParams = virtualListParams || {};
			if (!vlParams.renderItem && !vlParams.renderExternal) return;

			f7VirtualList = app.f7.virtualList.create(extend(
				{
					el,
					on: {
						itemBeforeInsert(itemEl, item) {
							const vl = this;
							emit('virtualItemBeforeInsert', [vl, itemEl, item]);
						},
						beforeClear(fragment) {
							const vl = this;
							emit('virtualBeforeClear', [vl, fragment]);
						},
						itemsBeforeInsert(fragment) {
							const vl = this;
							emit('virtualItemsBeforeInsert', [vl, fragment]);
						},
						itemsAfterInsert(fragment) {
							const vl = this;
							emit('virtualItemsAfterInsert', [vl, fragment]);
						}
					}
				},
				vlParams
			));
		});
	});

	onDestroy(() => {
		if (!app.f7) return;
		app.f7.off('sortableEnable', onSortableEnable);
		app.f7.off('sortableDisable', onSortableDisable);
		app.f7.off('sortableSort', onSortableSort);
		app.f7.off('sortableMove', onSortableMove);

		if (f7VirtualList && f7VirtualList.destroy) {
			f7VirtualList.destroy();
			f7VirtualList = null;
		}
	});

	function form_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(5, el);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(5, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(56, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('classes' in $$new_props) $$invalidate(0, classes = $$new_props.classes);
		if ('ul' in $$new_props) $$invalidate(1, ul = $$new_props.ul);
		if ('inset' in $$new_props) $$invalidate(9, inset = $$new_props.inset);
		if ('xsmallInset' in $$new_props) $$invalidate(10, xsmallInset = $$new_props.xsmallInset);
		if ('smallInset' in $$new_props) $$invalidate(11, smallInset = $$new_props.smallInset);
		if ('mediumInset' in $$new_props) $$invalidate(12, mediumInset = $$new_props.mediumInset);
		if ('largeInset' in $$new_props) $$invalidate(13, largeInset = $$new_props.largeInset);
		if ('xlargeInset' in $$new_props) $$invalidate(14, xlargeInset = $$new_props.xlargeInset);
		if ('mediaList' in $$new_props) $$invalidate(15, mediaList = $$new_props.mediaList);
		if ('sortable' in $$new_props) $$invalidate(16, sortable = $$new_props.sortable);
		if ('sortableTapHold' in $$new_props) $$invalidate(17, sortableTapHold = $$new_props.sortableTapHold);
		if ('sortableEnabled' in $$new_props) $$invalidate(18, sortableEnabled = $$new_props.sortableEnabled);
		if ('sortableMoveElements' in $$new_props) $$invalidate(2, sortableMoveElements = $$new_props.sortableMoveElements);
		if ('sortableOpposite' in $$new_props) $$invalidate(19, sortableOpposite = $$new_props.sortableOpposite);
		if ('accordionList' in $$new_props) $$invalidate(20, accordionList = $$new_props.accordionList);
		if ('accordionOpposite' in $$new_props) $$invalidate(21, accordionOpposite = $$new_props.accordionOpposite);
		if ('contactsList' in $$new_props) $$invalidate(22, contactsList = $$new_props.contactsList);
		if ('simpleList' in $$new_props) $$invalidate(23, simpleList = $$new_props.simpleList);
		if ('linksList' in $$new_props) $$invalidate(24, linksList = $$new_props.linksList);
		if ('menuList' in $$new_props) $$invalidate(25, menuList = $$new_props.menuList);
		if ('noHairlines' in $$new_props) $$invalidate(26, noHairlines = $$new_props.noHairlines);
		if ('noHairlinesBetween' in $$new_props) $$invalidate(27, noHairlinesBetween = $$new_props.noHairlinesBetween);
		if ('noHairlinesMd' in $$new_props) $$invalidate(28, noHairlinesMd = $$new_props.noHairlinesMd);
		if ('noHairlinesBetweenMd' in $$new_props) $$invalidate(29, noHairlinesBetweenMd = $$new_props.noHairlinesBetweenMd);
		if ('noHairlinesIos' in $$new_props) $$invalidate(30, noHairlinesIos = $$new_props.noHairlinesIos);
		if ('noHairlinesBetweenIos' in $$new_props) $$invalidate(31, noHairlinesBetweenIos = $$new_props.noHairlinesBetweenIos);
		if ('noHairlinesAurora' in $$new_props) $$invalidate(32, noHairlinesAurora = $$new_props.noHairlinesAurora);
		if ('noHairlinesBetweenAurora' in $$new_props) $$invalidate(33, noHairlinesBetweenAurora = $$new_props.noHairlinesBetweenAurora);
		if ('noChevron' in $$new_props) $$invalidate(34, noChevron = $$new_props.noChevron);
		if ('chevronCenter' in $$new_props) $$invalidate(35, chevronCenter = $$new_props.chevronCenter);
		if ('tab' in $$new_props) $$invalidate(36, tab = $$new_props.tab);
		if ('tabActive' in $$new_props) $$invalidate(37, tabActive = $$new_props.tabActive);
		if ('form' in $$new_props) $$invalidate(3, form = $$new_props.form);
		if ('formStoreData' in $$new_props) $$invalidate(38, formStoreData = $$new_props.formStoreData);
		if ('inlineLabels' in $$new_props) $$invalidate(39, inlineLabels = $$new_props.inlineLabels);
		if ('virtualList' in $$new_props) $$invalidate(40, virtualList = $$new_props.virtualList);
		if ('virtualListParams' in $$new_props) $$invalidate(41, virtualListParams = $$new_props.virtualListParams);
		if ('$$scope' in $$new_props) $$invalidate(43, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(4, computedClasses = classNames(
			classes,
			{
				inset,
				'xsmall-inset': xsmallInset,
				'small-inset': smallInset,
				'medium-inset': mediumInset,
				'large-inset': largeInset,
				'xlarge-inset': xlargeInset,
				'media-list': mediaList,
				'simple-list': simpleList,
				'links-list': linksList,
				'menu-list': menuList,
				sortable,
				'sortable-tap-hold': sortableTapHold,
				'sortable-enabled': sortableEnabled,
				'sortable-opposite': sortableOpposite,
				'accordion-list': accordionList,
				'accordion-opposite': accordionOpposite,
				'contacts-list': contactsList,
				'virtual-list': virtualList,
				tab,
				'tab-active': tabActive,
				'no-hairlines': noHairlines,
				'no-hairlines-md': noHairlinesMd,
				'no-hairlines-ios': noHairlinesIos,
				'no-hairlines-aurora': noHairlinesAurora,
				'no-hairlines-between': noHairlinesBetween,
				'no-hairlines-between-md': noHairlinesBetweenMd,
				'no-hairlines-between-ios': noHairlinesBetweenIos,
				'no-hairlines-between-aurora': noHairlinesBetweenAurora,
				'form-store-data': formStoreData,
				'inline-labels': inlineLabels,
				'no-chevron': noChevron,
				'chevron-center': chevronCenter
			},
			colorClasses($$props)
		));
	};

	$$invalidate(6, hasUlSlots = $$slots.default || $$slots.list);
	$$props = exclude_internal_props($$props);

	return [
		classes,
		ul,
		sortableMoveElements,
		form,
		computedClasses,
		el,
		hasUlSlots,
		onSubmit,
		$$restProps,
		inset,
		xsmallInset,
		smallInset,
		mediumInset,
		largeInset,
		xlargeInset,
		mediaList,
		sortable,
		sortableTapHold,
		sortableEnabled,
		sortableOpposite,
		accordionList,
		accordionOpposite,
		contactsList,
		simpleList,
		linksList,
		menuList,
		noHairlines,
		noHairlinesBetween,
		noHairlinesMd,
		noHairlinesBetweenMd,
		noHairlinesIos,
		noHairlinesBetweenIos,
		noHairlinesAurora,
		noHairlinesBetweenAurora,
		noChevron,
		chevronCenter,
		tab,
		tabActive,
		formStoreData,
		inlineLabels,
		virtualList,
		virtualListParams,
		virtualListInstance,
		$$scope,
		slots,
		form_1_binding,
		div_binding
	];
}

class List extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				classes: 0,
				ul: 1,
				inset: 9,
				xsmallInset: 10,
				smallInset: 11,
				mediumInset: 12,
				largeInset: 13,
				xlargeInset: 14,
				mediaList: 15,
				sortable: 16,
				sortableTapHold: 17,
				sortableEnabled: 18,
				sortableMoveElements: 2,
				sortableOpposite: 19,
				accordionList: 20,
				accordionOpposite: 21,
				contactsList: 22,
				simpleList: 23,
				linksList: 24,
				menuList: 25,
				noHairlines: 26,
				noHairlinesBetween: 27,
				noHairlinesMd: 28,
				noHairlinesBetweenMd: 29,
				noHairlinesIos: 30,
				noHairlinesBetweenIos: 31,
				noHairlinesAurora: 32,
				noHairlinesBetweenAurora: 33,
				noChevron: 34,
				chevronCenter: 35,
				tab: 36,
				tabActive: 37,
				form: 3,
				formStoreData: 38,
				inlineLabels: 39,
				virtualList: 40,
				virtualListParams: 41,
				virtualListInstance: 42
			},
			null,
			[-1, -1]
		);
	}

	get virtualListInstance() {
		return this.$$.ctx[42];
	}
}

export { List };
