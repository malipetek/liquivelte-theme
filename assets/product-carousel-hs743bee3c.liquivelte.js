import { SvelteComponent, init, safe_not_equal, empty, insert_hydration, group_outros, transition_out, check_outros, transition_in, detach, getContext, create_component, claim_component, mount_component, destroy_component, noop, binding_callbacks, bind, add_flush_callback, component_subscribe, space, claim_space, element, text, claim_element, children, claim_text, attr, append_hydration, set_data, src_url_equal, set_style, destroy_each } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import './framework7-liquivelte-hsa0091f48.liquivelte.js';
import { Block_title } from './framework7-liquivelte-block-title-hs8daa1a0c.liquivelte.js';
import { Block } from './framework7-liquivelte-block-hs8daa1a0c.liquivelte.js';
import { Swiper_slide } from './framework7-liquivelte-swiper-slide-hs8daa1a0c.liquivelte.js';
import { Swiper_1 } from './framework7-liquivelte-swiper-hs8daa1a0c.liquivelte.js';
import { freeMode, Mousewheel, Pagination } from './framework7-liquivelte-get-params-hs6b273664.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs8daa1a0c.liquivelte.js';
import { Card_content } from './framework7-liquivelte-card-content-hs8daa1a0c.liquivelte.js';
import { Card_footer } from './framework7-liquivelte-card-footer-hs8daa1a0c.liquivelte.js';
import { Card_header } from './framework7-liquivelte-card-header-hs8daa1a0c.liquivelte.js';
import { Card } from './framework7-liquivelte-card-hs8daa1a0c.liquivelte.js';
import { Link } from './framework7-liquivelte-link-hs8daa1a0c.liquivelte.js';
import { cartStore } from './store.js-hs6c336c77.liquivelte.js';
import { Button } from './framework7-liquivelte-button-hs8daa1a0c.liquivelte.js';
import { Stepper } from './framework7-liquivelte-stepper-hs8daa1a0c.liquivelte.js';
import { Icon, Loadable } from './header-hs39c6dc7d.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/vertical-stepper.liquivelte generated by Svelte v3.50.0 */

function create_else_block(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				onClick: /*onClick*/ ctx[1],
				large: true,
				raised: true,
				outline: true,
				disabled: /*disabled*/ ctx[2],
				classes: "bg-white",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(button.$$.fragment);
		},
		l(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*onClick*/ 2) button_changes.onClick = /*onClick*/ ctx[1];
			if (dirty & /*disabled*/ 4) button_changes.disabled = /*disabled*/ ctx[2];

			if (dirty & /*$$scope*/ 512) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (20:0) {#if value != 0 }
function create_if_block(ctx) {
	let stepper;
	let current;

	stepper = new Stepper({
			props: {
				classes: "vertical ",
				onChange: /*onChange*/ ctx[0],
				value: /*value*/ ctx[3],
				small: true
			}
		});

	return {
		c() {
			create_component(stepper.$$.fragment);
		},
		l(nodes) {
			claim_component(stepper.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(stepper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const stepper_changes = {};
			if (dirty & /*onChange*/ 1) stepper_changes.onChange = /*onChange*/ ctx[0];
			if (dirty & /*value*/ 8) stepper_changes.value = /*value*/ ctx[3];
			stepper.$set(stepper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(stepper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(stepper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(stepper, detaching);
		}
	};
}

// (23:2) <Button          onClick="{onClick}"       large       raised       outline       disabled="{ disabled }"        classes="bg-white"        >
function create_default_slot$2(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: { name: "icon-plus", width: "20" }
		});

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		l(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[3] != 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	getContext('svelteProps') || {};
	getContext('lec') || {};
	let { onChange = () => 1 } = $$props;
	let { onClick = () => 1 } = $$props;
	let { disabled = false } = $$props;
	let { small } = $$props;
	let { large } = $$props;
	let { value = 0 } = $$props;

	$$self.$$set = $$props => {
		if ('onChange' in $$props) $$invalidate(0, onChange = $$props.onChange);
		if ('onClick' in $$props) $$invalidate(1, onClick = $$props.onClick);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ('small' in $$props) $$invalidate(4, small = $$props.small);
		if ('large' in $$props) $$invalidate(5, large = $$props.large);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
	};

	return [onChange, onClick, disabled, value, small, large];
}

class Vertical_stepper extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			onChange: 0,
			onClick: 1,
			disabled: 2,
			small: 4,
			large: 5,
			value: 3
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/product-card.liquivelte generated by Svelte v3.50.0 */

function create_default_slot_6(ctx) {
	let verticalstepper;
	let updating_value;
	let current;

	function verticalstepper_value_binding(value) {
		/*verticalstepper_value_binding*/ ctx[8](value);
	}

	let verticalstepper_props = {
		small: true,
		disabled: !/*product*/ ctx[0].available,
		onChange: /*quantityChange*/ ctx[6].bind(/*cartItem*/ ctx[1]),
		onClick: /*addToCart*/ ctx[5]
	};

	if (/*quantity*/ ctx[3] !== void 0) {
		verticalstepper_props.value = /*quantity*/ ctx[3];
	}

	verticalstepper = new Vertical_stepper({ props: verticalstepper_props });
	binding_callbacks.push(() => bind(verticalstepper, 'value', verticalstepper_value_binding));

	return {
		c() {
			create_component(verticalstepper.$$.fragment);
		},
		l(nodes) {
			claim_component(verticalstepper.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(verticalstepper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const verticalstepper_changes = {};
			if (dirty & /*product*/ 1) verticalstepper_changes.disabled = !/*product*/ ctx[0].available;
			if (dirty & /*cartItem*/ 2) verticalstepper_changes.onChange = /*quantityChange*/ ctx[6].bind(/*cartItem*/ ctx[1]);

			if (!updating_value && dirty & /*quantity*/ 8) {
				updating_value = true;
				verticalstepper_changes.value = /*quantity*/ ctx[3];
				add_flush_callback(() => updating_value = false);
			}

			verticalstepper.$set(verticalstepper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(verticalstepper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(verticalstepper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(verticalstepper, detaching);
		}
	};
}

// (52:4) <Link  href="/products/{ product.handle }" >
function create_default_slot_5(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true, width: true, style: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[4].image_url(/*product*/ ctx[0].media[0], { "width": "300" }))) attr(img, "src", img_src_value);
			attr(img, "width", "300");
			set_style(img, "aspect-ratio", /*product*/ ctx[0].media[0].aspect_ratio);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*product*/ 1 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[4].image_url(/*product*/ ctx[0].media[0], { "width": "300" }))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*product*/ 1) {
				set_style(img, "aspect-ratio", /*product*/ ctx[0].media[0].aspect_ratio);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (48:4) <CardHeader      classes="no-border"     valign="bottom"      >
function create_default_slot_4(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				href: "/products/" + /*product*/ ctx[0].handle,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		l(nodes) {
			claim_component(link.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};
			if (dirty & /*product*/ 1) link_changes.href = "/products/" + /*product*/ ctx[0].handle;

			if (dirty & /*$$scope, product*/ 8193) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (58:2) <CardContent  >
function create_default_slot_3$1(ctx) {
	let div;
	let t0_value = /*liquid*/ ctx[4].money(/*product*/ ctx[0].price) + "";
	let t0;
	let t1;
	let h3;
	let t2_value = /*product*/ ctx[0].title + "";
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			h3 = element("h3");
			t2 = text(t2_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			div_nodes.forEach(detach);
			t1 = claim_space(nodes);
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t2 = claim_text(h3_nodes, t2_value);
			h3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "text-theme");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			insert_hydration(target, t1, anchor);
			insert_hydration(target, h3, anchor);
			append_hydration(h3, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*product*/ 1 && t0_value !== (t0_value = /*liquid*/ ctx[4].money(/*product*/ ctx[0].price) + "")) set_data(t0, t0_value);
			if (dirty & /*product*/ 1 && t2_value !== (t2_value = /*product*/ ctx[0].title + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t1);
			if (detaching) detach(h3);
		}
	};
}

// (68:8) <Link  >
function create_default_slot_2$1(ctx) {
	let t;

	return {
		c() {
			t = text("Add to Wishlist");
		},
		l(nodes) {
			t = claim_text(nodes, "Add to Wishlist");
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (67:6) <CardFooter  >
function create_default_slot_1$1(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		l(nodes) {
			claim_component(link.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (39:2) <Card  classes="card-header-pic" swipeToClose hideToolbarOnOpen hideNavbarOnOpen bind:expandableOpened="{expandableOpened}" >
function create_default_slot$1(ctx) {
	let loadable;
	let t0;
	let cardheader;
	let t1;
	let cardcontent;
	let t2;
	let cardfooter;
	let current;

	loadable = new Loadable({
			props: {
				classes: "absolute -right-[10px] -top-[10px] z-10",
				centered: true,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	cardheader = new Card_header({
			props: {
				classes: "no-border",
				valign: "bottom",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	cardcontent = new Card_content({
			props: {
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	cardfooter = new Card_footer({
			props: {
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(loadable.$$.fragment);
			t0 = space();
			create_component(cardheader.$$.fragment);
			t1 = space();
			create_component(cardcontent.$$.fragment);
			t2 = space();
			create_component(cardfooter.$$.fragment);
		},
		l(nodes) {
			claim_component(loadable.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(cardheader.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(cardcontent.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(cardfooter.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(loadable, target, anchor);
			insert_hydration(target, t0, anchor);
			mount_component(cardheader, target, anchor);
			insert_hydration(target, t1, anchor);
			mount_component(cardcontent, target, anchor);
			insert_hydration(target, t2, anchor);
			mount_component(cardfooter, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const loadable_changes = {};

			if (dirty & /*$$scope, product, cartItem, quantity*/ 8203) {
				loadable_changes.$$scope = { dirty, ctx };
			}

			loadable.$set(loadable_changes);
			const cardheader_changes = {};

			if (dirty & /*$$scope, product*/ 8193) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
			const cardcontent_changes = {};

			if (dirty & /*$$scope, product*/ 8193) {
				cardcontent_changes.$$scope = { dirty, ctx };
			}

			cardcontent.$set(cardcontent_changes);
			const cardfooter_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				cardfooter_changes.$$scope = { dirty, ctx };
			}

			cardfooter.$set(cardfooter_changes);
		},
		i(local) {
			if (current) return;
			transition_in(loadable.$$.fragment, local);
			transition_in(cardheader.$$.fragment, local);
			transition_in(cardcontent.$$.fragment, local);
			transition_in(cardfooter.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loadable.$$.fragment, local);
			transition_out(cardheader.$$.fragment, local);
			transition_out(cardcontent.$$.fragment, local);
			transition_out(cardfooter.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loadable, detaching);
			if (detaching) detach(t0);
			destroy_component(cardheader, detaching);
			if (detaching) detach(t1);
			destroy_component(cardcontent, detaching);
			if (detaching) detach(t2);
			destroy_component(cardfooter, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let card;
	let updating_expandableOpened;
	let current;

	function card_expandableOpened_binding(value) {
		/*card_expandableOpened_binding*/ ctx[9](value);
	}

	let card_props = {
		classes: "card-header-pic",
		swipeToClose: true,
		hideToolbarOnOpen: true,
		hideNavbarOnOpen: true,
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	if (/*expandableOpened*/ ctx[2] !== void 0) {
		card_props.expandableOpened = /*expandableOpened*/ ctx[2];
	}

	card = new Card({ props: card_props });
	binding_callbacks.push(() => bind(card, 'expandableOpened', card_expandableOpened_binding));

	return {
		c() {
			create_component(card.$$.fragment);
		},
		l(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const card_changes = {};

			if (dirty & /*$$scope, product, cartItem, quantity*/ 8203) {
				card_changes.$$scope = { dirty, ctx };
			}

			if (!updating_expandableOpened && dirty & /*expandableOpened*/ 4) {
				updating_expandableOpened = true;
				card_changes.expandableOpened = /*expandableOpened*/ ctx[2];
				add_flush_callback(() => updating_expandableOpened = false);
			}

			card.$set(card_changes);
		},
		i(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(card, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let quantity;
	let $cartStore;
	component_subscribe($$self, cartStore, $$value => $$invalidate(7, $cartStore = $$value));
	getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	const liquid = cachedLiquid(lec);
	let { product } = $$props;
	let expandableOpened = false;

	let cartItem;

	function addToCart() {
		cartStore.add({ product });
	}

	function quantityChange(event) {
		cartStore.setQuantity(this.id, +event.target.value);
	}

	function verticalstepper_value_binding(value) {
		quantity = value;
		((($$invalidate(3, quantity), $$invalidate(1, cartItem)), $$invalidate(7, $cartStore)), $$invalidate(0, product));
	}

	function card_expandableOpened_binding(value) {
		expandableOpened = value;
		$$invalidate(2, expandableOpened);
	}

	$$self.$$set = $$props => {
		if ('product' in $$props) $$invalidate(0, product = $$props.product);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$cartStore, product*/ 129) {
			if ($cartStore) {
				$$invalidate(1, cartItem = $cartStore.items.find(i => i.product?.id == product.id || i.product_id == product.id));
			}
		}

		if ($$self.$$.dirty & /*cartItem*/ 2) {
			$$invalidate(3, quantity = cartItem?.quantity || 0);
		}
	};

	return [
		product,
		cartItem,
		expandableOpened,
		quantity,
		liquid,
		addToCart,
		quantityChange,
		$cartStore,
		verticalstepper_value_binding,
		card_expandableOpened_binding
	];
}

class Product_card extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { product: 0 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/product-carousel/index.liquivelte generated by Svelte v3.50.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[10] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[10] === 0,
		index: /*index*/ child_ctx[10] + 1,
		index0: /*index*/ child_ctx[10],
		last: /*index*/ child_ctx[10] === /*products*/ child_ctx[1].length - 1,
		rindex: /*products*/ child_ctx[1].length - /*index*/ child_ctx[10],
		rindex0: /*products*/ child_ctx[1].length - /*index*/ child_ctx[10] - 1,
		length: /*products*/ child_ctx[1].length
	};

	child_ctx[8] = constants_0;
	return child_ctx;
}

// (42:0) <BlockTitle  >
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text(/*collection_title*/ ctx[0]);
		},
		l(nodes) {
			t = claim_text(nodes, /*collection_title*/ ctx[0]);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (59:4) <SwiperSlide   >
function create_default_slot_2(ctx) {
	let productcard;
	let t;
	let current;
	productcard = new Product_card({ props: { product: /*product*/ ctx[7] } });

	return {
		c() {
			create_component(productcard.$$.fragment);
			t = space();
		},
		l(nodes) {
			claim_component(productcard.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m(target, anchor) {
			mount_component(productcard, target, anchor);
			insert_hydration(target, t, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(productcard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(productcard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(productcard, detaching);
			if (detaching) detach(t);
		}
	};
}

// (49:4) {#each  products as product, index   }
function create_each_block(ctx) {
	let swiperslide;
	let current;

	swiperslide = new Swiper_slide({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(swiperslide.$$.fragment);
		},
		l(nodes) {
			claim_component(swiperslide.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(swiperslide, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const swiperslide_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				swiperslide_changes.$$scope = { dirty, ctx };
			}

			swiperslide.$set(swiperslide_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swiperslide.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiperslide.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(swiperslide, detaching);
		}
	};
}

// (43:0) <Swiper  modules="{[FreeMode, Mousewheel, Pagination]}"            freemode="{ { enabled: true, sticky: true } }"           pagination="{true}"            mousewheel="{ { enabled: true, forceToAxis: true, sensitivity: 1.5 } }"           breakpoints="{breakpoints}"            >
function create_default_slot_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*products*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*products*/ 2) {
				each_value = /*products*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (41:0) <Block  classes="product-carousel" >
function create_default_slot(ctx) {
	let blocktitle;
	let t;
	let swiper;
	let current;

	blocktitle = new Block_title({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	swiper = new Swiper_1({
			props: {
				modules: [freeMode, Mousewheel, Pagination],
				freemode: { enabled: true, sticky: true },
				pagination: true,
				mousewheel: {
					enabled: true,
					forceToAxis: true,
					sensitivity: 1.5
				},
				breakpoints: /*breakpoints*/ ctx[2],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(blocktitle.$$.fragment);
			t = space();
			create_component(swiper.$$.fragment);
		},
		l(nodes) {
			claim_component(blocktitle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(swiper.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(blocktitle, target, anchor);
			insert_hydration(target, t, anchor);
			mount_component(swiper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const blocktitle_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);
			const swiper_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				swiper_changes.$$scope = { dirty, ctx };
			}

			swiper.$set(swiper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			transition_in(swiper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(blocktitle.$$.fragment, local);
			transition_out(swiper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(blocktitle, detaching);
			if (detaching) detach(t);
			destroy_component(swiper, detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				classes: "product-carousel",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		l(nodes) {
			claim_component(block.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self) {
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	let collection_title = themeImports['collection_title'];
	themeImports['sectionƒƒsettings'];
	let products = themeImports['products'];
	console.log(' ==> products ', products);

	const breakpoints = {
		"640": { slidesPerView: 2 },
		"768": { slidesPerView: 3 },
		"1024": { slidesPerView: 4 },
		"1280": { slidesPerView: 6 },
		"1536": { slidesPerView: 8 }
	};

	return [collection_title, products, breakpoints];
}

class Product_carousel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: Product_carousel
});

export { Product_card, Product_carousel, index };
