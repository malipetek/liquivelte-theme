import { SvelteComponent, init, safe_not_equal, create_slot, assign, element, space, claim_element, children, claim_space, detach, attr, set_attributes, toggle_class, insert_hydration, append_hydration, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, transition_in, transition_out, compute_rest_props, getContext, createEventDispatcher, setContext, onMount, afterUpdate, onDestroy, exclude_internal_props, noop, binding_callbacks, tick } from './liquivelte-svelte-hse72de747.liquivelte.js';
import { Swiper, getParams } from './framework7-liquivelte-get-params-hs062c4e9e.liquivelte.js';
import { mountSwiper } from './framework7-liquivelte-mount-swiper-hs2baa0651.liquivelte.js';
import { extend, needsNavigation, needsScrollbar, needsPagination } from './framework7-liquivelte-utils-hs98d1f35e.liquivelte.js';
import { getChangedParams } from './framework7-liquivelte-get-changed-params-hs0d560e93.liquivelte.js';
import { updateSwiper } from './framework7-liquivelte-update-swiper-hsd551b9c5.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/swiper.liquivelte generated by Svelte v3.50.0 */

const get_container_end_slot_changes = dirty => ({
	virtualData: dirty[0] & /*virtualData*/ 512
});

const get_container_end_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });

const get_wrapper_end_slot_changes = dirty => ({
	virtualData: dirty[0] & /*virtualData*/ 512
});

const get_wrapper_end_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });

const get_default_slot_changes = dirty => ({
	virtualData: dirty[0] & /*virtualData*/ 512
});

const get_default_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });

const get_wrapper_start_slot_changes = dirty => ({
	virtualData: dirty[0] & /*virtualData*/ 512
});

const get_wrapper_start_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });

const get_container_start_slot_changes = dirty => ({
	virtualData: dirty[0] & /*virtualData*/ 512
});

const get_container_start_slot_context = ctx => ({ virtualData: /*virtualData*/ ctx[9] });

// (192:2) {#if _needsNavigation }
function create_if_block_2(ctx) {
	let div0;
	let t;
	let div1;

	return {
		c() {
			div0 = element("div");
			t = space();
			div1 = element("div");
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			children(div1).forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "swiper-button-prev");
			attr(div1, "class", "swiper-button-next");
		},
		m(target, anchor) {
			insert_hydration(target, div0, anchor);
			/*div0_binding*/ ctx[20](div0);
			insert_hydration(target, t, anchor);
			insert_hydration(target, div1, anchor);
			/*div1_binding*/ ctx[21](div1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div0);
			/*div0_binding*/ ctx[20](null);
			if (detaching) detach(t);
			if (detaching) detach(div1);
			/*div1_binding*/ ctx[21](null);
		}
	};
}

// (196:2) {#if _needsScrollbar }
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "swiper-scrollbar");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			/*div_binding*/ ctx[22](div);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[22](null);
		}
	};
}

// (199:2) {#if _needsPagination }
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "swiper-pagination");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			/*div_binding_1*/ ctx[23](div);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding_1*/ ctx[23](null);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let div1_class_value;
	let current;
	const container_start_slot_template = /*#slots*/ ctx[19]["container-start"];
	const container_start_slot = create_slot(container_start_slot_template, ctx, /*$$scope*/ ctx[18], get_container_start_slot_context);
	const wrapper_start_slot_template = /*#slots*/ ctx[19]["wrapper-start"];
	const wrapper_start_slot = create_slot(wrapper_start_slot_template, ctx, /*$$scope*/ ctx[18], get_wrapper_start_slot_context);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context);
	const wrapper_end_slot_template = /*#slots*/ ctx[19]["wrapper-end"];
	const wrapper_end_slot = create_slot(wrapper_end_slot_template, ctx, /*$$scope*/ ctx[18], get_wrapper_end_slot_context);
	let if_block0 = /*_needsNavigation*/ ctx[12] && create_if_block_2(ctx);
	let if_block1 = /*_needsScrollbar*/ ctx[11] && create_if_block_1(ctx);
	let if_block2 = /*_needsPagination*/ ctx[10] && create_if_block(ctx);
	const container_end_slot_template = /*#slots*/ ctx[19]["container-end"];
	const container_end_slot = create_slot(container_end_slot_template, ctx, /*$$scope*/ ctx[18], get_container_end_slot_context);

	let div1_levels = [
		{
			class: div1_class_value = "" + (/*containerClasses*/ ctx[2] + " " + /*classes*/ ctx[0])
		},
		/*restProps*/ ctx[3]
	];

	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (container_start_slot) container_start_slot.c();
			t0 = space();
			div0 = element("div");
			if (wrapper_start_slot) wrapper_start_slot.c();
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (wrapper_end_slot) wrapper_end_slot.c();
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			if (container_end_slot) container_end_slot.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (container_start_slot) container_start_slot.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (wrapper_start_slot) wrapper_start_slot.l(div0_nodes);
			t1 = claim_space(div0_nodes);
			if (default_slot) default_slot.l(div0_nodes);
			t2 = claim_space(div0_nodes);
			if (wrapper_end_slot) wrapper_end_slot.l(div0_nodes);
			div0_nodes.forEach(detach);
			t3 = claim_space(div1_nodes);
			if (if_block0) if_block0.l(div1_nodes);
			t4 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			t5 = claim_space(div1_nodes);
			if (if_block2) if_block2.l(div1_nodes);
			t6 = claim_space(div1_nodes);
			if (container_end_slot) container_end_slot.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "swiper-wrapper");
			set_attributes(div1, div1_data);
			toggle_class(div1, "vertical", /*vertical*/ ctx[1]);
		},
		m(target, anchor) {
			insert_hydration(target, div1, anchor);

			if (container_start_slot) {
				container_start_slot.m(div1, null);
			}

			append_hydration(div1, t0);
			append_hydration(div1, div0);

			if (wrapper_start_slot) {
				wrapper_start_slot.m(div0, null);
			}

			append_hydration(div0, t1);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			append_hydration(div0, t2);

			if (wrapper_end_slot) {
				wrapper_end_slot.m(div0, null);
			}

			append_hydration(div1, t3);
			if (if_block0) if_block0.m(div1, null);
			append_hydration(div1, t4);
			if (if_block1) if_block1.m(div1, null);
			append_hydration(div1, t5);
			if (if_block2) if_block2.m(div1, null);
			append_hydration(div1, t6);

			if (container_end_slot) {
				container_end_slot.m(div1, null);
			}

			/*div1_binding_1*/ ctx[24](div1);
			current = true;
		},
		p(ctx, dirty) {
			if (container_start_slot) {
				if (container_start_slot.p && (!current || dirty[0] & /*$$scope, virtualData*/ 262656)) {
					update_slot_base(
						container_start_slot,
						container_start_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(container_start_slot_template, /*$$scope*/ ctx[18], dirty, get_container_start_slot_changes),
						get_container_start_slot_context
					);
				}
			}

			if (wrapper_start_slot) {
				if (wrapper_start_slot.p && (!current || dirty[0] & /*$$scope, virtualData*/ 262656)) {
					update_slot_base(
						wrapper_start_slot,
						wrapper_start_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(wrapper_start_slot_template, /*$$scope*/ ctx[18], dirty, get_wrapper_start_slot_changes),
						get_wrapper_start_slot_context
					);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, virtualData*/ 262656)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}

			if (wrapper_end_slot) {
				if (wrapper_end_slot.p && (!current || dirty[0] & /*$$scope, virtualData*/ 262656)) {
					update_slot_base(
						wrapper_end_slot,
						wrapper_end_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(wrapper_end_slot_template, /*$$scope*/ ctx[18], dirty, get_wrapper_end_slot_changes),
						get_wrapper_end_slot_context
					);
				}
			}

			if (/*_needsNavigation*/ ctx[12]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div1, t4);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*_needsScrollbar*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, t5);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*_needsPagination*/ ctx[10]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div1, t6);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (container_end_slot) {
				if (container_end_slot.p && (!current || dirty[0] & /*$$scope, virtualData*/ 262656)) {
					update_slot_base(
						container_end_slot,
						container_end_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(container_end_slot_template, /*$$scope*/ ctx[18], dirty, get_container_end_slot_changes),
						get_container_end_slot_context
					);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty[0] & /*containerClasses, classes*/ 5 && div1_class_value !== (div1_class_value = "" + (/*containerClasses*/ ctx[2] + " " + /*classes*/ ctx[0]))) && { class: div1_class_value },
				dirty[0] & /*restProps*/ 8 && /*restProps*/ ctx[3]
			]));

			toggle_class(div1, "vertical", /*vertical*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(container_start_slot, local);
			transition_in(wrapper_start_slot, local);
			transition_in(default_slot, local);
			transition_in(wrapper_end_slot, local);
			transition_in(container_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(container_start_slot, local);
			transition_out(wrapper_start_slot, local);
			transition_out(default_slot, local);
			transition_out(wrapper_end_slot, local);
			transition_out(container_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (container_start_slot) container_start_slot.d(detaching);
			if (wrapper_start_slot) wrapper_start_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (wrapper_end_slot) wrapper_end_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (container_end_slot) container_end_slot.d(detaching);
			/*div1_binding_1*/ ctx[24](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let _needsNavigation;
	let _needsScrollbar;
	let _needsPagination;
	const omit_props_names = ["importsSeek","classes","tag","wrapperTag","vertical","swiper"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { importsSeek = 'lower' } = $$props;
	getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const dispatch = createEventDispatcher();
	let { classes = '' } = $$props;
	let { tag = 'div' } = $$props;
	let { wrapperTag = 'div' } = $$props;
	let { vertical } = $$props;
	let containerClasses = 'swiper';
	let breakpointChanged = false;
	let swiperInstance = null;
	let oldPassedParams = null;
	let paramsData;
	let swiperParams;
	let passedParams;
	let restProps;
	let swiperEl = null;
	let prevEl = null;
	let nextEl = null;
	let scrollbarEl = null;
	let paginationEl = null;
	let virtualData = { slides: [] };

	function swiper() {
		return swiperInstance;
	}

	const setVirtualData = data => {
		$$invalidate(9, virtualData = data);

		tick().then(() => {
			swiperInstance.$wrapperEl.children('.swiper-slide').each(el => {
				if (el.onSwiper) el.onSwiper(swiperInstance);
			});

			swiperInstance.updateSlides();
			swiperInstance.updateProgress();
			swiperInstance.updateSlidesClasses();

			if (swiperInstance.lazy && swiperInstance.params.lazy.enabled) {
				swiperInstance.lazy.load();
			}
		});
	};

	const calcParams = () => {
		paramsData = getParams($$restProps);
		$$invalidate(17, swiperParams = paramsData.params);
		passedParams = paramsData.passedParams;
		$$invalidate(3, restProps = paramsData.rest);
	};

	calcParams();
	oldPassedParams = passedParams;

	const onBeforeBreakpoint = () => {
		breakpointChanged = true;
	};

	swiperParams.onAny = (event, ...args) => {
		dispatch(event, args);
	};

	Object.assign(swiperParams.on, {
		_beforeBreakpoint: onBeforeBreakpoint,
		_containerClasses(_swiper, classes) {
			$$invalidate(2, containerClasses = classes);
		}
	});

	swiperInstance = new Swiper(swiperParams);
	setContext('swiper', swiperInstance);

	if (swiperInstance.virtual && swiperInstance.params.virtual.enabled) {
		const extendWith = {
			cache: false,
			renderExternal: data => {
				setVirtualData(data);

				if (swiperParams.virtual && swiperParams.virtual.renderExternal) {
					swiperParams.virtual.renderExternal(data);
				}
			},
			renderExternalUpdate: false
		};

		extend(swiperInstance.params.virtual, extendWith);
		extend(swiperInstance.originalParams.virtual, extendWith);
	}

	onMount(() => {
		if (!swiperEl) return;

		mountSwiper(
			{
				el: swiperEl,
				nextEl,
				prevEl,
				paginationEl,
				scrollbarEl,
				swiper: swiperInstance
			},
			swiperParams
		);

		dispatch('swiper', [swiperInstance]);
		if (swiperParams.virtual) return;

		swiperInstance.slides.each(el => {
			if (el.onSwiper) el.onSwiper(swiperInstance);
		});
	});

	afterUpdate(() => {
		if (!swiperInstance) return;
		calcParams();
		const changedParams = getChangedParams(passedParams, oldPassedParams);

		if ((changedParams.length || breakpointChanged) && swiperInstance && !swiperInstance.destroyed) {
			updateSwiper({
				swiper: swiperInstance,
				passedParams,
				changedParams,
				nextEl,
				prevEl,
				scrollbarEl,
				paginationEl
			});
		}

		breakpointChanged = false;
		oldPassedParams = passedParams;
	});

	onDestroy(() => {
		// eslint-disable-next-line
		if (typeof window !== 'undefined' && swiperInstance && !swiperInstance.destroyed) {
			swiperInstance.destroy(true, false);
		}
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			prevEl = $$value;
			$$invalidate(5, prevEl);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			nextEl = $$value;
			$$invalidate(6, nextEl);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			scrollbarEl = $$value;
			$$invalidate(7, scrollbarEl);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			paginationEl = $$value;
			$$invalidate(8, paginationEl);
		});
	}

	function div1_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			swiperEl = $$value;
			$$invalidate(4, swiperEl);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(40, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(39, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('importsSeek' in $$new_props) $$invalidate(13, importsSeek = $$new_props.importsSeek);
		if ('classes' in $$new_props) $$invalidate(0, classes = $$new_props.classes);
		if ('tag' in $$new_props) $$invalidate(14, tag = $$new_props.tag);
		if ('wrapperTag' in $$new_props) $$invalidate(15, wrapperTag = $$new_props.wrapperTag);
		if ('vertical' in $$new_props) $$invalidate(1, vertical = $$new_props.vertical);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*swiperParams*/ 131072) {
			$$invalidate(12, _needsNavigation = needsNavigation(swiperParams));
		}

		if ($$self.$$.dirty[0] & /*swiperParams*/ 131072) {
			$$invalidate(11, _needsScrollbar = needsScrollbar(swiperParams));
		}

		if ($$self.$$.dirty[0] & /*swiperParams*/ 131072) {
			$$invalidate(10, _needsPagination = needsPagination(swiperParams));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		classes,
		vertical,
		containerClasses,
		restProps,
		swiperEl,
		prevEl,
		nextEl,
		scrollbarEl,
		paginationEl,
		virtualData,
		_needsPagination,
		_needsScrollbar,
		_needsNavigation,
		importsSeek,
		tag,
		wrapperTag,
		swiper,
		swiperParams,
		$$scope,
		slots,
		div0_binding,
		div1_binding,
		div_binding,
		div_binding_1,
		div1_binding_1
	];
}

class Swiper_1 extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				importsSeek: 13,
				classes: 0,
				tag: 14,
				wrapperTag: 15,
				vertical: 1,
				swiper: 16
			},
			null,
			[-1, -1]
		);
	}

	get swiper() {
		return this.$$.ctx[16];
	}
}

export { Swiper_1 };
