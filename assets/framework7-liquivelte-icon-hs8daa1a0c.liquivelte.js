import { SvelteComponent, init, safe_not_equal, create_slot, assign, element, text, space, claim_element, children, claim_text, claim_space, detach, set_attributes, insert_hydration, append_hydration, action_destroyer, set_data, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, is_function, transition_in, transition_out, compute_rest_props, getContext, exclude_internal_props, binding_callbacks } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs8daa1a0c.liquivelte.js';
import { restProps, useTooltip, useTheme, classNames, colorClasses } from './framework7-liquivelte-hsa0091f48.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/icon.liquivelte generated by Svelte v3.50.0 */

function create_fragment(ctx) {
	let i;
	let t0_value = /*liquid*/ ctx[7].default(/*iconText*/ ctx[5], '') + "";
	let t0;
	let t1;
	let i_class_value;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

	let i_levels = [
		{ style: /*iconStyle*/ ctx[4] },
		{
			class: i_class_value = "icon " + /*iconClasses*/ ctx[6] + " " + /*classes*/ ctx[0]
		},
		restProps(/*$$restProps*/ ctx[8])
	];

	let i_data = {};

	for (let i = 0; i < i_levels.length; i += 1) {
		i_data = assign(i_data, i_levels[i]);
	}

	return {
		c() {
			i = element("i");
			t0 = text(t0_value);
			t1 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			i = claim_element(nodes, "I", { style: true, class: true });
			var i_nodes = children(i);
			t0 = claim_text(i_nodes, t0_value);
			t1 = claim_space(i_nodes);
			if (default_slot) default_slot.l(i_nodes);
			i_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(i, i_data);
		},
		m(target, anchor) {
			insert_hydration(target, i, anchor);
			append_hydration(i, t0);
			append_hydration(i, t1);

			if (default_slot) {
				default_slot.m(i, null);
			}

			/*i_binding*/ ctx[22](i);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(useTooltip_action = useTooltip.call(null, i, {
					tooltip: /*tooltip*/ ctx[1],
					tooltipTrigger: /*tooltipTrigger*/ ctx[2]
				}));

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*iconText*/ 32) && t0_value !== (t0_value = /*liquid*/ ctx[7].default(/*iconText*/ ctx[5], '') + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[20],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[20], dirty, null),
						null
					);
				}
			}

			set_attributes(i, i_data = get_spread_update(i_levels, [
				(!current || dirty & /*iconStyle*/ 16) && { style: /*iconStyle*/ ctx[4] },
				(!current || dirty & /*iconClasses, classes*/ 65 && i_class_value !== (i_class_value = "icon " + /*iconClasses*/ ctx[6] + " " + /*classes*/ ctx[0])) && { class: i_class_value },
				dirty & /*$$restProps*/ 256 && restProps(/*$$restProps*/ ctx[8])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty & /*tooltip, tooltipTrigger*/ 6) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[1],
				tooltipTrigger: /*tooltipTrigger*/ ctx[2]
			});
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(i);
			if (default_slot) default_slot.d(detaching);
			/*i_binding*/ ctx[22](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let iconClasses;
	let iconText;
	let iconSize;
	let iconStyle;

	const omit_props_names = [
		"style","classes","material","f7","icon","ios","aurora","md","tooltip","tooltipTrigger","size"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	const liquid = cachedLiquid(lec);
	let { style = undefined } = $$props;
	let { classes = '' } = $$props;
	let { material = undefined } = $$props;
	let { f7 = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ios = undefined } = $$props;
	let { aurora = undefined } = $$props;
	let { md = undefined } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { size = undefined } = $$props;
	let el;

	let theme = useTheme(t => {
		$$invalidate(17, theme = t);
	});

	let themeIcon;

	function iconTextComputed(t) {
		let textComputed = material || f7;

		if (md && t && t.md && (md.indexOf('material:') >= 0 || md.indexOf('f7:') >= 0)) {
			textComputed = md.split(':')[1];
		} else if (ios && t && t.ios && (ios.indexOf('material:') >= 0 || ios.indexOf('f7:') >= 0)) {
			textComputed = ios.split(':')[1];
		} else if (aurora && t && t.aurora && (aurora.indexOf('material:') >= 0 || aurora.indexOf('f7:') >= 0)) {
			textComputed = aurora.split(':')[1];
		}

		return textComputed;
	}

	function i_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(3, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(27, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('style' in $$new_props) $$invalidate(9, style = $$new_props.style);
		if ('classes' in $$new_props) $$invalidate(0, classes = $$new_props.classes);
		if ('material' in $$new_props) $$invalidate(10, material = $$new_props.material);
		if ('f7' in $$new_props) $$invalidate(11, f7 = $$new_props.f7);
		if ('icon' in $$new_props) $$invalidate(12, icon = $$new_props.icon);
		if ('ios' in $$new_props) $$invalidate(13, ios = $$new_props.ios);
		if ('aurora' in $$new_props) $$invalidate(14, aurora = $$new_props.aurora);
		if ('md' in $$new_props) $$invalidate(15, md = $$new_props.md);
		if ('tooltip' in $$new_props) $$invalidate(1, tooltip = $$new_props.tooltip);
		if ('tooltipTrigger' in $$new_props) $$invalidate(2, tooltipTrigger = $$new_props.tooltipTrigger);
		if ('size' in $$new_props) $$invalidate(16, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*theme, ios, md, aurora*/ 188416) {
			if (theme) {
				if (theme.ios) $$invalidate(18, themeIcon = ios);
				if (theme.md) $$invalidate(18, themeIcon = md);
				if (theme.aurora) $$invalidate(18, themeIcon = aurora);
			}
		}

		if ($$self.$$.dirty & /*themeIcon, material, f7, icon*/ 269312) {
			if (themeIcon) {
				const parts = themeIcon.split(':');
				const prop = parts[0];
				const value = parts[1];

				if (prop === 'material' || prop === 'f7') {
					$$invalidate(0, classes['material-icons'] = prop === 'material', classes);
					$$invalidate(0, classes['f7-icons'] = prop === 'f7', classes);
				}

				if (prop === 'icon') {
					$$invalidate(0, classes[value] = true, classes);
				}
			} else {
				$$invalidate(0, classes = {
					'material-icons': material,
					'f7-icons': f7
				});

				if (icon) $$invalidate(0, classes[icon] = true, classes);
			}
		}

		$$invalidate(6, iconClasses = classNames(classes, colorClasses($$props)));

		if ($$self.$$.dirty & /*theme*/ 131072) {
			$$invalidate(5, iconText = iconTextComputed(theme));
		}

		if ($$self.$$.dirty & /*size*/ 65536) {
			$$invalidate(19, iconSize = typeof size === 'number' || parseFloat(size) === size * 1
			? `${size}px`
			: size);
		}

		if ($$self.$$.dirty & /*style, iconSize*/ 524800) {
			$$invalidate(4, iconStyle = (style || '') + (iconSize
			? `;font-size: ${iconSize}; width: ${iconSize}; height: ${iconSize}`.replace(';;', '')
			: ''));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		classes,
		tooltip,
		tooltipTrigger,
		el,
		iconStyle,
		iconText,
		iconClasses,
		liquid,
		$$restProps,
		style,
		material,
		f7,
		icon,
		ios,
		aurora,
		md,
		size,
		theme,
		themeIcon,
		iconSize,
		$$scope,
		slots,
		i_binding
	];
}

class Icon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			style: 9,
			classes: 0,
			material: 10,
			f7: 11,
			icon: 12,
			ios: 13,
			aurora: 14,
			md: 15,
			tooltip: 1,
			tooltipTrigger: 2,
			size: 16
		});
	}
}

export { Icon };
