import { SvelteComponent, init, safe_not_equal, binding_callbacks, bind, create_component, claim_component, mount_component, add_flush_callback, transition_in, transition_out, destroy_component, space, claim_space, insert_hydration, detach, element, claim_element, src_url_equal, attr, set_style, text, children, claim_text, append_hydration, listen, set_data, empty, group_outros, check_outros, destroy_each } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import './framework7-liquivelte-hs5d6b599e.liquivelte.js';
import { Block_title } from './framework7-liquivelte-block-title-hs8daa1a0c.liquivelte.js';
import { Block } from './framework7-liquivelte-block-hs8daa1a0c.liquivelte.js';
import { Swiper_slide } from './framework7-liquivelte-swiper-slide-hs8daa1a0c.liquivelte.js';
import { Swiper_1 } from './framework7-liquivelte-swiper-hs8daa1a0c.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs8daa1a0c.liquivelte.js';
import { Button } from './framework7-liquivelte-button-hs8daa1a0c.liquivelte.js';
import { Card_content } from './framework7-liquivelte-card-content-hs8daa1a0c.liquivelte.js';
import { Card_footer } from './framework7-liquivelte-card-footer-hs8daa1a0c.liquivelte.js';
import { Card_header } from './framework7-liquivelte-card-header-hs8daa1a0c.liquivelte.js';
import { Card } from './framework7-liquivelte-card-hs8daa1a0c.liquivelte.js';
import { Link } from './framework7-liquivelte-link-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-get-params-hs6b273664.liquivelte.js';
import './framework7-liquivelte-popup-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-view-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-router-context-provider-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-login-screen-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-sheet-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-popover-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-panel-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-mount-swiper-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-utils-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-get-changed-params-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-params-list-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-update-swiper-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-use-icon-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-icon-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-badge-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-preloader-hs8daa1a0c.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/product-card.liquivelte generated by Svelte v3.50.0 */

function create_default_slot_5(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true, width: true, style: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[3].image_url(/*product*/ ctx[1].media[0], { "width": "300" }))) attr(img, "src", img_src_value);
			attr(img, "width", "300");
			set_style(img, "aspect-ratio", /*product*/ ctx[1].media[0].aspect_ratio);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*product*/ 2 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[3].image_url(/*product*/ ctx[1].media[0], { "width": "300" }))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*product*/ 2) {
				set_style(img, "aspect-ratio", /*product*/ ctx[1].media[0].aspect_ratio);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (31:0) <CardContent      lec={lec} >
function create_default_slot_4(ctx) {
	let div;
	let h3;
	let t0_value = /*product*/ ctx[1].title + "";
	let t0;
	let t1;
	let t2_value = /*liquid*/ ctx[3].money(/*product*/ ctx[1].price) + "";
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			h3 = claim_element(div_nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, t0_value);
			h3_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			t2 = claim_text(div_nodes, t2_value);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, h3);
			append_hydration(h3, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (!mounted) {
				dispose = listen(div, "click", /*increment*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*product*/ 2 && t0_value !== (t0_value = /*product*/ ctx[1].title + "")) set_data(t0, t0_value);
			if (dirty & /*product*/ 2 && t2_value !== (t2_value = /*liquid*/ ctx[3].money(/*product*/ ctx[1].price) + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (40:6) <Button      lec={lec} >
function create_default_slot_3$1(ctx) {
	let t;

	return {
		c() {
			t = text("Add to Card");
		},
		l(nodes) {
			t = claim_text(nodes, "Add to Card");
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (41:6) <Link      lec={lec} >
function create_default_slot_2$1(ctx) {
	let t;

	return {
		c() {
			t = text("Add to Wishlist");
		},
		l(nodes) {
			t = claim_text(nodes, "Add to Wishlist");
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (39:4) <CardFooter      lec={lec} >
function create_default_slot_1$1(ctx) {
	let button;
	let t;
	let link;
	let current;

	button = new Button({
			props: {
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	link = new Link({
			props: {
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(button.$$.fragment);
			t = space();
			create_component(link.$$.fragment);
		},
		l(nodes) {
			claim_component(button.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(link.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			insert_hydration(target, t, anchor);
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*lec*/ 1) button_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope*/ 256) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const link_changes = {};
			if (dirty & /*lec*/ 1) link_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope*/ 256) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach(t);
			destroy_component(link, detaching);
		}
	};
}

// (22:0) <Card  class="card-header-pic" swipeToClose hideToolbarOnOpen hideNavbarOnOpen bind:expandableOpened="{expandableOpened}"     lec={lec} >
function create_default_slot$1(ctx) {
	let cardheader;
	let t0;
	let cardcontent;
	let t1;
	let cardfooter;
	let current;

	cardheader = new Card_header({
			props: {
				class: "no-border",
				valign: "bottom",
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	cardcontent = new Card_content({
			props: {
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	cardfooter = new Card_footer({
			props: {
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(cardheader.$$.fragment);
			t0 = space();
			create_component(cardcontent.$$.fragment);
			t1 = space();
			create_component(cardfooter.$$.fragment);
		},
		l(nodes) {
			claim_component(cardheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(cardcontent.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(cardfooter.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(cardheader, target, anchor);
			insert_hydration(target, t0, anchor);
			mount_component(cardcontent, target, anchor);
			insert_hydration(target, t1, anchor);
			mount_component(cardfooter, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const cardheader_changes = {};
			if (dirty & /*lec*/ 1) cardheader_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, product*/ 258) {
				cardheader_changes.$$scope = { dirty, ctx };
			}

			cardheader.$set(cardheader_changes);
			const cardcontent_changes = {};
			if (dirty & /*lec*/ 1) cardcontent_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, product*/ 258) {
				cardcontent_changes.$$scope = { dirty, ctx };
			}

			cardcontent.$set(cardcontent_changes);
			const cardfooter_changes = {};
			if (dirty & /*lec*/ 1) cardfooter_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, lec*/ 257) {
				cardfooter_changes.$$scope = { dirty, ctx };
			}

			cardfooter.$set(cardfooter_changes);
		},
		i(local) {
			if (current) return;
			transition_in(cardheader.$$.fragment, local);
			transition_in(cardcontent.$$.fragment, local);
			transition_in(cardfooter.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(cardheader.$$.fragment, local);
			transition_out(cardcontent.$$.fragment, local);
			transition_out(cardfooter.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(cardheader, detaching);
			if (detaching) detach(t0);
			destroy_component(cardcontent, detaching);
			if (detaching) detach(t1);
			destroy_component(cardfooter, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let card;
	let updating_expandableOpened;
	let current;

	function card_expandableOpened_binding(value) {
		/*card_expandableOpened_binding*/ ctx[5](value);
	}

	let card_props = {
		class: "card-header-pic",
		swipeToClose: true,
		hideToolbarOnOpen: true,
		hideNavbarOnOpen: true,
		lec: /*lec*/ ctx[0],
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	if (/*expandableOpened*/ ctx[2] !== void 0) {
		card_props.expandableOpened = /*expandableOpened*/ ctx[2];
	}

	card = new Card({ props: card_props });
	binding_callbacks.push(() => bind(card, 'expandableOpened', card_expandableOpened_binding));

	return {
		c() {
			create_component(card.$$.fragment);
		},
		l(nodes) {
			claim_component(card.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const card_changes = {};
			if (dirty & /*lec*/ 1) card_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, lec, product*/ 259) {
				card_changes.$$scope = { dirty, ctx };
			}

			if (!updating_expandableOpened && dirty & /*expandableOpened*/ 4) {
				updating_expandableOpened = true;
				card_changes.expandableOpened = /*expandableOpened*/ ctx[2];
				add_flush_callback(() => updating_expandableOpened = false);
			}

			card.$set(card_changes);
		},
		i(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(card, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	let { product } = $$props;
	let expandableOpened = false;

	function increment() {
	}

	function card_expandableOpened_binding(value) {
		expandableOpened = value;
		$$invalidate(2, expandableOpened);
	}

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(0, lec = $$props.lec);
		if ('product' in $$props) $$invalidate(1, product = $$props.product);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*expandableOpened*/ 4) {
			console.log('expandableOpened ', expandableOpened);
		}
	};

	return [
		lec,
		product,
		expandableOpened,
		liquid,
		increment,
		card_expandableOpened_binding
	];
}

class Product_card extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { lec: 0, product: 1 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/slider/index.liquivelte generated by Svelte v3.50.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[9] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[9] === 0,
		index: /*index*/ child_ctx[9] + 1,
		index0: /*index*/ child_ctx[9],
		last: /*index*/ child_ctx[9] === /*products*/ child_ctx[2].length - 1,
		rindex: /*products*/ child_ctx[2].length - /*index*/ child_ctx[9],
		rindex0: /*products*/ child_ctx[2].length - /*index*/ child_ctx[9] - 1,
		length: /*products*/ child_ctx[2].length
	};

	child_ctx[7] = constants_0;
	return child_ctx;
}

// (38:0) <BlockTitle   products={products}  sectionƒƒsettings={sectionƒƒsettings}   lec={lec} >
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text("With all controls");
		},
		l(nodes) {
			t = claim_text(nodes, "With all controls");
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (50:4) <SwiperSlide    products={products}  sectionƒƒsettings={sectionƒƒsettings}   lec={lec} >
function create_default_slot_2(ctx) {
	let productcard;
	let t;
	let current;

	productcard = new Product_card({
			props: {
				product: /*product*/ ctx[6],
				products: /*products*/ ctx[2],
				sectionƒƒsettings: /*sectionƒƒsettings*/ ctx[1],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(productcard.$$.fragment);
			t = space();
		},
		l(nodes) {
			claim_component(productcard.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m(target, anchor) {
			mount_component(productcard, target, anchor);
			insert_hydration(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const productcard_changes = {};
			if (dirty & /*products*/ 4) productcard_changes.product = /*product*/ ctx[6];
			if (dirty & /*products*/ 4) productcard_changes.products = /*products*/ ctx[2];
			if (dirty & /*sectionƒƒsettings*/ 2) productcard_changes.sectionƒƒsettings = /*sectionƒƒsettings*/ ctx[1];
			if (dirty & /*lec*/ 1) productcard_changes.lec = /*lec*/ ctx[0];
			productcard.$set(productcard_changes);
		},
		i(local) {
			if (current) return;
			transition_in(productcard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(productcard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(productcard, detaching);
			if (detaching) detach(t);
		}
	};
}

// (40:4) {#each  products as product, index  }
function create_each_block(ctx) {
	let swiperslide;
	let current;

	swiperslide = new Swiper_slide({
			props: {
				products: /*products*/ ctx[2],
				sectionƒƒsettings: /*sectionƒƒsettings*/ ctx[1],
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(swiperslide.$$.fragment);
		},
		l(nodes) {
			claim_component(swiperslide.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(swiperslide, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const swiperslide_changes = {};
			if (dirty & /*products*/ 4) swiperslide_changes.products = /*products*/ ctx[2];
			if (dirty & /*sectionƒƒsettings*/ 2) swiperslide_changes.sectionƒƒsettings = /*sectionƒƒsettings*/ ctx[1];
			if (dirty & /*lec*/ 1) swiperslide_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, products, sectionƒƒsettings, lec*/ 1031) {
				swiperslide_changes.$$scope = { dirty, ctx };
			}

			swiperslide.$set(swiperslide_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swiperslide.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiperslide.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(swiperslide, detaching);
		}
	};
}

// (39:2) <Swiper  breakpoints="{breakpoints}"  products={products}  sectionƒƒsettings={sectionƒƒsettings}   lec={lec} >
function create_default_slot_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*products*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*products, sectionƒƒsettings, lec*/ 7) {
				each_value = /*products*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (37:0) <Block   products={products}  sectionƒƒsettings={sectionƒƒsettings}   lec={lec} >
function create_default_slot(ctx) {
	let blocktitle;
	let t;
	let swiper;
	let current;

	blocktitle = new Block_title({
			props: {
				products: /*products*/ ctx[2],
				sectionƒƒsettings: /*sectionƒƒsettings*/ ctx[1],
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	swiper = new Swiper_1({
			props: {
				breakpoints: /*breakpoints*/ ctx[3],
				products: /*products*/ ctx[2],
				sectionƒƒsettings: /*sectionƒƒsettings*/ ctx[1],
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(blocktitle.$$.fragment);
			t = space();
			create_component(swiper.$$.fragment);
		},
		l(nodes) {
			claim_component(blocktitle.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(swiper.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(blocktitle, target, anchor);
			insert_hydration(target, t, anchor);
			mount_component(swiper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const blocktitle_changes = {};
			if (dirty & /*products*/ 4) blocktitle_changes.products = /*products*/ ctx[2];
			if (dirty & /*sectionƒƒsettings*/ 2) blocktitle_changes.sectionƒƒsettings = /*sectionƒƒsettings*/ ctx[1];
			if (dirty & /*lec*/ 1) blocktitle_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope*/ 1024) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);
			const swiper_changes = {};
			if (dirty & /*products*/ 4) swiper_changes.products = /*products*/ ctx[2];
			if (dirty & /*sectionƒƒsettings*/ 2) swiper_changes.sectionƒƒsettings = /*sectionƒƒsettings*/ ctx[1];
			if (dirty & /*lec*/ 1) swiper_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, products, sectionƒƒsettings, lec*/ 1031) {
				swiper_changes.$$scope = { dirty, ctx };
			}

			swiper.$set(swiper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			transition_in(swiper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(blocktitle.$$.fragment, local);
			transition_out(swiper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(blocktitle, detaching);
			if (detaching) detach(t);
			destroy_component(swiper, detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				products: /*products*/ ctx[2],
				sectionƒƒsettings: /*sectionƒƒsettings*/ ctx[1],
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		l(nodes) {
			claim_component(block.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*products*/ 4) block_changes.products = /*products*/ ctx[2];
			if (dirty & /*sectionƒƒsettings*/ 2) block_changes.sectionƒƒsettings = /*sectionƒƒsettings*/ ctx[1];
			if (dirty & /*lec*/ 1) block_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, products, sectionƒƒsettings, lec*/ 1031) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { lec } = $$props;
	let { sectionƒƒsettings } = $$props;
	let { products } = $$props;
	console.log('products ', products);

	const breakpoints = {
		"640": { slidesPerView: 2 },
		"768": { slidesPerView: 3 },
		"1024": { slidesPerView: 4 },
		"1280": { slidesPerView: 6 },
		"1536": { slidesPerView: 8 }
	};

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(0, lec = $$props.lec);
		if ('sectionƒƒsettings' in $$props) $$invalidate(1, sectionƒƒsettings = $$props.sectionƒƒsettings);
		if ('products' in $$props) $$invalidate(2, products = $$props.products);
	};

	return [lec, sectionƒƒsettings, products, breakpoints];
}

class Slider extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			lec: 0,
			sectionƒƒsettings: 1,
			products: 2
		});
	}
}

export { Slider as default };
