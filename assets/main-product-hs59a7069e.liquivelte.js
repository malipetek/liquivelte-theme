import { SvelteComponent, init, safe_not_equal, element, create_component, space, claim_element, children, claim_component, detach, claim_space, attr, set_style, toggle_class, insert_hydration, append_hydration, mount_component, transition_in, transition_out, destroy_component, getContext, assign, exclude_internal_props, empty, group_outros, check_outros, destroy_each, binding_callbacks, src_url_equal, text, claim_text, set_data, bind, HtmlTagHydration, claim_html_tag, set_attributes, add_flush_callback, get_spread_update, listen } from './liquivelte-svelte-hse72de747.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs18c7db27.liquivelte.js';
import './framework7-liquivelte-hs390c8ed0.liquivelte.js';
import { Swiper_slide } from './framework7-liquivelte-swiper-slide-hs3a060140.liquivelte.js';
import { Swiper_1 } from './framework7-liquivelte-swiper-hscfd9243b.liquivelte.js';
import { freeMode, Mousewheel, Thumb } from './framework7-liquivelte-get-params-hs062c4e9e.liquivelte.js';
import { Quantity_box } from './header-hs3d0caedd.liquivelte.js';
import { Block } from './framework7-liquivelte-block-hs27fbf1bd.liquivelte.js';
import { Breadcrumbs_item } from './framework7-liquivelte-breadcrumbs-item-hs6a64243a.liquivelte.js';
import { Breadcrumbs_separator } from './framework7-liquivelte-breadcrumbs-separator-hs112648c9.liquivelte.js';
import { Breadcrumbs } from './framework7-liquivelte-breadcrumbs-hs4b11a99d.liquivelte.js';
import { Link } from './framework7-liquivelte-link-hsa52eb758.liquivelte.js';
import './framework7-liquivelte-popup-hsd8245019.liquivelte.js';
import './framework7-liquivelte-view-hs49fb1780.liquivelte.js';
import './framework7-liquivelte-router-context-provider-hsbbbe962a.liquivelte.js';
import './framework7-liquivelte-login-screen-hs90018f17.liquivelte.js';
import './framework7-liquivelte-sheet-hs8e1dcad1.liquivelte.js';
import './framework7-liquivelte-popover-hs0e7569a4.liquivelte.js';
import './framework7-liquivelte-panel-hs20b1bd51.liquivelte.js';
import './framework7-liquivelte-mount-swiper-hs2baa0651.liquivelte.js';
import './framework7-liquivelte-utils-hs98d1f35e.liquivelte.js';
import './framework7-liquivelte-get-changed-params-hs0d560e93.liquivelte.js';
import './framework7-liquivelte-params-list-hsa4b1a348.liquivelte.js';
import './framework7-liquivelte-update-swiper-hsd551b9c5.liquivelte.js';
import './store.js-hs5b2b91d0.liquivelte.js';
import './product-carousel-hse8edf5c1.liquivelte.js';
import './framework7-liquivelte-block-title-hsddbcca44.liquivelte.js';
import './framework7-liquivelte-card-content-hs1d5a281f.liquivelte.js';
import './framework7-liquivelte-card-footer-hsdfc63116.liquivelte.js';
import './framework7-liquivelte-card-header-hs39ef0385.liquivelte.js';
import './framework7-liquivelte-card-hsb49198cb.liquivelte.js';
import './framework7-liquivelte-button-hs4d01f9fb.liquivelte.js';
import './framework7-liquivelte-use-icon-hs1c185042.liquivelte.js';
import './framework7-liquivelte-icon-hsf79d0b21.liquivelte.js';
import './framework7-liquivelte-badge-hse50adf9e.liquivelte.js';
import './framework7-liquivelte-preloader-hsee2ec6f6.liquivelte.js';
import './framework7-liquivelte-stepper-hs0ef28d1a.liquivelte.js';
import './framework7-liquivelte-list-item-hs36cbc300.liquivelte.js';
import './framework7-liquivelte-list-hs44e5c94b.liquivelte.js';
import './framework7-liquivelte-accordion-content-hs0c825499.liquivelte.js';
import './framework7-liquivelte-col-hs860e8dc7.liquivelte.js';
import './framework7-liquivelte-row-hs93cf9519.liquivelte.js';
import './framework7-liquivelte-appbar-hs98b8db68.liquivelte.js';
import './framework7-liquivelte-page-hsb414881c.liquivelte.js';
import './framework7-liquivelte-page-content-hs8bfb2656.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/main-product/blocks/image-gallery.liquivelte generated by Svelte v3.50.0 */

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	child_ctx[18] = list;
	child_ctx[19] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[19] === 0,
		index: /*index*/ child_ctx[19] + 1,
		index0: /*index*/ child_ctx[19],
		last: /*index*/ child_ctx[19] === /*product*/ child_ctx[0].images.length - 1,
		rindex: /*product*/ child_ctx[0].images.length - /*index*/ child_ctx[19],
		rindex0: /*product*/ child_ctx[0].images.length - /*index*/ child_ctx[19] - 1,
		length: /*product*/ child_ctx[0].images.length
	};

	child_ctx[17] = constants_0;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	child_ctx[19] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[19] === 0,
		index: /*index*/ child_ctx[19] + 1,
		index0: /*index*/ child_ctx[19],
		last: /*index*/ child_ctx[19] === /*product*/ child_ctx[0].images.length - 1,
		rindex: /*product*/ child_ctx[0].images.length - /*index*/ child_ctx[19],
		rindex0: /*product*/ child_ctx[0].images.length - /*index*/ child_ctx[19] - 1,
		length: /*product*/ child_ctx[0].images.length
	};

	child_ctx[17] = constants_0;
	return child_ctx;
}

// (136:12) <SwiperSlide  classes="aspect-w-4 aspect-h-5 sm:rounded-lg sm:overflow-hidden lg:aspect-w-3 lg:aspect-h-4"  >
function create_default_slot_3$1(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let t;

	return {
		c() {
			img = element("img");
			t = space();
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			t = claim_space(nodes);
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[6].image_url(/*image*/ ctx[16], { "width": "100" }))) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*image*/ ctx[16].alt);
			attr(img, "class", "");
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*product*/ 1 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[6].image_url(/*image*/ ctx[16], { "width": "100" }))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*product*/ 1 && img_alt_value !== (img_alt_value = /*image*/ ctx[16].alt)) {
				attr(img, "alt", img_alt_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching) detach(t);
		}
	};
}

// (126:10) {#each  product.images as image, index   }
function create_each_block_1$1(ctx) {
	let swiperslide;
	let current;

	swiperslide = new Swiper_slide({
			props: {
				classes: "aspect-w-4 aspect-h-5 sm:rounded-lg sm:overflow-hidden lg:aspect-w-3 lg:aspect-h-4",
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(swiperslide.$$.fragment);
		},
		l(nodes) {
			claim_component(swiperslide.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(swiperslide, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const swiperslide_changes = {};

			if (dirty & /*$$scope, product*/ 2097153) {
				swiperslide_changes.$$scope = { dirty, ctx };
			}

			swiperslide.$set(swiperslide_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swiperslide.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiperslide.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(swiperslide, detaching);
		}
	};
}

// (115:12) <Swiper  classes="thumbs-swiper max-w-full"                slidesPerView="{thumbnailsPerView}"               spaceBetween="{thumbnailSpaceBetween}"               direction="vertical"               vertical               freemode="{ { enabled: true, sticky: true } }"                mousewheel="{ { forceToAxis: true, sensitivity: 1 } }"               modules="{[FreeMode, Mousewheel, Thumbs]}"               on:swiper={setThumbsSwiper}               watchSlidesProgress            >
function create_default_slot_2$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*product*/ ctx[0].images;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*liquid, product*/ 65) {
				each_value_1 = /*product*/ ctx[0].images;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (160:8) <SwiperSlide  classes="sm:rounded-lg sm:overflow-hidden"  >
function create_default_slot_1$1(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let index = /*index*/ ctx[19];
	let t;
	const assign_img = () => /*img_binding*/ ctx[9](img, index);
	const unassign_img = () => /*img_binding*/ ctx[9](null, index);

	return {
		c() {
			img = element("img");
			t = space();
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			t = claim_space(nodes);
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[6].image_url(/*image*/ ctx[16], { "width": "500" }))) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*image*/ ctx[16].alt);
			attr(img, "class", "w-full object-center object-cover");
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
			assign_img();
			insert_hydration(target, t, anchor);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*product*/ 1 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[6].image_url(/*image*/ ctx[16], { "width": "500" }))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*product*/ 1 && img_alt_value !== (img_alt_value = /*image*/ ctx[16].alt)) {
				attr(img, "alt", img_alt_value);
			}

			if (index !== /*index*/ ctx[19]) {
				unassign_img();
				index = /*index*/ ctx[19];
				assign_img();
			}
		},
		d(detaching) {
			if (detaching) detach(img);
			unassign_img();
			if (detaching) detach(t);
		}
	};
}

// (150:6) {#each  product.images as image, index   }
function create_each_block$2(ctx) {
	let swiperslide;
	let current;

	swiperslide = new Swiper_slide({
			props: {
				classes: "sm:rounded-lg sm:overflow-hidden",
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(swiperslide.$$.fragment);
		},
		l(nodes) {
			claim_component(swiperslide.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(swiperslide, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const swiperslide_changes = {};

			if (dirty & /*$$scope, product, gallery_images*/ 2097157) {
				swiperslide_changes.$$scope = { dirty, ctx };
			}

			swiperslide.$set(swiperslide_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swiperslide.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiperslide.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(swiperslide, detaching);
		}
	};
}

// (142:4) <Swiper  classes="product-gallery max-w-full"          loop="{true}"          slidesPerView="{1}"         thumbs={ { swiper: thumbsSwiper } }         freemode="{ { enabled: true, sticky: true } }"          mousewheel="{ { forceToAxis: true, sensitivity: 1 } }"         modules="{[FreeMode, Mousewheel, Thumbs]}"        >
function create_default_slot$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*product*/ ctx[0].images;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*liquid, product, gallery_images*/ 69) {
				each_value = /*product*/ ctx[0].images;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment$2(ctx) {
	let div1;
	let div0;
	let swiper0;
	let t;
	let swiper1;
	let current;

	swiper0 = new Swiper_1({
			props: {
				classes: "thumbs-swiper max-w-full",
				slidesPerView: thumbnailsPerView,
				spaceBetween: thumbnailSpaceBetween,
				direction: "vertical",
				vertical: true,
				freemode: { enabled: true, sticky: true },
				mousewheel: { forceToAxis: true, sensitivity: 1 },
				modules: [freeMode, Mousewheel, Thumb],
				watchSlidesProgress: true,
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	swiper0.$on("swiper", /*setThumbsSwiper*/ ctx[7]);

	swiper1 = new Swiper_1({
			props: {
				classes: "product-gallery max-w-full",
				loop: true,
				slidesPerView: 1,
				thumbs: { swiper: /*thumbsSwiper*/ ctx[5] },
				freemode: { enabled: true, sticky: true },
				mousewheel: { forceToAxis: true, sensitivity: 1 },
				modules: [freeMode, Mousewheel, Thumb],
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(swiper0.$$.fragment);
			t = space();
			create_component(swiper1.$$.fragment);
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { style: true, class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);
			claim_component(swiper0.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_space(div1_nodes);
			claim_component(swiper1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "thumbs-wrapper hidden lg:block");
			set_style(div0, "--slides-per-view", thumbnailsPerView);
			set_style(div0, "--space-between", thumbnailSpaceBetween + "px");
			toggle_class(div0, "initialized", /*initialized*/ ctx[3] == true);
			toggle_class(div0, "uninitialized", /*initialized*/ ctx[3] != true);
			set_style(div1, "grid-template-columns", "100px auto");
			set_style(div1, "--swiper-navigation-color", "#fff");
			set_style(div1, "--swiper-pagination-color", "#fff");
			set_style(div1, "--aspect-ratio", /*first_image_ratio*/ ctx[1]);
			set_style(div1, "--max-height", /*firstImageHeight*/ ctx[4] + "px");
			set_style(div1, "min-height", "300px");
			attr(div1, "class", "mt-6 w-2xl max-w-2xl mx-auto sm:px-6 lg:max-w-7xl lg:px-8 flex lg:grid justify-items-center lg:gap-8 image-gallery overflow-hidden relative");
			toggle_class(div1, "initialized", /*initialized*/ ctx[3] == true);
			toggle_class(div1, "uninitialized", /*initialized*/ ctx[3] != true);
		},
		m(target, anchor) {
			insert_hydration(target, div1, anchor);
			append_hydration(div1, div0);
			mount_component(swiper0, div0, null);
			append_hydration(div1, t);
			mount_component(swiper1, div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const swiper0_changes = {};

			if (dirty & /*$$scope, product*/ 2097153) {
				swiper0_changes.$$scope = { dirty, ctx };
			}

			swiper0.$set(swiper0_changes);

			if (!current || dirty & /*initialized*/ 8) {
				toggle_class(div0, "initialized", /*initialized*/ ctx[3] == true);
			}

			if (!current || dirty & /*initialized*/ 8) {
				toggle_class(div0, "uninitialized", /*initialized*/ ctx[3] != true);
			}

			const swiper1_changes = {};
			if (dirty & /*thumbsSwiper*/ 32) swiper1_changes.thumbs = { swiper: /*thumbsSwiper*/ ctx[5] };

			if (dirty & /*$$scope, product, gallery_images*/ 2097157) {
				swiper1_changes.$$scope = { dirty, ctx };
			}

			swiper1.$set(swiper1_changes);

			if (!current || dirty & /*first_image_ratio*/ 2) {
				set_style(div1, "--aspect-ratio", /*first_image_ratio*/ ctx[1]);
			}

			if (!current || dirty & /*firstImageHeight*/ 16) {
				set_style(div1, "--max-height", /*firstImageHeight*/ ctx[4] + "px");
			}

			if (!current || dirty & /*initialized*/ 8) {
				toggle_class(div1, "initialized", /*initialized*/ ctx[3] == true);
			}

			if (!current || dirty & /*initialized*/ 8) {
				toggle_class(div1, "uninitialized", /*initialized*/ ctx[3] != true);
			}
		},
		i(local) {
			if (current) return;
			transition_in(swiper0.$$.fragment, local);
			transition_in(swiper1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiper0.$$.fragment, local);
			transition_out(swiper1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(swiper0);
			destroy_component(swiper1);
		}
	};
}
let thumbnailsPerView = 4;
let thumbnailSpaceBetween = 10;

function fc$2(e, t, r) {
	const n = e.find(e => e === t);

	return n || e.reduce((e, n) => {
		let o = Math.abs(e - t), i = Math.abs(n - t);

		return "higher" === r
		? n > t && i <= o ? n : e
		: "lower" === r ? n < t && i <= o ? n : e : void 0;
	});
}

function instance$2($$self, $$props, $$invalidate) {
	let { importsSeek = 'lower' } = $$props;
	let themeImports = getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const cic = window.cicR;
	const liquid = cachedLiquid(lec);
	let { product = themeImports['product'].find(e => e.component_index == fc$2(themeImports['product'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { first_image_ratio = themeImports['first_image_ratio'].find(e => e.component_index == fc$2(themeImports['first_image_ratio'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let initialized;
	let gallery_images = [];
	let firstImageHeight = 0;

	// $: console.log('firstImageHeight ', firstImageHeight);
	// store Thumbs swiper instance
	let thumbsSwiper = null;

	const setThumbsSwiper = e => {
		const [swiper] = e.detail;

		// set Thumbs swiper instance
		$$invalidate(3, initialized = true);

		setTimeout(() => {
			$$invalidate(5, thumbsSwiper = swiper);
		});
	};

	function img_binding($$value, index) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			gallery_images[index] = $$value;
			$$invalidate(2, gallery_images);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(15, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(8, importsSeek = $$new_props.importsSeek);
		if ('product' in $$new_props) $$invalidate(0, product = $$new_props.product);
		if ('first_image_ratio' in $$new_props) $$invalidate(1, first_image_ratio = $$new_props.first_image_ratio);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gallery_images*/ 4) {
			// $: console.log('thumbnailsSwiper is set to ', thumbsSwiper);
			// $: console.log('gallery_images[0] ', gallery_images[0]);
			if (gallery_images[0]) {
				if (gallery_images[0].complete) {
					$$invalidate(4, firstImageHeight = gallery_images[0].naturalHeight);
				} else {
					gallery_images[0].addEventListener('load', () => {
						$$invalidate(4, firstImageHeight = gallery_images[0].naturalHeight);
					});
				}
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		product,
		first_image_ratio,
		gallery_images,
		initialized,
		firstImageHeight,
		thumbsSwiper,
		liquid,
		setThumbsSwiper,
		importsSeek,
		img_binding
	];
}

class Image_gallery extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			importsSeek: 8,
			product: 0,
			first_image_ratio: 1
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/breadcrumbs.liquivelte generated by Svelte v3.50.0 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[10] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[10] === 0,
		index: /*index*/ child_ctx[10] + 1,
		index0: /*index*/ child_ctx[10],
		last: /*index*/ child_ctx[10] === /*bread_crumbs*/ child_ctx[0].length - 1,
		rindex: /*bread_crumbs*/ child_ctx[0].length - /*index*/ child_ctx[10],
		rindex0: /*bread_crumbs*/ child_ctx[0].length - /*index*/ child_ctx[10] - 1,
		length: /*bread_crumbs*/ child_ctx[0].length
	};

	child_ctx[8] = constants_0;
	return child_ctx;
}

// (33:6) <Link  >
function create_default_slot_3(ctx) {
	let t_value = /*breadcrumb*/ ctx[7] + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*bread_crumbs*/ 1 && t_value !== (t_value = /*breadcrumb*/ ctx[7] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (32:4) <BreadcrumbsItem  >
function create_default_slot_2(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		l(nodes) {
			claim_component(link.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};

			if (dirty & /*$$scope, bread_crumbs*/ 2049) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (35:4) {#if !(forloop.last )}
function create_if_block$1(ctx) {
	let breadcrumbsseparator;
	let current;
	breadcrumbsseparator = new Breadcrumbs_separator({});

	return {
		c() {
			create_component(breadcrumbsseparator.$$.fragment);
		},
		l(nodes) {
			claim_component(breadcrumbsseparator.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(breadcrumbsseparator, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(breadcrumbsseparator.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(breadcrumbsseparator.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(breadcrumbsseparator, detaching);
		}
	};
}

// (22:4) {#each  bread_crumbs as breadcrumb, index   }
function create_each_block$1(ctx) {
	let breadcrumbsitem;
	let t;
	let if_block_anchor;
	let current;

	breadcrumbsitem = new Breadcrumbs_item({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	let if_block = !/*forloop*/ ctx[8].last && create_if_block$1();

	return {
		c() {
			create_component(breadcrumbsitem.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			claim_component(breadcrumbsitem.$$.fragment, nodes);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(breadcrumbsitem, target, anchor);
			insert_hydration(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const breadcrumbsitem_changes = {};

			if (dirty & /*$$scope, bread_crumbs*/ 2049) {
				breadcrumbsitem_changes.$$scope = { dirty, ctx };
			}

			breadcrumbsitem.$set(breadcrumbsitem_changes);

			if (!/*forloop*/ ctx[8].last) {
				if (if_block) {
					if (dirty & /*bread_crumbs*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(breadcrumbsitem.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(breadcrumbsitem.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(breadcrumbsitem, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (21:2) <Breadcrumbs  >
function create_default_slot_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*bread_crumbs*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*bread_crumbs*/ 1) {
				each_value = /*bread_crumbs*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (20:0) <Block  strong >
function create_default_slot(ctx) {
	let breadcrumbs;
	let current;

	breadcrumbs = new Breadcrumbs({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(breadcrumbs.$$.fragment);
		},
		l(nodes) {
			claim_component(breadcrumbs.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(breadcrumbs, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const breadcrumbs_changes = {};

			if (dirty & /*$$scope, bread_crumbs*/ 2049) {
				breadcrumbs_changes.$$scope = { dirty, ctx };
			}

			breadcrumbs.$set(breadcrumbs_changes);
		},
		i(local) {
			if (current) return;
			transition_in(breadcrumbs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(breadcrumbs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(breadcrumbs, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				strong: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		l(nodes) {
			claim_component(block.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};

			if (dirty & /*$$scope, bread_crumbs*/ 2049) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function fc$1(e, t, r) {
	const n = e.find(e => e === t);

	return n || e.reduce((e, n) => {
		let o = Math.abs(e - t), i = Math.abs(n - t);

		return "higher" === r
		? n > t && i <= o ? n : e
		: "lower" === r ? n < t && i <= o ? n : e : void 0;
	});
}

function instance$1($$self, $$props, $$invalidate) {
	let { importsSeek = 'lower' } = $$props;
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const cic = window.cicR;
	let { bread_crumbs = themeImports['bread_crumbs'].find(e => e.component_index == fc$1(themeImports['bread_crumbs'].map(e => e.component_index), cic, importsSeek)).value } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(1, importsSeek = $$new_props.importsSeek);
		if ('bread_crumbs' in $$new_props) $$invalidate(0, bread_crumbs = $$new_props.bread_crumbs);
	};

	$$props = exclude_internal_props($$props);
	return [bread_crumbs, importsSeek];
}

class Breadcrumbs_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { importsSeek: 1, bread_crumbs: 0 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/main-product/index.liquivelte generated by Svelte v3.50.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	child_ctx[27] = list;
	child_ctx[28] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[28] === 0,
		index: /*index*/ child_ctx[28] + 1,
		index0: /*index*/ child_ctx[28],
		last: /*index*/ child_ctx[28] === /*product*/ child_ctx[0].options_with_values.length - 1,
		rindex: /*product*/ child_ctx[0].options_with_values.length - /*index*/ child_ctx[28],
		rindex0: /*product*/ child_ctx[0].options_with_values.length - /*index*/ child_ctx[28] - 1,
		length: /*product*/ child_ctx[0].options_with_values.length
	};

	child_ctx[25] = constants_0;
	const constants_1 = /*forloop*/ child_ctx[25].index0;
	child_ctx[26] = constants_1;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[29] = list[i];
	child_ctx[28] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[28] === 0,
		index: /*index*/ child_ctx[28] + 1,
		index0: /*index*/ child_ctx[28],
		last: /*index*/ child_ctx[28] === /*option*/ child_ctx[24].values.length - 1,
		rindex: /*option*/ child_ctx[24].values.length - /*index*/ child_ctx[28],
		rindex0: /*option*/ child_ctx[24].values.length - /*index*/ child_ctx[28] - 1,
		length: /*option*/ child_ctx[24].values.length
	};

	child_ctx[25] = constants_0;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[29] = list[i];
	child_ctx[28] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[28] === 0,
		index: /*index*/ child_ctx[28] + 1,
		index0: /*index*/ child_ctx[28],
		last: /*index*/ child_ctx[28] === /*option*/ child_ctx[24].values.length - 1,
		rindex: /*option*/ child_ctx[24].values.length - /*index*/ child_ctx[28],
		rindex0: /*option*/ child_ctx[24].values.length - /*index*/ child_ctx[28] - 1,
		length: /*option*/ child_ctx[24].values.length
	};

	child_ctx[25] = constants_0;
	return child_ctx;
}

// (677:16) {:else}
function create_else_block_1(ctx) {
	let div;
	let each_value_2 = /*option*/ ctx[24].values;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*product, selected_options*/ 5) {
				each_value_2 = /*option*/ ctx[24].values;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (650:16) {#if option.name == 'Color' }
function create_if_block(ctx) {
	let div;
	let each_value_1 = /*option*/ ctx[24].values;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "flex items-center space-x-3");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*product, selected_options*/ 5) {
				each_value_1 = /*option*/ ctx[24].values;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (697:24) {:else}
function create_else_block_2(ctx) {
	let input;
	let input_value_value;
	let mounted;
	let dispose;
	/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]] = [];

	function input_change_handler_3() {
		/*input_change_handler_3*/ ctx[15].call(input, /*option*/ ctx[24]);
	}

	return {
		c() {
			input = element("input");
			this.h();
		},
		l(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				name: true,
				class: true,
				"aria-labelledby": true
			});

			this.h();
		},
		h() {
			attr(input, "type", "radio");
			attr(input, "name", "size-choice");
			input.__value = input_value_value = /*value*/ ctx[29];
			input.value = input.__value;
			attr(input, "class", "sr-only");
			attr(input, "aria-labelledby", "size-choice-1-label");
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].push(input);
		},
		m(target, anchor) {
			insert_hydration(target, input, anchor);
			input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];

			if (!mounted) {
				dispose = listen(input, "change", input_change_handler_3);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*product*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[29])) {
				input.__value = input_value_value;
				input.value = input.__value;
			}

			if (dirty[0] & /*selected_options, product*/ 5) {
				input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].splice(/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};
}

// (695:24) {#if value == product.selected_or_first_available_variant.options[option_index] }
function create_if_block_2(ctx) {
	let input;
	let input_value_value;
	let mounted;
	let dispose;
	/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]] = [];

	function input_change_handler_2() {
		/*input_change_handler_2*/ ctx[14].call(input, /*option*/ ctx[24]);
	}

	return {
		c() {
			input = element("input");
			this.h();
		},
		l(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				name: true,
				class: true,
				"aria-labelledby": true
			});

			this.h();
		},
		h() {
			attr(input, "type", "radio");
			attr(input, "name", "size-choice");
			input.__value = input_value_value = /*value*/ ctx[29];
			input.value = input.__value;
			attr(input, "class", "sr-only");
			attr(input, "aria-labelledby", "size-choice-1-label");
			input.checked = true;
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].push(input);
		},
		m(target, anchor) {
			insert_hydration(target, input, anchor);
			input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];

			if (!mounted) {
				dispose = listen(input, "change", input_change_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*product*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[29])) {
				input.__value = input_value_value;
				input.value = input.__value;
			}

			if (dirty[0] & /*selected_options, product*/ 5) {
				input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].splice(/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};
}

// (679:18) {#each  option.values as value, index   }
function create_each_block_2(ctx) {
	let label;
	let t0;
	let p;
	let t1_value = /*value*/ ctx[29] + "";
	let t1;
	let t2;
	let div;
	let t3;

	function select_block_type_2(ctx, dirty) {
		if (/*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]) return create_if_block_2;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			label = element("label");
			if_block.c();
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = space();
			div = element("div");
			t3 = space();
			this.h();
		},
		l(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			if_block.l(label_nodes);
			t0 = claim_space(label_nodes);
			p = claim_element(label_nodes, "P", { id: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach);
			t2 = claim_space(label_nodes);
			div = claim_element(label_nodes, "DIV", { class: true, "aria-hidden": true });
			children(div).forEach(detach);
			t3 = claim_space(label_nodes);
			label_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "id", "size-choice-1-label");
			attr(div, "class", "absolute -inset-px rounded-md pointer-events-none");
			attr(div, "aria-hidden", "true");
			attr(label, "class", "group relative border rounded-md py-3 hover:bg-indigo-400 hover:text-white px-4 flex items-center justify-center text-sm font-medium uppercase focus:outline-none sm:flex-1 sm:py-6 bg-white shadow-sm cursor-pointer");
			toggle_class(label, "bg-indigo-600", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			toggle_class(label, "text-white", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			toggle_class(label, "text-gray-900", /*value*/ ctx[29] != /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
		},
		m(target, anchor) {
			insert_hydration(target, label, anchor);
			if_block.m(label, null);
			append_hydration(label, t0);
			append_hydration(label, p);
			append_hydration(p, t1);
			append_hydration(label, t2);
			append_hydration(label, div);
			append_hydration(label, t3);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(label, t0);
				}
			}

			if (dirty[0] & /*product*/ 1 && t1_value !== (t1_value = /*value*/ ctx[29] + "")) set_data(t1, t1_value);

			if (dirty[0] & /*product*/ 1) {
				toggle_class(label, "bg-indigo-600", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			}

			if (dirty[0] & /*product*/ 1) {
				toggle_class(label, "text-white", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			}

			if (dirty[0] & /*product*/ 1) {
				toggle_class(label, "text-gray-900", /*value*/ ctx[29] != /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
			if_block.d();
		}
	};
}

// (669:22) {:else}
function create_else_block(ctx) {
	let input;
	let input_value_value;
	let mounted;
	let dispose;
	/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]] = [];

	function input_change_handler_1() {
		/*input_change_handler_1*/ ctx[13].call(input, /*option*/ ctx[24]);
	}

	return {
		c() {
			input = element("input");
			this.h();
		},
		l(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				name: true,
				class: true,
				"aria-labelledby": true
			});

			this.h();
		},
		h() {
			attr(input, "type", "radio");
			attr(input, "name", "color-choice");
			input.__value = input_value_value = /*value*/ ctx[29];
			input.value = input.__value;
			attr(input, "class", "sr-only");
			attr(input, "aria-labelledby", "color-choice-0-label");
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].push(input);
		},
		m(target, anchor) {
			insert_hydration(target, input, anchor);
			input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];

			if (!mounted) {
				dispose = listen(input, "change", input_change_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*product*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[29])) {
				input.__value = input_value_value;
				input.value = input.__value;
			}

			if (dirty[0] & /*selected_options, product*/ 5) {
				input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].splice(/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};
}

// (667:22) {#if value == product.selected_or_first_available_variant.options[option_index] }
function create_if_block_1(ctx) {
	let input;
	let input_value_value;
	let mounted;
	let dispose;
	/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]] = [];

	function input_change_handler() {
		/*input_change_handler*/ ctx[11].call(input, /*option*/ ctx[24]);
	}

	return {
		c() {
			input = element("input");
			this.h();
		},
		l(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				name: true,
				class: true,
				"aria-labelledby": true
			});

			this.h();
		},
		h() {
			attr(input, "type", "radio");
			attr(input, "name", "color-choice");
			input.__value = input_value_value = /*value*/ ctx[29];
			input.value = input.__value;
			attr(input, "class", "sr-only");
			attr(input, "aria-labelledby", "color-choice-0-label");
			input.checked = true;
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].push(input);
		},
		m(target, anchor) {
			insert_hydration(target, input, anchor);
			input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];

			if (!mounted) {
				dispose = listen(input, "change", input_change_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*product*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[29])) {
				input.__value = input_value_value;
				input.value = input.__value;
			}

			if (dirty[0] & /*selected_options, product*/ 5) {
				input.checked = input.__value === /*selected_options*/ ctx[2][/*option*/ ctx[24].position];
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].splice(/*$$binding_groups*/ ctx[12][0][/*index*/ ctx[28]].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};
}

// (652:18) {#each  option.values as value, index   }
function create_each_block_1(ctx) {
	let label;
	let t0;
	let p;
	let t1_value = /*value*/ ctx[29] + "";
	let t1;
	let t2;
	let span;
	let t3;

	function select_block_type_1(ctx, dirty) {
		if (/*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			label = element("label");
			if_block.c();
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = space();
			span = element("span");
			t3 = space();
			this.h();
		},
		l(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			if_block.l(label_nodes);
			t0 = claim_space(label_nodes);
			p = claim_element(label_nodes, "P", { id: true, class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach);
			t2 = claim_space(label_nodes);
			span = claim_element(label_nodes, "SPAN", { "aria-hidden": true, class: true });
			children(span).forEach(detach);
			t3 = claim_space(label_nodes);
			label_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "id", "color-choice-0-label");
			attr(p, "class", "sr-only");
			attr(span, "aria-hidden", "true");
			attr(span, "class", "h-8 w-8 bg-white border border-black border-opacity-10 rounded-full");
			attr(label, "class", "-m-0.5 relative p-0.5 rounded-full flex items-center justify-center cursor-pointer focus:outline-none ring-gray-400");
			toggle_class(label, "ring", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			toggle_class(label, "ring-offset-1", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
		},
		m(target, anchor) {
			insert_hydration(target, label, anchor);
			if_block.m(label, null);
			append_hydration(label, t0);
			append_hydration(label, p);
			append_hydration(p, t1);
			append_hydration(label, t2);
			append_hydration(label, span);
			append_hydration(label, t3);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(label, t0);
				}
			}

			if (dirty[0] & /*product*/ 1 && t1_value !== (t1_value = /*value*/ ctx[29] + "")) set_data(t1, t1_value);

			if (dirty[0] & /*product*/ 1) {
				toggle_class(label, "ring", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			}

			if (dirty[0] & /*product*/ 1) {
				toggle_class(label, "ring-offset-1", /*value*/ ctx[29] == /*product*/ ctx[0].selected_or_first_available_variant.options[/*option_index*/ ctx[26]]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
			if_block.d();
		}
	};
}

// (632:12) {#each  product.options_with_values as option, index   }
function create_each_block(ctx) {
	let h3;
	let t0;
	let t1_value = /*option*/ ctx[24].name + "";
	let t1;
	let t2;
	let fieldset;
	let legend;
	let t3;
	let t4_value = /*option*/ ctx[24].name + "";
	let t4;
	let t5;
	let t6;

	function select_block_type(ctx, dirty) {
		if (/*option*/ ctx[24].name == 'Color') return create_if_block;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			h3 = element("h3");
			t0 = text("Choose a ");
			t1 = text(t1_value);
			t2 = space();
			fieldset = element("fieldset");
			legend = element("legend");
			t3 = text("Choose a ");
			t4 = text(t4_value);
			t5 = space();
			if_block.c();
			t6 = space();
			this.h();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Choose a ");
			t1 = claim_text(h3_nodes, t1_value);
			h3_nodes.forEach(detach);
			t2 = claim_space(nodes);
			fieldset = claim_element(nodes, "FIELDSET", { class: true });
			var fieldset_nodes = children(fieldset);
			legend = claim_element(fieldset_nodes, "LEGEND", { class: true });
			var legend_nodes = children(legend);
			t3 = claim_text(legend_nodes, "Choose a ");
			t4 = claim_text(legend_nodes, t4_value);
			legend_nodes.forEach(detach);
			t5 = claim_space(fieldset_nodes);
			if_block.l(fieldset_nodes);
			t6 = claim_space(fieldset_nodes);
			fieldset_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h3, "class", "text-sm text-gray-900 font-medium mt-4");
			attr(legend, "class", "sr-only");
			attr(fieldset, "class", "mt-4");
		},
		m(target, anchor) {
			insert_hydration(target, h3, anchor);
			append_hydration(h3, t0);
			append_hydration(h3, t1);
			insert_hydration(target, t2, anchor);
			insert_hydration(target, fieldset, anchor);
			append_hydration(fieldset, legend);
			append_hydration(legend, t3);
			append_hydration(legend, t4);
			append_hydration(fieldset, t5);
			if_block.m(fieldset, null);
			append_hydration(fieldset, t6);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*product*/ 1 && t1_value !== (t1_value = /*option*/ ctx[24].name + "")) set_data(t1, t1_value);
			if (dirty[0] & /*product*/ 1 && t4_value !== (t4_value = /*option*/ ctx[24].name + "")) set_data(t4, t4_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(fieldset, t6);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t2);
			if (detaching) detach(fieldset);
			if_block.d();
		}
	};
}

function create_fragment(ctx) {
	let breadcrumbs;
	let t0;
	let div11;
	let div10;
	let div9;
	let div1;
	let imagegallery;
	let t1;
	let div0;
	let t2;
	let h10;
	let t3_value = /*section*/ ctx[3].settings.product_title + "";
	let t3;
	let t4;
	let div4;
	let h11;
	let t5_value = /*product*/ ctx[0].title + "";
	let t5;
	let t6;
	let h2;
	let t7;
	let t8;
	let p;
	let t9;
	let t10;
	let form;
	let html_tag;
	let raw0_value = /*form_inputs_f58d08b6b*/ ctx[5][0] + "";
	let t11;
	let input;
	let input_value_value;
	let t12;
	let div2;
	let t13;
	let div3;
	let label;
	let t14;
	let t15;
	let quantitybox;
	let updating_quantity;
	let t16;
	let button;
	let t17;
	let t18;
	let div8;
	let div7;
	let h3;
	let t19;
	let t20;
	let div6;
	let div5;
	let raw1_value = (/*product*/ ctx[0].description || '') + "";
	let current;
	breadcrumbs = new Breadcrumbs_1({});
	imagegallery = new Image_gallery({});
	let each_value = /*product*/ ctx[0].options_with_values;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function quantitybox_quantity_binding(value) {
		/*quantitybox_quantity_binding*/ ctx[16](value);
	}

	let quantitybox_props = {};

	if (/*quantity*/ ctx[4] !== void 0) {
		quantitybox_props.quantity = /*quantity*/ ctx[4];
	}

	quantitybox = new Quantity_box({ props: quantitybox_props });
	binding_callbacks.push(() => bind(quantitybox, 'quantity', quantitybox_quantity_binding));

	let form_levels = [
		{ class: "mt-10" },
		{
			.../*form_props_f58d08b6b*/ ctx[6][0],
			class: "mt-10" + " " + /*form_props_f58d08b6b*/ ctx[6][0]?.class
		}
	];

	let form_data = {};

	for (let i = 0; i < form_levels.length; i += 1) {
		form_data = assign(form_data, form_levels[i]);
	}

	return {
		c() {
			create_component(breadcrumbs.$$.fragment);
			t0 = space();
			div11 = element("div");
			div10 = element("div");
			div9 = element("div");
			div1 = element("div");
			create_component(imagegallery.$$.fragment);
			t1 = space();
			div0 = element("div");
			t2 = space();
			h10 = element("h1");
			t3 = text(t3_value);
			t4 = space();
			div4 = element("div");
			h11 = element("h1");
			t5 = text(t5_value);
			t6 = space();
			h2 = element("h2");
			t7 = text("Product information");
			t8 = space();
			p = element("p");
			t9 = text(/*price_formatted*/ ctx[1]);
			t10 = space();
			form = element("form");
			html_tag = new HtmlTagHydration(false);
			t11 = space();
			input = element("input");
			t12 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t13 = space();
			div3 = element("div");
			label = element("label");
			t14 = text("Quantity");
			t15 = space();
			create_component(quantitybox.$$.fragment);
			t16 = space();
			button = element("button");
			t17 = text("Add to bag");
			t18 = space();
			div8 = element("div");
			div7 = element("div");
			h3 = element("h3");
			t19 = text("Description");
			t20 = space();
			div6 = element("div");
			div5 = element("div");
			this.h();
		},
		l(nodes) {
			claim_component(breadcrumbs.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div11 = claim_element(nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			div10 = claim_element(div11_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div1 = claim_element(div9_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(imagegallery.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t2 = claim_space(div1_nodes);
			h10 = claim_element(div1_nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t3 = claim_text(h10_nodes, t3_value);
			h10_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t4 = claim_space(div9_nodes);
			div4 = claim_element(div9_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			h11 = claim_element(div4_nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t5 = claim_text(h11_nodes, t5_value);
			h11_nodes.forEach(detach);
			t6 = claim_space(div4_nodes);
			h2 = claim_element(div4_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t7 = claim_text(h2_nodes, "Product information");
			h2_nodes.forEach(detach);
			t8 = claim_space(div4_nodes);
			p = claim_element(div4_nodes, "P", { class: true });
			var p_nodes = children(p);
			t9 = claim_text(p_nodes, /*price_formatted*/ ctx[1]);
			p_nodes.forEach(detach);
			t10 = claim_space(div4_nodes);
			form = claim_element(div4_nodes, "FORM", { class: true });
			var form_nodes = children(form);
			html_tag = claim_html_tag(form_nodes, false);
			t11 = claim_space(form_nodes);
			input = claim_element(form_nodes, "INPUT", { type: true, name: true });
			t12 = claim_space(form_nodes);
			div2 = claim_element(form_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			div2_nodes.forEach(detach);
			t13 = claim_space(form_nodes);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			label = claim_element(div3_nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			t14 = claim_text(label_nodes, "Quantity");
			label_nodes.forEach(detach);
			t15 = claim_space(div3_nodes);
			claim_component(quantitybox.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach);
			t16 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t17 = claim_text(button_nodes, "Add to bag");
			button_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t18 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div7 = claim_element(div8_nodes, "DIV", {});
			var div7_nodes = children(div7);
			h3 = claim_element(div7_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t19 = claim_text(h3_nodes, "Description");
			h3_nodes.forEach(detach);
			t20 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			div9_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "h-8 md:h-20");
			attr(h10, "class", "text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl");
			attr(div1, "class", "lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8");
			attr(h11, "class", "text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl");
			attr(h2, "class", "sr-only");
			attr(p, "class", "text-3xl text-gray-900 mt-4");
			html_tag.a = t11;
			attr(input, "type", "hidden");
			attr(input, "name", "id");
			input.value = input_value_value = /*product*/ ctx[0].selected_or_first_available_variant.id;
			attr(div2, "class", "");
			attr(label, "class", "text-base");
			attr(div3, "class", "mt-10");
			attr(button, "type", "submit");
			attr(button, "class", "mt-10 w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500");
			set_attributes(form, form_data);
			attr(div4, "class", "mt-4 lg:mt-0 lg:row-span-3");
			attr(h3, "class", "sr-only");
			attr(div5, "class", "text-base text-gray-900");
			attr(div6, "class", "space-y-6");
			attr(div8, "class", "py-10 lg:pt-6 lg:pb-16 lg:col-start-1 lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8");
			attr(div9, "class", "max-w-2xl mx-auto pt-10 pb-16 px-4 sm:px-6 lg:max-w-7xl lg:pt-16 lg:pb-24 lg:px-8 lg:grid lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8");
			attr(div10, "class", "pt-6");
			attr(div11, "class", "");
		},
		m(target, anchor) {
			mount_component(breadcrumbs, target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div11, anchor);
			append_hydration(div11, div10);
			append_hydration(div10, div9);
			append_hydration(div9, div1);
			mount_component(imagegallery, div1, null);
			append_hydration(div1, t1);
			append_hydration(div1, div0);
			append_hydration(div1, t2);
			append_hydration(div1, h10);
			append_hydration(h10, t3);
			append_hydration(div9, t4);
			append_hydration(div9, div4);
			append_hydration(div4, h11);
			append_hydration(h11, t5);
			append_hydration(div4, t6);
			append_hydration(div4, h2);
			append_hydration(h2, t7);
			append_hydration(div4, t8);
			append_hydration(div4, p);
			append_hydration(p, t9);
			append_hydration(div4, t10);
			append_hydration(div4, form);
			html_tag.m(raw0_value, form);
			append_hydration(form, t11);
			append_hydration(form, input);
			append_hydration(form, t12);
			append_hydration(form, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append_hydration(form, t13);
			append_hydration(form, div3);
			append_hydration(div3, label);
			append_hydration(label, t14);
			append_hydration(div3, t15);
			mount_component(quantitybox, div3, null);
			append_hydration(form, t16);
			append_hydration(form, button);
			append_hydration(button, t17);
			append_hydration(div9, t18);
			append_hydration(div9, div8);
			append_hydration(div8, div7);
			append_hydration(div7, h3);
			append_hydration(h3, t19);
			append_hydration(div7, t20);
			append_hydration(div7, div6);
			append_hydration(div6, div5);
			div5.innerHTML = raw1_value;
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*section*/ 8) && t3_value !== (t3_value = /*section*/ ctx[3].settings.product_title + "")) set_data(t3, t3_value);
			if ((!current || dirty[0] & /*product*/ 1) && t5_value !== (t5_value = /*product*/ ctx[0].title + "")) set_data(t5, t5_value);
			if (!current || dirty[0] & /*price_formatted*/ 2) set_data(t9, /*price_formatted*/ ctx[1]);

			if (!current || dirty[0] & /*product*/ 1 && input_value_value !== (input_value_value = /*product*/ ctx[0].selected_or_first_available_variant.id)) {
				input.value = input_value_value;
			}

			if (dirty[0] & /*product, selected_options*/ 5) {
				each_value = /*product*/ ctx[0].options_with_values;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const quantitybox_changes = {};

			if (!updating_quantity && dirty[0] & /*quantity*/ 16) {
				updating_quantity = true;
				quantitybox_changes.quantity = /*quantity*/ ctx[4];
				add_flush_callback(() => updating_quantity = false);
			}

			quantitybox.$set(quantitybox_changes);

			set_attributes(form, form_data = get_spread_update(form_levels, [
				{ class: "mt-10" },
				{
					.../*form_props_f58d08b6b*/ ctx[6][0],
					class: "mt-10" + " " + /*form_props_f58d08b6b*/ ctx[6][0]?.class
				}
			]));

			if ((!current || dirty[0] & /*product*/ 1) && raw1_value !== (raw1_value = (/*product*/ ctx[0].description || '') + "")) div5.innerHTML = raw1_value;		},
		i(local) {
			if (current) return;
			transition_in(breadcrumbs.$$.fragment, local);
			transition_in(imagegallery.$$.fragment, local);
			transition_in(quantitybox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(breadcrumbs.$$.fragment, local);
			transition_out(imagegallery.$$.fragment, local);
			transition_out(quantitybox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(breadcrumbs, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div11);
			destroy_component(imagegallery);
			destroy_each(each_blocks, detaching);
			destroy_component(quantitybox);
		}
	};
}

function fc(e, t, r) {
	const n = e.find(e => e === t);

	return n || e.reduce((e, n) => {
		let o = Math.abs(e - t), i = Math.abs(n - t);

		return "higher" === r
		? n > t && i <= o ? n : e
		: "lower" === r ? n < t && i <= o ? n : e : void 0;
	});
}

function instance($$self, $$props, $$invalidate) {
	let { importsSeek = 'lower' } = $$props;
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const cic = window.cicR;
	let form_inputs_f58d08b6b = themeImports['form_inputs_f58d08b6b'];
	let form_props_f58d08b6b = themeImports['form_props_f58d08b6b'];
	let { price_formatted = themeImports['price_formatted'].find(e => e.component_index == fc(themeImports['price_formatted'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { product = themeImports['product'].find(e => e.component_index == fc(themeImports['product'].map(e => e.component_index), cic, importsSeek)).value } = $$props;
	let { productƒƒoptions_with_values } = $$props;

	try {
		product = product || {};
	} catch(e) {
		
	} /*whatever*/

	product.options_with_values = themeImports['productƒƒoptions_with_values'].find(e => e.component_index == fc(themeImports['productƒƒoptions_with_values'].map(e => e.component_index), cic, importsSeek)).value;
	let section = {};
	let { sectionƒƒsettings } = $$props;

	try {
		section = section || {};
	} catch(e) {
		
	} /*whatever*/

	section.settings = themeImports['sectionƒƒsettings'].find(e => e.component_index == fc(themeImports['sectionƒƒsettings'].map(e => e.component_index), cic, importsSeek)).value;
	let { productƒƒselected_or_first_available_variant } = $$props;

	try {
		product = product || {};
	} catch(e) {
		
	} /*whatever*/

	product.selected_or_first_available_variant = themeImports['productƒƒselected_or_first_available_variant'].find(e => e.component_index == fc(themeImports['productƒƒselected_or_first_available_variant'].map(e => e.component_index), cic, importsSeek)).value;
	const JSTRFY = JSON.stringify;
	let selected_options = [null, ...product.selected_or_first_available_variant.options];
	let quantity;
	product.options_with_values[0].values[0];
	const $$binding_groups = [[]];

	function input_change_handler(option) {
		selected_options[option.position] = this.__value;
		$$invalidate(2, selected_options);
	}

	function input_change_handler_1(option) {
		selected_options[option.position] = this.__value;
		$$invalidate(2, selected_options);
	}

	function input_change_handler_2(option) {
		selected_options[option.position] = this.__value;
		$$invalidate(2, selected_options);
	}

	function input_change_handler_3(option) {
		selected_options[option.position] = this.__value;
		$$invalidate(2, selected_options);
	}

	function quantitybox_quantity_binding(value) {
		quantity = value;
		$$invalidate(4, quantity);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(23, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('importsSeek' in $$new_props) $$invalidate(7, importsSeek = $$new_props.importsSeek);
		if ('price_formatted' in $$new_props) $$invalidate(1, price_formatted = $$new_props.price_formatted);
		if ('product' in $$new_props) $$invalidate(0, product = $$new_props.product);
		if ('productƒƒoptions_with_values' in $$new_props) $$invalidate(8, productƒƒoptions_with_values = $$new_props.productƒƒoptions_with_values);
		if ('sectionƒƒsettings' in $$new_props) $$invalidate(9, sectionƒƒsettings = $$new_props.sectionƒƒsettings);
		if ('productƒƒselected_or_first_available_variant' in $$new_props) $$invalidate(10, productƒƒselected_or_first_available_variant = $$new_props.productƒƒselected_or_first_available_variant);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*product, selected_options*/ 5) {
			$$invalidate(0, product = {
				...product,
				selected_or_first_available_variant: product.variants.find(v => JSTRFY(v.options) == JSTRFY(selected_options.slice(1)))
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		product,
		price_formatted,
		selected_options,
		section,
		quantity,
		form_inputs_f58d08b6b,
		form_props_f58d08b6b,
		importsSeek,
		productƒƒoptions_with_values,
		sectionƒƒsettings,
		productƒƒselected_or_first_available_variant,
		input_change_handler,
		$$binding_groups,
		input_change_handler_1,
		input_change_handler_2,
		input_change_handler_3,
		quantitybox_quantity_binding
	];
}

class Main_product extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				importsSeek: 7,
				price_formatted: 1,
				product: 0,
				productƒƒoptions_with_values: 8,
				sectionƒƒsettings: 9,
				productƒƒselected_or_first_available_variant: 10
			},
			null,
			[-1, -1]
		);
	}
}

export { Main_product as default };
