import { SvelteComponent, init, safe_not_equal, space, empty, claim_space, insert_hydration, noop, detach, getContext, svg_element, claim_svg_element, children, attr, append_hydration, xlink_attr, text, claim_text, set_style, element, claim_element, toggle_class, group_outros, transition_out, check_outros, transition_in, create_slot, update_slot_base, get_all_dirty_from_scope, get_slot_changes, create_component, claim_component, mount_component, destroy_component, onMount, destroy_each, set_input_value, listen, to_number, run_all, createEventDispatcher, update_keyed_each, outro_and_destroy_block, set_data, src_url_equal, HtmlTagHydration, claim_html_tag } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import { loading, cartStore } from './store.js-hs6c336c77.liquivelte.js';
import { f7ready, f7 } from './framework7-liquivelte-hsa0091f48.liquivelte.js';
import { Accordion_content } from './framework7-liquivelte-accordion-content-hs8daa1a0c.liquivelte.js';
import { List_item } from './framework7-liquivelte-list-item-hs8daa1a0c.liquivelte.js';
import { List } from './framework7-liquivelte-list-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-get-params-hs6b273664.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs8daa1a0c.liquivelte.js';
import { View } from './framework7-liquivelte-view-hs8daa1a0c.liquivelte.js';
import { Block_title } from './framework7-liquivelte-block-title-hs8daa1a0c.liquivelte.js';
import { Block } from './framework7-liquivelte-block-hs8daa1a0c.liquivelte.js';
import { Page } from './framework7-liquivelte-page-hs8daa1a0c.liquivelte.js';
import { Stepper } from './framework7-liquivelte-stepper-hs8daa1a0c.liquivelte.js';
import { Panel } from './framework7-liquivelte-panel-hs8daa1a0c.liquivelte.js';
import { Appbar } from './framework7-liquivelte-appbar-hs8daa1a0c.liquivelte.js';
import { Badge } from './framework7-liquivelte-badge-hs8daa1a0c.liquivelte.js';
import { Button } from './framework7-liquivelte-button-hs8daa1a0c.liquivelte.js';
import { Link } from './framework7-liquivelte-link-hs8daa1a0c.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/icon.liquivelte generated by Svelte v3.50.0 */

function create_if_block_115(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M7.67998 20.629L1.28002 16.723C0.886205 16.4784 0.561675 16.1368 0.337572 15.731C0.113468 15.3251 -0.00274623 14.8686 -1.39464e-05 14.405V6.59497C-0.00238367 6.13167 0.113819 5.6755 0.33751 5.26978C0.561202 4.86405 0.884959 4.52227 1.278 4.27698L7.67796 0.377014C8.07524 0.131403 8.53292 0.000877102 8.99999 9.73346e-08C9.46678 -0.000129605 9.92446 0.129369 10.322 0.374024V0.374024L16.722 4.27399C17.1163 4.51985 17.4409 4.86287 17.6647 5.27014C17.8885 5.67742 18.0039 6.13529 18 6.59998V14.409C18.0026 14.8725 17.8864 15.3289 17.6625 15.7347C17.4386 16.1405 17.1145 16.4821 16.721 16.727L10.321 20.633C9.92264 20.8742 9.46565 21.0012 8.99999 21C8.53428 20.9998 8.07761 20.8714 7.67998 20.629V20.629ZM8.72398 2.078L2.32396 5.97803C2.22303 6.04453 2.14066 6.13551 2.08452 6.24255C2.02838 6.34959 2.00031 6.46919 2.00298 6.59003V14.4C2.00026 14.5205 2.02818 14.6396 2.08415 14.7463C2.14013 14.853 2.22233 14.9438 2.32298 15.01L7.99999 18.48V10.919C8.00113 10.5997 8.08851 10.2867 8.25292 10.0129C8.41732 9.73922 8.65267 9.51501 8.93401 9.36401L15.446 5.841L9.28001 2.08002C9.19614 2.02738 9.09901 1.99962 8.99999 2C8.90251 1.99972 8.8069 2.02674 8.72398 2.078V2.078Z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-3d-model");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 18 21");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (27:0) {#if name == 'icon-accordion' }
function create_if_block_114(ctx) {
	return { c: noop, l: noop, m: noop, d: noop };
}

// (29:0) {#if name == 'icon-account' }
function create_if_block_113(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M6 4.5a3 3 0 116 0 3 3 0 01-6 0zm3-4a4 4 0 100 8 4 4 0 000-8zm5.58 12.15c1.12.82 1.83 2.24 1.91 4.85H1.51c.08-2.6.79-4.03 1.9-4.85C4.66 11.75 6.5 11.5 9 11.5s4.35.26 5.58 1.15zM9 10.5c-2.5 0-4.65.24-6.17 1.35C1.27 12.98.5 14.93.5 18v.5h17V18c0-3.07-.77-5.02-2.33-6.15-1.52-1.1-3.67-1.35-6.17-1.35z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-account");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 18 19");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (34:0) {#if name == 'icon-amazon_payments' }
function create_if_block_112(ctx) {
	let svg;
	let g;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			g = claim_svg_element(svg_nodes, "g", {
				fill: true,
				stroke: true,
				"fill-rule": true
			});

			var g_nodes = children(g);
			path0 = claim_svg_element(g_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(g_nodes, "path", { d: true });
			children(path1).forEach(detach);
			g_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M16.045 4.256c-1.366 0-2.655.434-3.866 1.303v7.906c1.23.908 2.5 1.36 3.809 1.36 2.654 0 3.981-1.756 3.981-5.27 0-3.533-1.308-5.3-3.924-5.3zm-4.069-.369a8.122 8.122 0 0 1 2.338-1.417 6.957 6.957 0 0 1 2.539-.481c.924 0 1.76.17 2.51.51.75.34 1.385.83 1.904 1.473.52.642.919 1.422 1.198 2.338.279.917.419 1.95.419 3.103 0 1.172-.15 2.23-.448 3.174-.298.945-.716 1.748-1.255 2.409a5.651 5.651 0 0 1-1.962 1.545c-.77.368-1.626.552-2.568.552-1.731 0-3.222-.558-4.472-1.672v6.63c0 .38-.192.568-.577.568H9.899c-.384 0-.576-.189-.576-.567V2.98c0-.377.192-.567.576-.567h1.27c.385 0 .606.19.664.567l.143.907zM30.097 15.024c.635 0 1.298-.122 1.99-.368a7.568 7.568 0 0 0 1.992-1.077v-2.89c-.48-.114-.986-.203-1.515-.27-.53-.066-1.043-.1-1.544-.1-2.174 0-3.26.823-3.26 2.466 0 .719.202 1.272.606 1.658.403.388.98.581 1.731.581zM26.721 4.88l-.216.07a.793.793 0 0 1-.246.044c-.25 0-.375-.17-.375-.511v-.765c0-.264.039-.449.115-.553.077-.103.232-.202.462-.297.616-.264 1.375-.477 2.28-.638.904-.16 1.808-.24 2.712-.24 1.827 0 3.174.368 4.04 1.104.866.737 1.299 1.88 1.299 3.43v9.691c0 .379-.193.567-.578.567h-1.24c-.367 0-.578-.18-.636-.538l-.144-.935a7.933 7.933 0 0 1-2.293 1.36 6.927 6.927 0 0 1-2.496.481c-1.385 0-2.482-.382-3.29-1.147-.808-.766-1.212-1.79-1.212-3.075 0-1.379.5-2.48 1.5-3.3 1.001-.823 2.348-1.234 4.04-1.234 1.078 0 2.29.16 3.636.482v-1.87c0-1.021-.23-1.739-.693-2.154-.462-.416-1.27-.624-2.423-.624-1.347 0-2.76.217-4.242.652zM46.168 19.303c-.52 1.304-1.12 2.239-1.803 2.806-.683.567-1.572.85-2.669.85a6.224 6.224 0 0 1-1.644-.199c-.213-.056-.367-.146-.462-.269-.097-.123-.145-.316-.145-.58v-.737c0-.359.145-.538.433-.538.096 0 .24.018.433.056.192.037.452.057.779.057.73 0 1.299-.17 1.703-.51.403-.34.769-.964 1.096-1.871l.548-1.445-5.569-13.49c-.135-.32-.201-.547-.201-.68 0-.226.134-.34.404-.34h1.73c.308 0 .52.048.636.142.115.095.23.303.345.624l4.04 10.995 3.895-10.995c.116-.321.231-.53.346-.624.116-.094.327-.142.636-.142h1.615c.27 0 .404.114.404.34 0 .133-.068.36-.202.68l-6.348 15.87M52.463 29.396c-6.102 4.423-14.948 6.775-22.566 6.775-10.675 0-20.29-3.876-27.564-10.328-.572-.507-.062-1.198.625-.806 7.849 4.486 17.555 7.187 27.58 7.187 6.763 0 14.197-1.378 21.038-4.228 1.031-.43 1.896.668.887 1.4");
			attr(path1, "d", "M55.002 26.55c-.78-.982-5.159-.466-7.126-.234-.596.07-.688-.442-.151-.812 3.493-2.41 9.216-1.714 9.881-.907.67.814-.176 6.45-3.449 9.139-.504.413-.982.192-.76-.354.737-1.806 2.386-5.85 1.605-6.833");
			attr(g, "fill", "#333E48");
			attr(g, "stroke", "null");
			attr(g, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-amazon_payments");
			attr(svg, "viewBox", "0 0 60 38");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, g);
			append_hydration(g, path0);
			append_hydration(g, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (37:0) {#if name == 'icon-american_express' }
function create_if_block_111(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M8.373 7.623v-.46H6.606V9.37h1.767v-.453h-1.24v-.44H8.34v-.453H7.133v-.4zm2.487.134c0-.247-.1-.393-.267-.487-.173-.1-.367-.107-.64-.107H8.74v2.213h.527v-.807h.567c.193 0 .307.02.387.093.093.107.087.3.087.433v.28h.533v-.433c0-.2-.013-.293-.087-.407a.629.629 0 0 0-.26-.187.638.638 0 0 0 .367-.593zm-.693.313c-.073.047-.16.047-.26.047h-.64v-.493h.653c.093 0 .187.007.253.04s.113.1.113.193c-.007.1-.047.173-.12.213zm-8.874.813h1.1l.2.493h1.073V7.643l.767 1.733H4.9l.767-1.733v1.733h.54V7.163h-.873l-.633 1.5-.693-1.5h-.86v2.093l-.9-2.093h-.787L.574 9.23v.14h.513l.207-.487zm.547-1.346l.36.88h-.72l.36-.88zm11.22.1h.5v-.473h-.513c-.367 0-.633.08-.8.26-.227.24-.287.533-.287.867 0 .4.093.653.28.847.147.2.413.273.767.247h.62l.2-.493h1.1l.207.493h1.073v-1.66l1 1.66h.747V7.172h-.54v1.54l-.927-1.54h-.807v2.093l-.893-2.093H14l-.747 1.74h-.24c-.14 0-.287-.027-.367-.113-.1-.113-.147-.28-.147-.52 0-.233.06-.407.153-.5.107-.113.213-.14.407-.14zm1.32-.1l.367.88h-.727l.36-.88zm-3.213-.374h.54v2.213h-.54V7.163zm1.96 4.4a.522.522 0 0 0-.273-.493c-.173-.093-.367-.107-.633-.107h-1.22v2.213h.533v-.807h.567c.193 0 .313.02.387.1.1.1.087.3.087.433v.273h.533v-.44c0-.193-.013-.293-.087-.407a.585.585 0 0 0-.26-.187.61.61 0 0 0 .367-.58zm-.694.314a.534.534 0 0 1-.26.047h-.64v-.493h.653c.093 0 .187 0 .253.04.067.033.107.107.107.2s-.047.167-.113.207zM9.86 10.97H8.173l-.673.727-.653-.727h-2.12v2.213H6.82l.673-.733.653.733h1.027v-.74h.66c.46 0 .92-.127.92-.74-.007-.62-.473-.733-.893-.733zm-3.313 1.747H5.254v-.44h1.16v-.453h-1.16v-.4h1.327l.58.647-.613.647zm2.1.26l-.813-.9.813-.873v1.773zm1.206-.987h-.68v-.56h.687c.193 0 .32.08.32.273 0 .187-.127.287-.327.287zm5.327-.567v-.453h-1.76v2.207h1.76v-.46h-1.233v-.44h1.207v-.453h-1.207v-.4zm4.127.647a.171.171 0 0 0-.047-.053c-.12-.12-.313-.173-.6-.18l-.287-.007a.623.623 0 0 1-.207-.027.169.169 0 0 1-.113-.167c0-.073.02-.12.08-.16.053-.033.12-.04.213-.04h.96v-.473h-1.053c-.553 0-.76.34-.76.66 0 .7.62.667 1.113.687.093 0 .147.013.187.047s.067.08.067.147c0 .06-.027.107-.06.147-.04.04-.113.053-.213.053h-1.013v.473h1.02c.34 0 .587-.093.72-.28a.724.724 0 0 0 .113-.413c-.007-.193-.047-.313-.12-.413zm-.774 1.54h-1.367v-.2c-.16.127-.447.2-.72.2h-4.313v-.713c0-.087-.007-.093-.093-.093h-.067v.807h-1.42v-.833c-.24.1-.507.113-.733.107h-.167v.733h-1.72l-.427-.48-.447.48H4.246v-3.087h2.847l.407.473.433-.473H9.84c.22 0 .58.02.747.18v-.18h1.707c.16 0 .507.033.713.18v-.18h2.58v.18c.127-.12.4-.18.633-.18h1.447v.18c.153-.107.367-.18.66-.18h.98V.258H.574v7.78l.573-1.313h1.38l.18.367v-.367H4.32l.353.793.347-.793h5.127c.233 0 .44.047.593.18v-.18h1.407v.18c.24-.133.54-.18.88-.18h2.033l.187.367v-.367h1.507l.207.367v-.367h1.467v3.08h-1.48l-.28-.467v.467h-1.853l-.2-.493h-.453l-.207.493h-.96c-.38 0-.66-.087-.847-.187v.187h-2.28v-.7c0-.1-.02-.107-.08-.107h-.087v.807H5.288v-.38l-.16.38h-.92l-.16-.38v.373H2.275l-.2-.493h-.453l-.207.493h-.84v9.313h18.727v-5.653c-.207.113-.487.153-.767.153zm-2.013-.907h-1.027v.473h1.027c.533 0 .827-.22.827-.7 0-.227-.053-.36-.16-.467-.12-.12-.313-.173-.607-.18l-.287-.007a.623.623 0 0 1-.207-.027.169.169 0 0 1-.113-.167c0-.073.02-.12.08-.16.053-.033.113-.04.213-.04h.967v-.473h-1.06c-.553 0-.753.34-.753.66 0 .7.62.667 1.113.687.093 0 .147.013.187.047.033.033.067.08.067.147 0 .06-.027.107-.06.147-.033.047-.107.06-.207.06z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-american_express");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (40:0) {#if name == 'icon-apple_pay' }
function create_if_block_110(ctx) {
	let svg;
	let defs;
	let path0;
	let path1;
	let g1;
	let mask0;
	let use0;
	let path2;
	let g0;
	let mask1;
	let use1;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			defs = svg_element("defs");
			path0 = svg_element("path");
			path1 = svg_element("path");
			g1 = svg_element("g");
			mask0 = svg_element("mask");
			use0 = svg_element("use");
			path2 = svg_element("path");
			g0 = svg_element("g");
			mask1 = svg_element("mask");
			use1 = svg_element("use");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			defs = claim_svg_element(svg_nodes, "defs", {});
			var defs_nodes = children(defs);
			path0 = claim_svg_element(defs_nodes, "path", { d: true, id: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(defs_nodes, "path", { d: true, id: true });
			children(path1).forEach(detach);
			defs_nodes.forEach(detach);
			g1 = claim_svg_element(svg_nodes, "g", { fill: true, "fill-rule": true });
			var g1_nodes = children(g1);
			mask0 = claim_svg_element(g1_nodes, "mask", { id: true, fill: true });
			var mask0_nodes = children(mask0);
			use0 = claim_svg_element(mask0_nodes, "use", { "xlink:href": true });
			children(use0).forEach(detach);
			mask0_nodes.forEach(detach);
			path2 = claim_svg_element(g1_nodes, "path", { fill: true, mask: true, d: true });
			children(path2).forEach(detach);
			g0 = claim_svg_element(g1_nodes, "g", { transform: true });
			var g0_nodes = children(g0);
			mask1 = claim_svg_element(g0_nodes, "mask", { id: true, fill: true });
			var mask1_nodes = children(mask1);
			use1 = claim_svg_element(mask1_nodes, "use", { "xlink:href": true });
			children(use1).forEach(detach);
			mask1_nodes.forEach(detach);
			path3 = claim_svg_element(g0_nodes, "path", { fill: true, mask: true, d: true });
			children(path3).forEach(detach);
			g0_nodes.forEach(detach);
			g1_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M5.711 0c-.21 0-.415.004-.623.01a9.313 9.313 0 0 0-1.354.116c-.453.08-.875.21-1.287.415-.404.2-.775.464-1.096.777A4.249 4.249 0 0 0 .13 3.645a8.13 8.13 0 0 0-.12 1.32c-.007.202-.01.405-.01.607v33.854c0 .202.004.404.01.607.012.44.04.886.12 1.322.08.44.214.853.425 1.255a4.27 4.27 0 0 0 1.891 1.848c.412.205.834.335 1.287.414.447.078.902.106 1.354.117.208.004.414.007.623.007.244.004.49.004.738.004h59.104c.245 0 .492 0 .738-.002.207 0 .414-.004.622-.007.452-.013.907-.04 1.355-.118a4.69 4.69 0 0 0 1.287-.414 4.293 4.293 0 0 0 1.893-1.847c.21-.403.343-.815.423-1.257.08-.437.108-.882.12-1.323.005-.202.006-.405.01-.606V5.574c-.003-.202-.005-.405-.01-.607a8.873 8.873 0 0 0-.12-1.32 4.421 4.421 0 0 0-.424-1.257A4.273 4.273 0 0 0 69.554.542a4.736 4.736 0 0 0-1.287-.414 9.479 9.479 0 0 0-1.354-.115c-.208-.005-.415-.007-.622-.01h-.738V0H5.711zm.004 44.059c-.202 0-.403-.004-.6-.007a8.678 8.678 0 0 1-1.21-.103 3.575 3.575 0 0 1-1.024-.327c-.315-.156-.6-.36-.853-.605a3.306 3.306 0 0 1-.62-.833 3.493 3.493 0 0 1-.333-1 7.744 7.744 0 0 1-.104-1.178 28.63 28.63 0 0 1-.01-.586V5.581c0-.197.004-.392.01-.59.01-.356.03-.776.104-1.18.07-.374.175-.69.335-1a3.351 3.351 0 0 1 1.47-1.434c.314-.155.64-.26 1.022-.326A8.106 8.106 0 0 1 5.113.946c.2-.004.4-.006.6-.007l.735-.003h59.103l.002.001.73.003c.202 0 .402.003.604.008.366.01.797.03 1.21.104.383.067.707.17 1.023.327a3.38 3.38 0 0 1 1.47 1.438c.16.306.265.623.334 1 .074.4.095.82.104 1.18.006.193.008.39.01.587v33.837c-.002.196-.004.39-.01.585-.01.36-.03.782-.104 1.184a3.45 3.45 0 0 1-.334.995 3.315 3.315 0 0 1-1.473 1.437c-.314.156-.638.26-1.02.327-.42.073-.867.093-1.207.102-.2.004-.403.007-.607.007-.243.003-.488.003-.73.003H6.441c-.24 0-.483 0-.726-.002z");
			attr(path0, "id", "a");
			attr(path1, "d", "M8.812 1.718c-.618.713-1.154 1.853-1.007 2.945 1.07.084 2.157-.543 2.822-1.348h-.002c.665-.807 1.113-1.925.99-3.04-.958.038-2.12.64-2.803 1.443zm13.589.247c-.583.067-1.123.143-1.608.227l-.156.027v16.964h1.548v-7.147c.523.09 1.12.137 1.78.137.875 0 1.696-.112 2.44-.333a5.46 5.46 0 0 0 1.956-1.02c.55-.458.988-1.03 1.307-1.7.316-.672.48-1.462.48-2.35 0-.738-.117-1.4-.345-1.968a4.517 4.517 0 0 0-.96-1.488l-.002.001c-.483-.468-1.11-.83-1.855-1.08-.74-.246-1.63-.37-2.643-.37-.698 0-1.354.033-1.942.1zm.563 8.784a5.083 5.083 0 0 1-.778-.13V3.406c.204-.038.457-.073.754-.105.377-.04.83-.06 1.352-.06.645 0 1.24.076 1.77.23.523.15.98.374 1.36.665.37.288.664.662.867 1.113.203.457.306 1.002.306 1.62 0 1.284-.398 2.267-1.18 2.926l.002-.002c-.796.667-1.92 1.006-3.35 1.006-.39 0-.762-.018-1.103-.05zM8.313 5.753c-.753 0-1.91-.85-3.144-.825-1.617.023-3.108.94-3.94 2.387-1.678 2.922-.426 7.238 1.21 9.6.8 1.158 1.752 2.457 3.008 2.41 1.208-.046 1.66-.78 3.12-.78.719-.001 1.183.189 1.621.379.452.194.876.39 1.521.377 1.298-.028 2.123-1.18 2.92-2.344.913-1.34 1.292-2.64 1.312-2.706-.027-.015-2.528-.97-2.556-3.855v-.001c-.02-2.413 1.968-3.574 2.06-3.63-1.124-1.635-2.863-1.86-3.484-1.886-.1-.01-.199-.014-.298-.014-1.373 0-2.649.888-3.35.888zm24.992 1.048a5.796 5.796 0 0 0-1.707.813l-.127.086.525 1.224.19-.126c.4-.27.85-.484 1.34-.637.49-.15.99-.23 1.486-.23.646 0 1.162.12 1.53.35.373.233.655.523.837.86.19.348.312.72.367 1.104.058.4.086.76.086 1.066v.137c-2.295-.01-4.088.372-5.278 1.138-1.25.805-1.884 1.952-1.884 3.405 0 .418.075.84.223 1.257.152.422.378.8.676 1.122.3.326.687.592 1.15.792.46.2 1.004.3 1.61.3.48 0 .93-.06 1.34-.18a4.55 4.55 0 0 0 1.936-1.148 5.12 5.12 0 0 0 .295-.324h.06l.142 1.375h1.492l-.04-.22a9.314 9.314 0 0 1-.147-1.368l-.004-.004c-.017-.48-.025-.962-.025-1.442v-4.715c0-.56-.056-1.13-.165-1.696a4.316 4.316 0 0 0-.643-1.577 3.593 3.593 0 0 0-1.308-1.16c-.55-.296-1.267-.446-2.13-.446a6.81 6.81 0 0 0-1.827.244zm.313 11.145c-.26-.09-.49-.228-.687-.41a2.028 2.028 0 0 1-.48-.698c-.123-.28-.185-.63-.185-1.035 0-.664.18-1.203.53-1.596.36-.408.827-.723 1.38-.935a7.035 7.035 0 0 1 1.864-.425 16.61 16.61 0 0 1 1.787-.077l.002 2.406c0 .167-.04.394-.115.666a3.363 3.363 0 0 1-.415.828c-.18.264-.407.507-.675.72-.267.21-.586.38-.948.506s-.78.19-1.24.19c-.282 0-.555-.048-.818-.14zm13.407-3.258c-.18.475-.35.953-.502 1.418l-.217.663h-.054c-.068-.22-.14-.447-.22-.687-.15-.46-.312-.913-.477-1.345l-3.09-7.906h-1.654l4.42 11.367c.117.275.134.4.134.45 0 .015-.007.11-.135.455a8.3 8.3 0 0 1-.94 1.743c-.353.482-.677.874-.966 1.163a5.252 5.252 0 0 1-1.036.82c-.36.212-.688.385-.98.514l-.165.075.538 1.31.172-.066c.14-.052.403-.172.802-.367.404-.2.85-.514 1.327-.94a6.81 6.81 0 0 0 1.117-1.256c.326-.467.653-1.018.972-1.63a25.07 25.07 0 0 0 .943-2.062c.31-.763.64-1.616.985-2.535l3.57-9.04-1.654-.002-2.89 7.858z");
			attr(path1, "id", "c");
			xlink_attr(use0, "xlink:href", "#a");
			attr(mask0, "id", "b");
			attr(mask0, "fill", "#fff");
			attr(path2, "fill", "#121211");
			attr(path2, "mask", "url(#b)");
			attr(path2, "d", "M-5 50h82V-5H-5z");
			xlink_attr(use1, "xlink:href", "#c");
			attr(mask1, "id", "d");
			attr(mask1, "fill", "#fff");
			attr(path3, "fill", "#121211");
			attr(path3, "mask", "url(#d)");
			attr(path3, "d", "M-4.567 29.728h61.136V-4.725H-4.567z");
			attr(g0, "transform", "translate(10 10)");
			attr(g1, "fill", "none");
			attr(g1, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-apple_pay");
			attr(svg, "viewBox", "0 0 72 45");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, defs);
			append_hydration(defs, path0);
			append_hydration(defs, path1);
			append_hydration(svg, g1);
			append_hydration(g1, mask0);
			append_hydration(mask0, use0);
			append_hydration(g1, path2);
			append_hydration(g1, g0);
			append_hydration(g0, mask1);
			append_hydration(mask1, use1);
			append_hydration(g0, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (43:0) {#if name == 'icon-arrow-left' }
function create_if_block_109(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M4.814 7.555C3.95 6.61 3.2 5.893 2.568 5.4 1.937 4.91 1.341 4.544.781 4.303v-.44a9.933 9.933 0 0 0 1.875-1.196c.606-.485 1.328-1.196 2.168-2.134h.752c-.612 1.309-1.253 2.315-1.924 3.018H19.23v.986H3.652c.495.632.84 1.1 1.036 1.406.195.306.485.843.869 1.612h-.743z");
			attr(path, "fill", "#000");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-arrow-left");
			attr(svg, "viewBox", "0 0 20 8");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (46:0) {#if name == 'icon-arrow-right' }
function create_if_block_108(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M15.186.445c.865.944 1.614 1.662 2.246 2.154.631.491 1.227.857 1.787 1.098v.44a9.933 9.933 0 0 0-1.875 1.196c-.606.485-1.328 1.196-2.168 2.134h-.752c.612-1.309 1.253-2.315 1.924-3.018H.77v-.986h15.577c-.495-.632-.84-1.1-1.035-1.406-.196-.306-.486-.843-.87-1.612h.743z");
			attr(path, "fill", "#000");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-arrow-right");
			attr(svg, "viewBox", "0 0 20 8");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (49:0) {#if name == 'icon-arrow' }
function create_if_block_107(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				viewBox: true,
				width: true,
				fill: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				xmlns: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M8.537.808a.5.5 0 01.817-.162l4 4a.5.5 0 010 .708l-4 4a.5.5 0 11-.708-.708L11.793 5.5H1a.5.5 0 010-1h10.793L8.646 1.354a.5.5 0 01-.109-.546z");
			attr(path, "fill", "currentColor");
			attr(svg, "viewBox", "0 0 14 10");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "fill", "none");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-arrow");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (54:0) {#if name == 'icon-bitcoin' }
function create_if_block_106(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M6.816 3.875q1.875 0 3.467.908t2.52 2.48.928 3.428q0 1.875-.908 3.467t-2.48 2.529-3.428.938q-1.875 0-3.467-.908t-2.52-2.48T0 10.79t.908-3.467 2.48-2.52 3.428-.928zm.137 9.844q.957.254 1.66.029t.996-1.045q.43-1.23-.684-1.816.84-.195.977-1.113.176-1.152-1.504-1.738l.313-1.25-.762-.176-.293 1.191q-.117-.02-.322-.068t-.283-.068l.293-1.211-.742-.195-.313 1.23q-.176-.02-.488-.098v-.02l-1.035-.254-.195.801.547.137q.371.098.332.449L5.098 9.91l-.508 1.973q-.059.254-.332.195l-.547-.156-.391.879.996.234q.176.059.527.137l-.313 1.27.742.176.313-1.23q.488.137.605.156l-.313 1.23.762.195zm10.664-4.492q.176-.078.449-.156.234-.059.469-.059.547 0 .918.195.391.176.645.508.215.273.391.742.117.43.117.938 0 .781-.293 1.445-.254.664-.762 1.191-.469.488-1.152.801-.664.293-1.445.293-.02 0-.137-.01t-.215-.01q-.137 0-.566-.039-.43-.078-.684-.137-.41-.098-.684-.254l1.934-8.047 1.699-.254zm7.012-1.914q0 .195-.098.43-.078.176-.254.352-.137.156-.352.234-.176.098-.449.098-.352 0-.605-.195-.293-.195-.293-.645 0-.195.098-.43.078-.176.254-.352.156-.137.352-.234.234-.098.449-.098.313 0 .625.215.273.215.273.625zm17.207.917q-.273-.195-.273-.645 0-.254.098-.43.098-.195.234-.352.195-.156.371-.234.234-.098.43-.098.313 0 .625.215.273.215.273.625 0 .195-.098.43-.078.215-.234.352-.195.156-.371.234-.176.098-.43.098-.371 0-.625-.195zm-14.785.899h1.855l-.332 1.348h-1.836l-.488 2.051q-.078.352-.078.469-.02.215.059.391.059.176.234.254.156.078.488.078.176 0 .527-.039.156-.039.508-.156l.117 1.27q-.469.156-.723.215-.332.078-.918.078-.781 0-1.191-.215-.41-.234-.586-.625-.195-.352-.156-.898 0-.488.156-1.074l1.074-4.59 1.719-.273zM6.836 8.563q.039 0 .117.02.234.059.381.098t.41.137.4.205.234.303.039.43q-.039.176-.146.293t-.273.156-.303.059-.361-.01-.332-.049-.313-.078-.225-.059zm26.641 2.05q-.254-.098-.449-.156-.215-.078-.586-.078-.84 0-1.309.547-.469.586-.469 1.523 0 .566.234.918.254.352.898.352.332 0 .625-.059.43-.137.527-.176l.117 1.328q-.332.137-.664.215-.43.098-.918.098-.664 0-1.152-.215-.43-.156-.801-.527-.332-.391-.43-.801-.156-.469-.156-.938 0-.703.254-1.426.234-.664.703-1.172.41-.469 1.094-.781.645-.293 1.445-.293.449 0 .898.098.293.059.703.254zm5.527-.957q.273.313.43.762.137.41.137.957 0 .723-.195 1.328-.254.742-.625 1.211-.41.527-1.035.859-.625.352-1.426.352-.605 0-1.016-.195-.469-.195-.703-.488-.273-.313-.43-.762-.156-.469-.156-.977 0-.645.234-1.328.215-.664.625-1.191t1.035-.859q.605-.352 1.387-.352.566 0 1.016.176.41.156.723.508zm5.488-.254q.039-.02.098-.029t.107-.029.107-.039.098-.039l.508-.117q.293-.059.645-.117.234-.02.781-.02 1.348 0 1.797.742.488.762.176 2.07l-.762 3.145h-1.641l.723-3.086q.078-.41.098-.566.059-.254 0-.469-.02-.195-.195-.332-.215-.137-.508-.137-.215 0-.645.078l-1.074 4.512h-1.66zm-22.07-.273h1.66l-1.406 5.84h-1.621zm18.984 0h1.641l-1.387 5.84h-1.641zM5.098 9.91l.078.02q-.039 0-.078-.02zm11.445 3.809q.098 0 .117.02h.117q.039.02.117.02h.215q.391 0 .723-.195.332-.176.586-.508.234-.273.41-.703.137-.469.137-.84 0-.527-.176-.82-.176-.313-.664-.313-.156 0-.391.059t-.449.234zm21.309-1.446q.078-.332.078-.723 0-.547-.176-.879-.176-.293-.645-.293-.371 0-.645.215t-.449.527q-.215.332-.293.703-.098.43-.098.723 0 .566.176.879.195.293.645.293.371 0 .645-.215.293-.195.469-.518t.293-.713zM6.27 10.828q.039 0 .186.039t.234.059l.264.059.273.088.273.117.254.127.205.156.156.195.078.234-.029.273q-.039.195-.166.322t-.322.166-.361.059-.43-.02-.391-.059-.381-.088-.273-.068z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-bitcoin");
			attr(svg, "viewBox", "0 0 49 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (57:0) {#if name == 'icon-caret' }
function create_if_block_105(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-caret");
			attr(svg, "viewBox", "0 0 10 6");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (62:0) {#if name == 'icon-cart-empty' }
function create_if_block_104(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true,
				fill: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "m15.75 11.8h-3.16l-.77 11.6a5 5 0 0 0 4.99 5.34h7.38a5 5 0 0 0 4.99-5.33l-.78-11.61zm0 1h-2.22l-.71 10.67a4 4 0 0 0 3.99 4.27h7.38a4 4 0 0 0 4-4.27l-.72-10.67h-2.22v.63a4.75 4.75 0 1 1 -9.5 0zm8.5 0h-7.5v.63a3.75 3.75 0 1 0 7.5 0z");
			attr(path, "fill", "currentColor");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-cart-empty");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "8 5 25 25");
			attr(svg, "fill", "none");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (67:0) {#if name == 'icon-cart' }
function create_if_block_103(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true,
				fill: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, "fill-rule": true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "currentColor");
			attr(path, "fill-rule", "evenodd");
			attr(path, "d", "M20.5 6.5a4.75 4.75 0 00-4.75 4.75v.56h-3.16l-.77 11.6a5 5 0 004.99 5.34h7.38a5 5 0 004.99-5.33l-.77-11.6h-3.16v-.57A4.75 4.75 0 0020.5 6.5zm3.75 5.31v-.56a3.75 3.75 0 10-7.5 0v.56h7.5zm-7.5 1h7.5v.56a3.75 3.75 0 11-7.5 0v-.56zm-1 0v.56a4.75 4.75 0 109.5 0v-.56h2.22l.71 10.67a4 4 0 01-3.99 4.27h-7.38a4 4 0 01-4-4.27l.72-10.67h2.22z");
			attr(svg, "class", "icon icon-cart");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "8 5 25 25");
			attr(svg, "fill", "none");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (72:0) {#if name == 'icon-checkmark' }
function create_if_block_102(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				xmlns: true,
				viewBox: true,
				fill: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M11.35.643a.5.5 0 01.006.707l-6.77 6.886a.5.5 0 01-.719-.006L.638 4.845a.5.5 0 11.724-.69l2.872 3.011 6.41-6.517a.5.5 0 01.707-.006h-.001z");
			attr(path, "fill", "currentColor");
			attr(svg, "class", "icon icon-checkmark ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 12 9");
			attr(svg, "fill", "none");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (77:0) {#if name == 'icon-chevron-down' }
function create_if_block_101(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true, transform: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", /*color*/ ctx[2]);
			attr(path, "d", "M80.93 271.76A35 35 0 0 1 140.68 247l189.74 189.75L520.16 247a35 35 0 1 1 49.5 49.5L355.17 511a35 35 0 0 1-49.5 0L91.18 296.5a34.89 34.89 0 0 1-10.25-24.74z");
			attr(path, "transform", "translate(-80.93 -236.76)");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-chevron-down");
			attr(svg, "viewBox", "0 0 498.98 284.49");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*color*/ 4) {
				attr(path, "fill", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (80:0) {#if name == 'icon-chevron-left' }
function create_if_block_100(ctx) {
	let svg;
	let defs;
	let style;
	let t;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			defs = svg_element("defs");
			style = svg_element("style");
			t = text(".cls-1{fill:#231f20}");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			defs = claim_svg_element(svg_nodes, "defs", {});
			var defs_nodes = children(defs);
			style = claim_svg_element(defs_nodes, "style", {});
			var style_nodes = children(style);
			t = claim_text(style_nodes, ".cls-1{fill:#231f20}");
			style_nodes.forEach(detach);
			defs_nodes.forEach(detach);
			path = claim_svg_element(svg_nodes, "path", { class: true, d: true, transform: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "class", "cls-1");
			attr(path, "d", "M437.67 129.51a35 35 0 0 1 24.75 59.75L272.67 379l189.75 189.74a35 35 0 1 1-49.5 49.5L198.43 403.75a35 35 0 0 1 0-49.5l214.49-214.49a34.89 34.89 0 0 1 24.75-10.25z");
			attr(path, "transform", "translate(-188.18 -129.51)");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-chevron-left");
			attr(svg, "viewBox", "0 0 284.49 498.98");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, defs);
			append_hydration(defs, style);
			append_hydration(style, t);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (83:0) {#if name == 'icon-chevron-right' }
function create_if_block_99(ctx) {
	let svg;
	let defs;
	let style;
	let t;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			defs = svg_element("defs");
			style = svg_element("style");
			t = text(".cls-1{fill:#231f20}");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			defs = claim_svg_element(svg_nodes, "defs", {});
			var defs_nodes = children(defs);
			style = claim_svg_element(defs_nodes, "style", {});
			var style_nodes = children(style);
			t = claim_text(style_nodes, ".cls-1{fill:#231f20}");
			style_nodes.forEach(detach);
			defs_nodes.forEach(detach);
			path = claim_svg_element(svg_nodes, "path", { class: true, d: true, transform: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "class", "cls-1");
			attr(path, "d", "M223.18 628.49a35 35 0 0 1-24.75-59.75L388.17 379 198.43 189.26a35 35 0 0 1 49.5-49.5l214.49 214.49a35 35 0 0 1 0 49.5L247.93 618.24a34.89 34.89 0 0 1-24.75 10.25z");
			attr(path, "transform", "translate(-188.18 -129.51)");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-chevron-right");
			attr(svg, "viewBox", "0 0 284.49 498.98");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, defs);
			append_hydration(defs, style);
			append_hydration(style, t);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (86:0) {#if name == 'icon-chevron-up' }
function create_if_block_98(ctx) {
	let svg;
	let defs;
	let style;
	let t;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			defs = svg_element("defs");
			style = svg_element("style");
			t = text(".cls-1{fill:#231f20}");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			defs = claim_svg_element(svg_nodes, "defs", {});
			var defs_nodes = children(defs);
			style = claim_svg_element(defs_nodes, "style", {});
			var style_nodes = children(style);
			t = claim_text(style_nodes, ".cls-1{fill:#231f20}");
			style_nodes.forEach(detach);
			defs_nodes.forEach(detach);
			path = claim_svg_element(svg_nodes, "path", { class: true, d: true, transform: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "class", "cls-1");
			attr(path, "d", "M579.91 486.24A35 35 0 0 1 520.16 511L330.42 321.25 140.68 511a35 35 0 1 1-49.5-49.5L305.67 247a35 35 0 0 1 49.5 0l214.49 214.5a34.89 34.89 0 0 1 10.25 24.74z");
			attr(path, "transform", "translate(-80.93 -236.76)");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-chevron-up");
			attr(svg, "viewBox", "0 0 498.98 284.49");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, defs);
			append_hydration(defs, style);
			append_hydration(style, t);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (89:0) {#if name == 'icon-cirrus' }
function create_if_block_97(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M13.984 12.879q-.566 1.855-1.973 3.203 1.914 1.543 4.355 1.543 1.855 0 3.447-.918t2.51-2.51.918-3.447q0-1.387-.547-2.666t-1.465-2.197-2.197-1.465-2.666-.547q-2.441 0-4.355 1.543 1.406 1.348 1.973 3.203h-.547q-.527-1.602-1.816-2.852-1.289 1.23-1.797 2.852h-.566q.527-1.816 1.934-3.203-1.934-1.543-4.316-1.543-1.855 0-3.447.918t-2.51 2.51-.918 3.447.918 3.447 2.51 2.51 3.447.918q2.383 0 4.316-1.543-1.406-1.387-1.934-3.203h.566q.508 1.621 1.797 2.852 1.289-1.25 1.816-2.852h.547zm-6.777-4.18q-.039.273-.156.723-.938-.43-1.641 0-.625.488-.566 1.367.059.43.469.645.605.195 1.387-.156-.02.117-.059.283t-.068.293-.068.225q-.918.273-1.699.02-.391-.137-.674-.479t-.303-.732q-.078-.41.029-.82t.381-.752.664-.537q.957-.469 2.305-.078zm3.555 1.387q-.098-.02-.195.01t-.186.088-.156.137-.107.176q-.078.176-.137.42t-.098.42-.098.459-.078.42H8.672l.039-.195q.059-.293.273-1.24t.293-1.455h.879q0 .02-.059.449l.146-.146.225-.195.283-.107.459-.02-.293.82zm2.383.039l-.156-.039q-.352-.059-.625.41-.098.176-.166.42t-.098.42-.088.459-.078.42h-1.035l.059-.195q.059-.293.176-.85t.205-1.006.146-.84h.898q.02.176-.059.449l.156-.156.225-.195.293-.107.459-.01zm3.73 1.445q.469.117.898.117.547 0 .547-.254 0-.117-.078-.176t-.371-.176q-.762-.254-.762-.82 0-.215.078-.381t.254-.303.469-.215.703-.078q.625 0 .898.059l-.156.664q-.254-.02-.703-.02-.508 0-.508.215 0 .117.078.176t.391.156q.703.254.703.82 0 .977-1.543.977-.117 0-.547-.039-.215 0-.273-.02l-.176-.02h-.059zM8.633 9.324l-.586 2.891h-.996l.586-2.891h.996zm7.734 2.149l-.117.742h-.918l.078-.469q-.488.547-1.113.547-.43 0-.674-.283t-.244-.713q0-.02.078-.605l.273-1.348h.977l-.273 1.348q0 .039-.039.186t-.039.244q0 .137.127.244t.303.088q.605 0 .762-.781l.273-1.328h1.016z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-cirrus");
			attr(svg, "viewBox", "0 0 23 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (92:0) {#if name == 'icon-clipboard' }
function create_if_block_96(ctx) {
	let svg;
	let path;
	let svg_width_value;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				fill: true,
				xmlns: true,
				"aria-hidden": true,
				focusable: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M2 1a1 1 0 011-1h7a1 1 0 011 1v9a1 1 0 01-1 1V1H2zM1 2a1 1 0 00-1 1v9a1 1 0 001 1h7a1 1 0 001-1V3a1 1 0 00-1-1H1zm0 10V3h7v9H1z");
			attr(path, "fill", "currentColor");
			attr(svg, "class", "icon icon-clipboard");
			attr(svg, "width", svg_width_value = /*liquid*/ ctx[4].default(/*width*/ ctx[1], 11));
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "viewBox", "0 0 11 13");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2 && svg_width_value !== (svg_width_value = /*liquid*/ ctx[4].default(/*width*/ ctx[1], 11))) {
				attr(svg, "width", svg_width_value);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (97:0) {#if name == 'icon-close-small' }
function create_if_block_95(ctx) {
	let svg;
	let path0;
	let path1;
	let svg_width_value;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true,
				fill: true,
				xmlns: true
			});

			var svg_nodes = children(svg);

			path0 = claim_svg_element(svg_nodes, "path", {
				d: true,
				stroke: true,
				"stroke-linecap": true,
				"stroke-linejoin": true
			});

			children(path0).forEach(detach);

			path1 = claim_svg_element(svg_nodes, "path", {
				d: true,
				stroke: true,
				"stroke-linecap": true,
				"stroke-linejoin": true
			});

			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M8.48627 9.32917L2.82849 3.67098");
			attr(path0, "stroke", "#333030");
			attr(path0, "stroke-linecap", "round");
			attr(path0, "stroke-linejoin", "round");
			attr(path1, "d", "M2.88539 9.38504L8.42932 3.61524");
			attr(path1, "stroke", "#333030");
			attr(path1, "stroke-linecap", "round");
			attr(path1, "stroke-linejoin", "round");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", svg_width_value = /*liquid*/ ctx[4].default(/*width*/ ctx[1], 12));
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-close-small");
			attr(svg, "viewBox", "0 0 12 13");
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2 && svg_width_value !== (svg_width_value = /*liquid*/ ctx[4].default(/*width*/ ctx[1], 12))) {
				attr(svg, "width", svg_width_value);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (103:0) {#if name == 'icon-close' }
function create_if_block_94(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-close");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 18 17");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (108:0) {#if name == 'icon-dankort' }
function create_if_block_93(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M2.09 5.281q-.41.039-.996.391-.508.313-.801.84T.02 7.645q.02 0 .02-.039h7.188q.684.059 1.309.254.684.195 1.201.82t.674 1.328q.02-.352.039-.752t.039-.889.039-.762h4.16q-.059.391-.098.879t-.078 1.006-.078.889q.723-.84 2.129-2.559.039-.039.117-.137t.117-.117h5.02q.02-.625-.293-1.162t-.859-.83q-.313-.195-.771-.254t-.869-.029-.879-.01H2.092zm19.785 2.364l.02.039.02-.039h-.039zm-.059.019h-.02q-.254.195-.518.449t-.439.42-.488.498-.41.43-.479.518-.42.459l-.039.039q.156.195.449.576t.459.615.439.576.488.605.469.566.508.557V7.663zM4.004 11.609q.195-.02.713.01t.85-.02.586-.244q.43-.371.41-.742-.078-.273-.273-.439t-.488-.215-.547-.059-.605 0-.508.01zm10.391-.918q-.117 1.582-.176 3.398-2.773-.02-4.102 0 .039-.332.195-2.734-.332.801-.547 1.113-.84 1.348-2.715 1.621H.019q0 .469.156.879.234.566.762.967t1.113.42h17.422q.605 0 1.016-.215.605-.254.986-.85t.342-1.24h-4.971l-.098-.02-.107-.068-.059-.127z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-dankort");
			attr(svg, "viewBox", "0 0 22 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (111:0) {#if name == 'icon-diners_club' }
function create_if_block_92(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				width: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M10.156 3.875q1.895 0 3.525.859t2.646 2.471 1.016 3.584q0 1.836-1.006 3.418t-2.666 2.49-3.516.908H6.913q-1.855 0-3.457-.908t-2.529-2.49-.928-3.418q0-1.992.938-3.584t2.51-2.461 3.467-.869h3.242zM6.934 17.02q1.719 0 3.164-.84t2.285-2.285.84-3.164q0-1.699-.84-3.145t-2.285-2.285-3.164-.84q-1.699 0-3.145.84T1.504 7.586t-.84 3.145q0 1.719.84 3.164t2.285 2.285 3.145.84zm-1.426-2.579q-1.133-.43-1.836-1.445t-.723-2.266q.02-1.25.732-2.275t1.826-1.436v7.422zM8.379 7.02q1.113.41 1.826 1.436t.713 2.275-.713 2.266-1.826 1.445V7.02z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-diners_club");
			attr(svg, "viewBox", "0 0 17 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (114:0) {#if name == 'icon-discount' }
function create_if_block_91(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M7 0h3a2 2 0 012 2v3a1 1 0 01-.3.7l-6 6a1 1 0 01-1.4 0l-4-4a1 1 0 010-1.4l6-6A1 1 0 017 0zm2 2a1 1 0 102 0 1 1 0 00-2 0z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-discount ");
			attr(svg, "viewBox", "0 0 12 12");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (119:0) {#if name == 'icon-discover' }
function create_if_block_90(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M22.598 14.617q-1.094.488-2.031.488-1.855 0-3.125-1.26t-1.27-3.115q0-1.797 1.299-3.076t3.135-1.279q1.035 0 1.992.508v1.914q-.957-.938-2.031-.938-1.152 0-1.943.84t-.791 2.031q0 1.27.791 2.07t2.021.801q1.055 0 1.953-.898v1.914zm-8.086-6.152q-.586-.664-1.328-.664-.527 0-.869.264t-.342.654q0 .332.264.557t.986.479q1.406.508 1.914 1.064t.508 1.553q0 1.211-.811 1.973t-2.08.762q-1.816 0-2.891-1.582l1.055-1.016q.586 1.113 1.777 1.113.547 0 .908-.332t.361-.84q0-.527-.488-.859-.273-.176-1.133-.469-1.133-.43-1.592-.938t-.459-1.387q0-1.016.752-1.699t1.846-.684q1.387 0 2.461.957zm13.164-2.051q1.875 0 3.154 1.26t1.279 3.076-1.289 3.086-3.145 1.27q-1.914 0-3.193-1.25t-1.279-3.145q0-1.797 1.309-3.047t3.164-1.25zm-25.293.137q1.973 0 3.232 1.172t1.26 3.008q0 .918-.391 1.768t-1.113 1.455q-1.211.977-2.988.977H0V6.552h2.383zm5.234 0h1.641v8.379H7.617V6.551zm30.43 0h1.777l-3.633 8.574h-.859l-3.535-8.574h1.758l2.227 5.625zm2.5 0h4.629v1.426h-2.988v1.855h2.871v1.406h-2.871v2.266h2.988v1.426h-4.629V6.551zm8.125 0q1.406 0 2.168.645t.762 1.836q0 .957-.479 1.563t-1.396.801l2.617 3.535h-1.992l-2.266-3.398h-.195v3.398H46.25V6.552h2.422zm-.313 3.847q1.582 0 1.582-1.289 0-1.23-1.582-1.23h-.469v2.52h.469zM2.09 13.504q1.484 0 2.207-.664.43-.391.674-.947t.244-1.162q0-1.27-.918-2.07-.742-.684-2.207-.684h-.449v5.527h.449z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-discover");
			attr(svg, "viewBox", "0 0 52 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (122:0) {#if name == 'icon-dogecoin' }
function create_if_block_89(ctx) {
	let svg;
	let g;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			g = claim_svg_element(svg_nodes, "g", { fill: true, "fill-rule": true });
			var g_nodes = children(g);
			path0 = claim_svg_element(g_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(g_nodes, "path", { d: true });
			children(path1).forEach(detach);
			g_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M7 0C3.14 0 0 3.14 0 7s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm3.24 8.52c-.16.5-.42.9-.72 1.2-.24.24-.56.42-.96.54-.3.1-.7.14-1.22.14H4.76V7.52h-1.2v-1h1.2V3.6h2.5c.56 0 1 .04 1.3.12.4.12.74.32 1.02.62s.5.66.64 1.1c.14.44.22.96.22 1.6 0 .58-.06 1.06-.2 1.48z");
			attr(path1, "d", "M8.5 5.14c-.16-.16-.38-.26-.64-.32-.2-.04-.56-.06-1.12-.06h-.62v1.76h1.16v1H6.12v1.74h1.02c.38 0 .66-.02.82-.06.22-.06.4-.14.56-.28.14-.14.26-.36.36-.66.1-.3.14-.72.14-1.24s-.04-.92-.14-1.22c-.08-.28-.22-.5-.38-.66z");
			attr(g, "fill", "#000");
			attr(g, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-dogecoin");
			attr(svg, "viewBox", "0 0 14 14");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, g);
			append_hydration(g, path0);
			append_hydration(g, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (125:0) {#if name == 'icon-dwolla' }
function create_if_block_88(ctx) {
	let svg;
	let style;
	let t;
	let g;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text(".st0{fill:#444}");
			g = svg_element("g");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			style = claim_svg_element(svg_nodes, "style", {});
			var style_nodes = children(style);
			t = claim_text(style_nodes, ".st0{fill:#444}");
			style_nodes.forEach(detach);
			g = claim_svg_element(svg_nodes, "g", { id: true });
			var g_nodes = children(g);
			path = claim_svg_element(g_nodes, "path", { class: true, d: true });
			children(path).forEach(detach);
			g_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "class", "st0");
			attr(path, "d", "M-335.7 311.8h-.9c-.3-.9-.7-1.7-1-2.6h-3.8c-.3.9-.7 1.7-1 2.6h-6.1v-8.5h.8v7.7h4.7c1-2.6 3.1-7.8 3.1-7.8h.9s.3.7.5 1.1c.9 2.3 1.8 4.7 2.7 7.1 0 .1 0 .2.1.2v.2zm-3.7-7.5c-.6 1.4-1.2 2.7-1.7 4.2h3.2c-.5-1.5-1-2.9-1.5-4.2zM-366.9 310.5c.6-2.4 1.9-7.2 1.9-7.2h.8s-1.5 5.7-2.3 8.5h-.9l-2.1-7.5h-.1c-.7 2.5-1.4 5-2.1 7.4-.3.1-.6 0-.9 0-.8-2.8-2.3-8.5-2.3-8.5h.9s1.2 4.8 1.9 7.2h.1c.7-2.4 1.3-4.8 2-7.2h1c.7 2.4 1.3 4.8 2 7.2 0 .1.1.1.1.1zM-382 311.8v-8.6h1.3s1.6 0 2.4.1c1.6.2 2.7 1.1 3.1 2.7.3 1.1.3 2.3 0 3.4-.4 1.5-1.4 2.2-2.9 2.4-1.4.1-2.6 0-3.9 0zm.8-.7c.8 0 1.6.1 2.4 0 1.6-.1 2.4-.9 2.7-2.3.2-.9.2-1.8-.1-2.7-.2-.9-.8-1.5-1.7-1.8-1.1-.4-2.2-.2-3.4-.2.1 2.3.1 4.6.1 7zM-364 307.6c0-1.1.2-2 .8-2.9 1.5-2.3 5.5-2.3 6.7.5.7 1.5.7 3.1 0 4.6-.7 1.6-2 2.3-3.8 2.2-1.6-.1-2.8-.9-3.4-2.4-.2-.6-.3-1.3-.3-2zm7.2-.1c0-.8-.2-1.6-.6-2.3-1.1-1.7-3.7-1.9-4.9-.3-1.1 1.4-1.1 3.9-.1 5.3 1.1 1.5 3.8 1.5 4.9-.1.5-.8.7-1.6.7-2.6zM-354.1 311.1h4.7c.2.2.1.4.1.7h-5.6v-8.4h.8v7.7z");
			attr(g, "id", "REAQyD.tif");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-dwolla");
			attr(svg, "viewBox", "-382 297 46.8 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, style);
			append_hydration(style, t);
			append_hydration(svg, g);
			append_hydration(g, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (128:0) {#if name == 'icon-error' }
function create_if_block_87(ctx) {
	let svg;
	let circle0;
	let circle1;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			circle0 = claim_svg_element(svg_nodes, "circle", {
				cx: true,
				cy: true,
				r: true,
				stroke: true,
				"stroke-width": true
			});

			children(circle0).forEach(detach);

			circle1 = claim_svg_element(svg_nodes, "circle", {
				cx: true,
				cy: true,
				r: true,
				fill: true,
				stroke: true,
				"stroke-width": true
			});

			children(circle1).forEach(detach);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path0).forEach(detach);

			path1 = claim_svg_element(svg_nodes, "path", {
				d: true,
				fill: true,
				stroke: true,
				"stroke-width": true
			});

			var path1_nodes = children(path1);
			path1_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(circle0, "cx", "6.5");
			attr(circle0, "cy", "6.50049");
			attr(circle0, "r", "5.5");
			attr(circle0, "stroke", "white");
			attr(circle0, "stroke-width", "2");
			attr(circle1, "cx", "6.5");
			attr(circle1, "cy", "6.5");
			attr(circle1, "r", "5.5");
			attr(circle1, "fill", "#EB001B");
			attr(circle1, "stroke", "#EB001B");
			attr(circle1, "stroke-width", "0.7");
			attr(path0, "d", "M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z");
			attr(path0, "fill", "white");
			attr(path1, "d", "M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z");
			attr(path1, "fill", "white");
			attr(path1, "stroke", "#EB001B");
			attr(path1, "stroke-width", "0.7");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-error");
			attr(svg, "viewBox", "0 0 13 13");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, circle0);
			append_hydration(svg, circle1);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (136:0) {#if name == 'icon-facebook' }
function create_if_block_86(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "currentColor");
			attr(path, "d", "M16.42.61c.27 0 .5.1.69.28.19.2.28.42.28.7v15.44c0 .27-.1.5-.28.69a.94.94 0 01-.7.28h-4.39v-6.7h2.25l.31-2.65h-2.56v-1.7c0-.4.1-.72.28-.93.18-.2.5-.32 1-.32h1.37V3.35c-.6-.06-1.27-.1-2.01-.1-1.01 0-1.83.3-2.45.9-.62.6-.93 1.44-.93 2.53v1.97H7.04v2.65h2.24V18H.98c-.28 0-.5-.1-.7-.28a.94.94 0 01-.28-.7V1.59c0-.27.1-.5.28-.69a.94.94 0 01.7-.28h15.44z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-facebook");
			attr(svg, "viewBox", "0 0 18 18");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (141:0) {#if name == 'icon-filter' }
function create_if_block_85(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true,
				fill: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { "fill-rule": true, d: true, fill: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "d", "M4.833 6.5a1.667 1.667 0 1 1 3.334 0 1.667 1.667 0 0 1-3.334 0ZM4.05 7H2.5a.5.5 0 0 1 0-1h1.55a2.5 2.5 0 0 1 4.9 0h8.55a.5.5 0 0 1 0 1H8.95a2.5 2.5 0 0 1-4.9 0Zm11.117 6.5a1.667 1.667 0 1 0-3.334 0 1.667 1.667 0 0 0 3.334 0ZM13.5 11a2.5 2.5 0 0 1 2.45 2h1.55a.5.5 0 0 1 0 1h-1.55a2.5 2.5 0 0 1-4.9 0H2.5a.5.5 0 0 1 0-1h8.55a2.5 2.5 0 0 1 2.45-2Z");
			attr(path, "fill", "currentColor");
			attr(svg, "class", "icon icon-filter");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
			attr(svg, "fill", "none");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (146:0) {#if name == 'icon-forbrugsforeningen' }
function create_if_block_84(ctx) {
	let svg;
	let style;
	let t;
	let g;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text(".st0{fill:#222}");
			g = svg_element("g");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			style = claim_svg_element(svg_nodes, "style", {});
			var style_nodes = children(style);
			t = claim_text(style_nodes, ".st0{fill:#222}");
			style_nodes.forEach(detach);
			g = claim_svg_element(svg_nodes, "g", { id: true });
			var g_nodes = children(g);
			path = claim_svg_element(g_nodes, "path", { class: true, d: true });
			children(path).forEach(detach);
			g_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "class", "st0");
			attr(path, "d", "M-258.8 371.6c3-.8 5.7-2 8.2-3.7 7.5-5 12.2-11.9 14.4-20.5 1.2-4.7 1.8-9.4 1.7-14.3-.2-5.1-.1-10.2 0-15.4 0-2.4.1-2.5 2.4-2.5H-213.5c2-.1 2.3-.3 2.4-2.4.1-5.5.1-11 0-16.6 0-2.5-.2-2.8-2.8-2.8h-17.8c-2.9 0-3 0-2.8-2.9.3-6.1 2.9-10.8 8.7-13.3 2.5-1 5-1.9 7.8-1.8h.8c6.1-.4 6.1-.4 6.1-6.5v-21.1c1-.9 1.7-.5 2.5-.2 12.1 4.2 20.1 12.5 24.4 24.4 2.9 7.9 4.4 16.2 4.8 24.6.3 7.3.5 14.6 0 21.8-.7 10.3-2.8 20.3-7.8 29.5-5.1 9.3-12.6 15.8-22.4 19.8-8.5 3.4-17.4 5-26.6 4.8-6.6-.1-13.2 0-19.8-.1-1 .2-2 .6-2.8-.8zM-228.1 244.1c-.1.7-.7.6-1.2.7-8.4.3-14.9 4.2-21 9.6-5.8 5.2-8.1 11.7-9.2 19-.8 5.3-1.6 10.6-1.7 15.9 0 .4 0 .8-.1 1.2-.5 2.9-.5 2.9-3.5 2.9h-34.3c-.7 0-1.3.2-2.1-.4.6-7.7 1.6-15.3 4.3-22.8 4.3-12 12.5-19.5 24.6-23.2 5.7-1.7 11.4-2.4 17.2-3.1 8.7-1.1 17.4-.4 26.1-.5.4.1.8.2.9.7zM-277 368.7c-9.6-3.2-16.1-9.6-19.6-19-2.3-6.1-3.7-12.5-4.2-19.1-.3-4.4-.6-8.8-.8-13.2-.1-1.5.3-2.2 2-2.2 12 .1 23.9 0 35.9 0 1.5 0 2.1.4 2.1 2-.1 5.4-.1 10.8 0 16.1 0 1.6-.7 2.8-1.6 4-3 4.2-6.8 7-12 7.8-1.4.2-1.2 1.2-1.2 2.1v18.6c-.2.9.2 1.9-.6 2.9z");
			attr(g, "id", "TM3wMc.tif");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-forbrugsforeningen");
			attr(svg, "viewBox", "-316 229 158 156");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, style);
			append_hydration(style, t);
			append_hydration(svg, g);
			append_hydration(g, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (149:0) {#if name == 'icon-garbage' }
function create_if_block_83(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				style: true,
				xmlns: true,
				width: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { class: true, d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { class: true, d: true, transform: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { class: true, d: true, transform: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { class: true, d: true, transform: true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "class", "fill-current");
			attr(path0, "d", "M11.2,1.871H8.494V1.43A1.431,1.431,0,0,0,7.064,0H4.493A1.431,1.431,0,0,0,3.066,1.43v.441H.361a.361.361,0,0,0,0,.721h.651v8.477A1.934,1.934,0,0,0,2.943,13H8.618a1.934,1.934,0,0,0,1.931-1.931V2.592H11.2a.361.361,0,0,0,0-.721ZM3.788,1.43A.708.708,0,0,1,4.5.721H7.068a.708.708,0,0,1,.708.708v.441H3.788Zm6.039,9.64a1.211,1.211,0,0,1-1.209,1.209H2.943a1.211,1.211,0,0,1-1.209-1.209V2.592H9.827v8.477Zm0,0");
			attr(path1, "class", "fill-current");
			attr(path1, "d", "M162.575,123.675a.373.373,0,0,0,.375-.375v-6.626a.375.375,0,1,0-.75,0V123.3a.376.376,0,0,0,.375.378Zm0,0");
			attr(path1, "transform", "translate(-156.796 -112.598)");
			attr(path2, "class", "fill-current");
			attr(path2, "d", "M92.175,134.749a.373.373,0,0,0,.375-.375v-5.8a.375.375,0,1,0-.75,0v5.8a.373.373,0,0,0,.375.375Zm0,0");
			attr(path2, "transform", "translate(-88.742 -124.075)");
			attr(path3, "class", "fill-current");
			attr(path3, "d", "M233.075,134.749a.373.373,0,0,0,.375-.375v-5.8a.375.375,0,1,0-.75,0v5.8a.373.373,0,0,0,.375.375Zm0,0");
			attr(path3, "transform", "translate(-224.948 -124.075)");
			set_style(svg, "color", /*color*/ ctx[2]);
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "viewBox", "0 0 11.56 13");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*color*/ 4) {
				set_style(svg, "color", /*color*/ ctx[2]);
			}

			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (164:0) {#if name == 'icon-hamburger' }
function create_if_block_82(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M1 .5a.5.5 0 100 1h15.71a.5.5 0 000-1H1zM.5 8a.5.5 0 01.5-.5h15.71a.5.5 0 010 1H1A.5.5 0 01.5 8zm0 7a.5.5 0 01.5-.5h15.71a.5.5 0 010 1H1a.5.5 0 01-.5-.5z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-hamburger");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 18 16");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (169:0) {#if name == 'icon-instagram' }
function create_if_block_81(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			var path1_nodes = children(path1);
			path1_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "fill", "currentColor");
			attr(path0, "d", "M8.77 1.58c2.34 0 2.62.01 3.54.05.86.04 1.32.18 1.63.3.41.17.7.35 1.01.66.3.3.5.6.65 1 .12.32.27.78.3 1.64.05.92.06 1.2.06 3.54s-.01 2.62-.05 3.54a4.79 4.79 0 01-.3 1.63c-.17.41-.35.7-.66 1.01-.3.3-.6.5-1.01.66-.31.12-.77.26-1.63.3-.92.04-1.2.05-3.54.05s-2.62 0-3.55-.05a4.79 4.79 0 01-1.62-.3c-.42-.16-.7-.35-1.01-.66-.31-.3-.5-.6-.66-1a4.87 4.87 0 01-.3-1.64c-.04-.92-.05-1.2-.05-3.54s0-2.62.05-3.54c.04-.86.18-1.32.3-1.63.16-.41.35-.7.66-1.01.3-.3.6-.5 1-.65.32-.12.78-.27 1.63-.3.93-.05 1.2-.06 3.55-.06zm0-1.58C6.39 0 6.09.01 5.15.05c-.93.04-1.57.2-2.13.4-.57.23-1.06.54-1.55 1.02C1 1.96.7 2.45.46 3.02c-.22.56-.37 1.2-.4 2.13C0 6.1 0 6.4 0 8.77s.01 2.68.05 3.61c.04.94.2 1.57.4 2.13.23.58.54 1.07 1.02 1.56.49.48.98.78 1.55 1.01.56.22 1.2.37 2.13.4.94.05 1.24.06 3.62.06 2.39 0 2.68-.01 3.62-.05.93-.04 1.57-.2 2.13-.41a4.27 4.27 0 001.55-1.01c.49-.49.79-.98 1.01-1.56.22-.55.37-1.19.41-2.13.04-.93.05-1.23.05-3.61 0-2.39 0-2.68-.05-3.62a6.47 6.47 0 00-.4-2.13 4.27 4.27 0 00-1.02-1.55A4.35 4.35 0 0014.52.46a6.43 6.43 0 00-2.13-.41A69 69 0 008.77 0z");
			attr(path1, "fill", "currentColor");
			attr(path1, "d", "M8.8 4a4.5 4.5 0 100 9 4.5 4.5 0 000-9zm0 7.43a2.92 2.92 0 110-5.85 2.92 2.92 0 010 5.85zM13.43 5a1.05 1.05 0 100-2.1 1.05 1.05 0 000 2.1z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-instagram");
			attr(svg, "viewBox", "0 0 18 18");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (175:0) {#if name == 'icon-interac' }
function create_if_block_80(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M17.254.675q.668 0 1.143.483t.475 1.151v14.73q0 .668-.475 1.151t-1.143.483H2.629q-.668 0-1.151-.483t-.483-1.151V2.309q0-.668.483-1.151T2.629.675h14.625zM18.52 2.31q0-.527-.369-.905t-.896-.378H2.63q-.527 0-.905.378t-.378.905v14.73q0 .527.378.905t.905.378h14.625q.527 0 .896-.378t.369-.905V2.31zm-1.582 2.056q-.053-.176-.123-.246-.07-.018-.229 0-.193.053-.299.264-.123.193-.123.598 0 .334.123.475.105.158.299.07.123-.053.229-.176.088-.088.158-.352l.686-.105q-.018.264-.176.58-.141.316-.334.457-.246.211-.527.281-.387.105-.51.07-.246-.035-.352-.141-.158-.141-.246-.352-.07-.281-.07-.615 0-.422.105-.738.035-.141.211-.422.141-.246.246-.316.158-.158.563-.281.457-.158.721.018.246.158.352.58zm-1.846 1.67q0 .229.018.316 0 .105.088.246l-.721.211-.035-.141q-.035-.105-.035-.158-.158.264-.299.352-.176.176-.439.264-.369.088-.527-.053-.193-.229-.193-.527t.141-.545q.105-.211.475-.422.475-.299.527-.352.176-.088.281-.193 0-.176-.053-.264-.07-.07-.211-.018-.141.035-.281.176-.07.141-.105.281l-.703.105q.053-.281.123-.439.035-.141.193-.334.176-.141.299-.211l.387-.158q.387-.088.527-.088.193 0 .352.105.088.088.141.264.053.211.053.404v1.178zm-8.121 4.887q.053.07.211.255t.272.316.272.334.272.36.22.343.158.334.053.272v5.098H5.388q-.105-.264-.475-.729t-.369-.8v-4.729q-.158.07-.87.308t-.905.272q-.053 0-.167.009t-.22-.079-.105-.246V6.405q0-.334.369-.492 1.74-.703 3.832-1.371.211-.053.352.035t.141.316v6.029zm5.062-5.643q.088-.281.211-.457.07-.141.264-.193.141-.053.352.035l-.211.809q-.193-.035-.229-.018-.141.053-.229.246-.105.299-.105.914v.914l-.738.211V5.052l.686-.211v.439zM6.76 5.017q0-.07-.018-.132t-.088-.105-.176-.026l-2.32.809v6.328q.264-.088.387-.158v-1.318q0-.193.246-.396t.51-.202q.105 0 .22.026t.237.088.211.193.088.29v3.305h.123V11.1q.58-.158.58-.404V9.149l-.738.229V7.901q0-.264-.07-.369-.088-.088-.211-.035-.088.018-.211.193-.07.193-.07.545v1.301l-.738.229V7.076l.686-.229v.439q.211-.387.299-.475.141-.176.404-.229.299-.105.457.105.193.176.193.738V5.017zm1.318 2.724q0 .211.018.246.088.053.158.035.105-.035.211-.123l.053.703q-.299.158-.51.229-.299.088-.404.035-.123-.07-.176-.246-.088-.176-.088-.65v-.967l-.264.105v-.773l.264-.088v-.492l.738-.738v1.02l.422-.123v.756l-.422.123v.949zm2.865-.562q-.158.457-.404.721-.229.229-.668.369-.352.088-.615.035-.229-.123-.334-.369-.176-.299-.176-.756 0-.598.299-1.107.264-.439.809-.65.439-.123.65-.018.229.105.352.422.141.316.141.826v.123l-1.494.439q.035.281.088.334.141.176.299.088.123-.035.211-.141.053-.053.123-.193zm3.428-1.617q-.018.018-.141.105t-.193.123q-.246.193-.281.246-.053.105-.053.193 0 .158.053.211t.176.018q.088-.018.246-.141.105-.158.158-.264.035-.176.035-.334v-.158zm-11.127.351q-.035.018-.141.053t-.167.062-.149.062-.141.07-.105.079-.079.097-.026.123v5.748q0 .211.246.211.193 0 .563-.211V5.914zm6.979.598q0-.281-.105-.422-.088-.088-.246-.053-.141.053-.281.299-.07.141-.07.387zm-5.801 6.926q-.088.018-.378.114t-.36.097q-.264 0-.413-.202t-.149-.466q0-.229.211-.378t.633-.272.457-.141v1.248zm0 1.213q-.07.018-.246.088t-.299.105-.193.035q-.264 0-.387-.193t-.123-.369q0-.211.158-.352t.308-.185.448-.105.334-.062v1.037zm0 1.212q-.422.229-.598.229-.65 0-.65-.615 0-.088.044-.167t.114-.132.167-.097.193-.079.211-.062.202-.035.176-.026.141-.035v1.02z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-interac");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (178:0) {#if name == 'icon-jcb' }
function create_if_block_79(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M20.215 8.836q-1.484-.781-3.066-.898-1.66-.137-2.598.615t-.938 2.197.938 2.197 2.598.615q1.543-.117 3.066-.898v1.738q-1.641.41-3.223.488-1.563.059-2.783-.137t-1.982-.576-1.26-.938-.693-1.172-.195-1.318q0-.898.332-1.631t1.084-1.357 2.158-.928 3.34-.225q.703.039 1.504.156t1.27.234l.449.098v1.738zM5.723 6.844h3.516v4.727q0 3.34-5.059 3.34-1.035 0-2.08-.127T.528 14.54l-.527-.137v-1.738q1.895.898 3.516.898 1.035 0 1.621-.547t.586-1.445V6.844zm23.457 3.808q1.035.098 1.689.615t.654 1.357q0 .605-.342 1.074t-.928.713-1.328.244h-7.578V6.842h7.422q.996.039 1.631.547t.635 1.367q0 .703-.488 1.221t-1.367.654v.02zm-4.59-.625h2.148q.195 0 .234-.02.352-.059.586-.322t.234-.654q0-.371-.234-.635t-.586-.322q-.078-.039-.234-.039H24.59v1.992zm2.363 3.36q.215 0 .254-.02.371-.059.605-.342t.234-.693q0-.273-.107-.498t-.293-.361-.439-.195l-.254-.02H24.59v2.129h2.363z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-jcb");
			attr(svg, "viewBox", "0 0 32 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (181:0) {#if name == 'icon-klarna' }
function create_if_block_78(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M95.23 73.53a7.57 7.57 0 1 0 0 15.11 7.57 7.57 0 1 0 0-15.11zM183.65 73.53a7.57 7.57 0 1 0 0 15.11 7.57 7.57 0 1 0 0-15.11z");
			attr(path1, "d", "M225 0H15A15 15 0 0 0 0 15v120a15 15 0 0 0 15 15h210a15 15 0 0 0 15-15V15a15 15 0 0 0-15-15zM37.33 95.17H28V53h9.33v42.17zm15.19 0L38.61 74.81A25 25 0 0 0 52.21 53h9.06a33.63 33.63 0 0 1-10 23.64l12.61 18.53H52.52zm23.79 0h-8.95V53h8.95v42.17zm34.09 0h-7.31v-1.95a14.86 14.86 0 1 1 0-24.25V67h7.31v28.16zm21.93-20h-.1c-3.3-1-8.11.93-8.11 5.21v14.79h-8.46V67H124v3.77a10.4 10.4 0 0 1 8.33-3.77v8.19zm32.88 20h-8.39V79.71c0-4.11-2.12-6.32-5.81-6.32-3.44 0-6.3 2.1-6.3 6.38v15.4h-8.46V67h8.36v3.17c2.12-2.88 5.3-3.93 8.65-3.93 6.76 0 11.95 4.46 11.95 11v17.9zm33.62 0h-7.31v-1.95a14.68 14.68 0 0 1-8.52 2.73 14.86 14.86 0 1 1 8.54-27V67h7.31v28.16zm8.91.6a5.29 5.29 0 1 1 5.26-5.3 5.28 5.28 0 0 1-5.27 5.29z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-klarna");
			attr(svg, "viewBox", "0 0 240 150");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (184:0) {#if name == 'icon-laser' }
function create_if_block_77(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M31 18.796c0 .69-.456 1.204-1.131 1.204H1.316C.64 20 0 19.487 0 18.796v-17.5C0 .606.64 0 1.316 0h28.553C30.544 0 31 .606 31 1.296v17.5zM23.711 4.722c0 .307-.326.556-.729.556H8.11c-.403 0-.729-.249-.729-.556 0-.307.326-.555.73-.555h14.871c.403 0 .73.248.73.555zm-1.107 2.222c0 .307-.326.556-.729.556H9.217c-.402 0-.729-.249-.729-.556 0-.306.327-.555.73-.555h12.657c.403 0 .73.248.73.555zm-1.291 2.223c0 .307-.327.555-.73.555H10.417c-.403 0-.73-.248-.73-.555 0-.307.327-.556.73-.556h10.166c.403 0 .73.249.73.556zM20.072 11.5c0 .222-.327.444-.73.444h-7.675c-.403 0-.73-.248-.73-.555 0-.307.327-.556.73-.556h7.676c.402 0 .729.223.729.667zm-1.527 2.111c0 .307-.327.556-.73.556h-4.63c-.403 0-.73-.249-.73-.556 0-.307.327-.555.73-.555h4.63c.403 0 .73.248.73.555zm-1.661 2.222c0 .307-.363.556-.81.556h-1.148c-.447 0-.81-.249-.81-.556 0-.307.363-.555.81-.555h1.148c.447 0 .81.248.81.555z");
			attr(path, "fill", "#000");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-laser");
			attr(svg, "viewBox", "0 0 31 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (187:0) {#if name == 'icon-litecoin' }
function create_if_block_76(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M8 0C3.589 0 0 3.589 0 8s3.589 8 8 8 8-3.589 8-8-3.589-8-8-8zm3.063 11.817H4.754l.64-2.468-.868.32.228-.983.892-.32 1.051-4.16h2.56L8.366 7.36l1.028-.389-.297 1.006-1.028.366-.572 2.011h3.954l-.388 1.463z");
			attr(path, "fill", "#222");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-litecoin");
			attr(svg, "viewBox", "0 0 16 16");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (190:0) {#if name == 'icon-lock' }
function create_if_block_75(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#FFF");
			attr(path, "d", "M15.725 8.333H15.3V6.875C15.3 3.02 12.313 0 8.5 0 4.687 0 1.7 3.02 1.7 6.875v1.458h-.425C.571 8.333 0 8.893 0 9.583v9.167C0 19.44.571 20 1.275 20h14.45c.704 0 1.275-.56 1.275-1.25V9.583c0-.69-.571-1.25-1.275-1.25zM4.25 6.875C4.25 4.381 6.077 2.5 8.5 2.5s4.25 1.88 4.25 4.375v1.458h-8.5V6.875zm5.95 8.142c0 .91-.754 1.65-1.683 1.65h-.034c-.93 0-1.683-.74-1.683-1.65v-1.7c0-.911.754-1.65 1.683-1.65h.034c.93 0 1.683.739 1.683 1.65v1.7z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-lock");
			attr(svg, "viewBox", "0 0 17 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (193:0) {#if name == 'icon-login' }
function create_if_block_74(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M14.17 14.9a7.45 7.45 0 1 0-7.5-7.45 7.46 7.46 0 0 0 7.5 7.45zm0-10.91a3.45 3.45 0 1 1-3.5 3.46A3.46 3.46 0 0 1 14.17 4zM14.17 16.47A14.18 14.18 0 0 0 0 30.68c0 1.41.66 4 5.11 5.66a27.17 27.17 0 0 0 9.06 1.34c6.54 0 14.17-1.84 14.17-7a14.18 14.18 0 0 0-14.17-14.21zm0 17.21c-6.3 0-10.17-1.77-10.17-3a10.17 10.17 0 1 1 20.33 0c.01 1.23-3.86 3-10.16 3z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-login");
			attr(svg, "viewBox", "0 0 28.33 37.68");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (196:0) {#if name == 'icon-maestro' }
function create_if_block_73(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M13.838 5.572a7.252 7.252 0 0 0-1.952-3.17c1.263-1.018 2.7-1.527 4.31-1.527 1.223 0 2.357.303 3.402.908a6.746 6.746 0 0 1 2.484 2.484A6.67 6.67 0 0 1 23 7.678c0 1.224-.305 2.361-.918 3.412a6.765 6.765 0 0 1-2.484 2.483 6.658 6.658 0 0 1-3.402.909c-1.61 0-3.047-.51-4.31-1.527a7.265 7.265 0 0 0 1.952-3.17h-.56a7.103 7.103 0 0 1-1.778 2.823 6.824 6.824 0 0 1-1.797-2.823h-.56a7.244 7.244 0 0 0 1.932 3.17c-1.288 1.018-2.712 1.527-4.27 1.527a6.712 6.712 0 0 1-3.412-.909A6.659 6.659 0 0 1 .91 11.09a6.712 6.712 0 0 1-.908-3.412c0-1.223.303-2.36.908-3.41a6.659 6.659 0 0 1 2.484-2.485A6.712 6.712 0 0 1 6.804.875c1.56 0 2.983.509 4.271 1.527a7.244 7.244 0 0 0-1.932 3.17h.56A6.838 6.838 0 0 1 11.5 2.749a7.094 7.094 0 0 1 1.778 2.823h.56zM6.224 9.244l.676-3.44H5.548l-.929 2.125-.058-2.126H3.247l-.657 3.44h.773l.502-2.627.136 2.628h.773l1.14-2.648-.522 2.648h.832zm9.47-.657a.764.764 0 0 1-.213.02c-.193 0-.29-.065-.29-.193 0-.04.007-.084.02-.136l.213-1.16h.425l.116-.657h-.425l.115-.657h-.831l-.406 2.126-.02.231-.038.27a1.086 1.086 0 0 0-.039.252c0 .412.226.618.677.618.129 0 .322-.032.58-.097l.116-.617zM9.2 7.756c.052-.27.077-.458.077-.56a.868.868 0 0 0-.067-.349.63.63 0 0 0-.213-.261 1.106 1.106 0 0 0-.348-.164 1.641 1.641 0 0 0-.454-.059c-.168 0-.51.058-1.024.174l-.116.619.077-.02.136-.038c.232-.052.457-.078.676-.078.361 0 .542.09.542.27a.565.565 0 0 1-.01.078.68.68 0 0 0-.01.115 1.303 1.303 0 0 0-.348-.038c-.477 0-.845.097-1.102.29a.94.94 0 0 0-.387.792c0 .233.071.416.213.552.142.135.329.203.56.203.387 0 .677-.117.87-.349v.31h.696v-.077l.02-.116.02-.136.038-.174.154-.984zm2.648.734a2.48 2.48 0 0 1-.888.154c-.477 0-.716-.16-.716-.483v-.097h1.663c.077-.27.116-.496.116-.677 0-.309-.1-.557-.3-.744-.2-.186-.48-.28-.841-.28-.426 0-.777.158-1.053.474-.277.316-.415.712-.416 1.189 0 .838.477 1.257 1.43 1.257.322 0 .612-.033.87-.097l.135-.696zm8.775-.522c.013-.103.02-.212.02-.328 0-.374-.116-.68-.349-.919-.232-.238-.56-.357-.985-.357-.49 0-.883.155-1.179.464-.296.31-.444.71-.444 1.199 0 .85.438 1.275 1.314 1.275.953 0 1.495-.444 1.624-1.334h-.001zm-6.34-1.527a14.072 14.072 0 0 0-.753-.058c-.297 0-.541.045-.735.136a.935.935 0 0 0-.415.338.882.882 0 0 0-.126.474c0 .348.22.6.657.754a.218.218 0 0 0 .059.039c.116.051.193.086.231.106.038.019.067.044.087.077.02.032.03.067.029.106 0 .167-.168.251-.503.251-.18 0-.431-.032-.754-.097l-.116.638h.039l.154.039c.013 0 .046.003.097.01.052.006.097.01.136.01.077 0 .167.003.27.01.103.006.167.01.193.01.876 0 1.314-.31 1.314-.929 0-.36-.206-.625-.618-.792a2.953 2.953 0 0 1-.329-.155.13.13 0 0 1-.058-.116c0-.167.142-.25.425-.25.09 0 .29.012.599.038l.118-.639zM16.7 9.244c.142-.85.265-1.401.367-1.653.103-.251.258-.377.465-.377h.097l.097.059.31-.793a.296.296 0 0 0-.117-.039h-.154c-.245 0-.483.142-.715.426l.077-.406h-.773l-.503 2.784h.85v-.001zm-6.378-1.74c.09-.335.277-.502.56-.502.258 0 .387.122.387.367a.31.31 0 0 1-.01.077.258.258 0 0 0-.01.058h-.928.001zm8.988-.464c.296 0 .444.193.444.58 0 .039-.003.094-.01.164a1.88 1.88 0 0 0-.01.145.935.935 0 0 1-.154.377.8.8 0 0 1-.251.241.49.49 0 0 1-.232.077c-.322 0-.483-.212-.483-.638 0-.232.064-.448.193-.647.129-.2.296-.3.503-.3v.001zM7.46 8.413c0-.297.238-.445.715-.445.013 0 .036.004.067.01a.52.52 0 0 0 .106.01.812.812 0 0 1-.077.367.56.56 0 0 1-.523.329c-.193 0-.29-.09-.29-.27l.002-.001z");
			attr(path, "fill", "#444");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-maestro");
			attr(svg, "viewBox", "0 0 23 15");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (199:0) {#if name == 'icon-master' }
function create_if_block_72(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M17.375 8.166c-.537 0-.644.237-.644.437 0 .1.061.276.284.276.437 0 .53-.575.514-.699-.015 0-.03-.015-.154-.015zm-6.301-.975c-.399 0-.476.453-.476.499h.813c-.008-.039.07-.499-.337-.499zm-5.526.975c-.537 0-.645.237-.645.437 0 .1.061.276.285.276.437 0 .53-.575.514-.699-.016 0-.03-.015-.154-.015zm15.45-.899c-.323 0-.576.376-.576.937 0 .346.122.568.384.568.399 0 .583-.515.583-.899.008-.422-.13-.606-.392-.606zM16.292.951a6.7 6.7 0 0 0-4.368 1.62 7.007 7.007 0 0 1 1.88 3.024h-.322a6.772 6.772 0 0 0-1.789-2.817 6.723 6.723 0 0 0-1.788 2.817h-.323A7.004 7.004 0 0 1 11.58 2.47 6.817 6.817 0 0 0 7.097.798 6.859 6.859 0 0 0 .236 7.659a6.86 6.86 0 0 0 11.343 5.196 7.07 7.07 0 0 1-1.872-2.764h.33a6.727 6.727 0 0 0 1.657 2.449 6.731 6.731 0 0 0 1.659-2.449h.33a6.937 6.937 0 0 1-1.759 2.656 6.7 6.7 0 0 0 4.368 1.62c3.699 0 6.708-3.009 6.708-6.709C23 3.958 19.992.95 16.292.95v.001zM3.13 9.44l.414-2.618-.936 2.618h-.499l-.061-2.618-.445 2.618H.897l.584-3.477h1.066l.031 2.133.721-2.133H4.45L3.875 9.44H3.13zm2.495 0l.022-.277c-.015 0-.23.338-.752.338-.268 0-.705-.146-.705-.783 0-.813.66-1.081 1.297-1.081.1 0 .314.015.314.015s.023-.046.023-.184c0-.223-.2-.254-.468-.254-.475 0-.798.13-.798.13l.107-.63s.384-.16.883-.16c.26 0 1.005.03 1.005.882l-.284 2.01h-.644V9.44zm2.709-.89c0 .967-.937.928-1.105.928-.614 0-.799-.085-.822-.092l.1-.636c0-.008.307.107.645.107.199 0 .453-.015.453-.253 0-.354-.913-.269-.913-1.106 0-.737.544-.951 1.09-.951.414 0 .674.053.674.053l-.091.645s-.4-.03-.499-.03c-.26 0-.399.052-.399.237 0 .376.868.191.868 1.098h-.001zM9.4 7.306l-.207 1.266c-.016.1.015.238.268.238.061 0 .138-.023.185-.023l-.092.622c-.077.023-.284.092-.545.092-.338 0-.583-.192-.583-.622 0-.292.414-2.67.43-2.686h.73l-.078.43h.36l-.091.683H9.4zm1.772 1.55c.369 0 .775-.176.775-.176l-.13.705s-.238.123-.768.123c-.583 0-1.258-.246-1.258-1.274 0-.89.544-1.681 1.274-1.681.798 0 1.044.583 1.044 1.067 0 .191-.092.668-.092.668h-1.49c0-.016-.137.567.645.567v.001zm2.426-1.42c-.506-.176-.544.799-.76 2.01h-.752l.453-2.824h.683l-.06.407s.245-.445.567-.445a.92.92 0 0 1 .138.007c-.092.2-.185.376-.269.844v.001zm2.096 1.965s-.392.1-.637.1c-.868 0-1.313-.6-1.313-1.512 0-1.374.822-2.103 1.666-2.103.376 0 .821.176.821.176l-.122.775s-.299-.207-.668-.207c-.498 0-.944.476-.944 1.335 0 .423.208.821.722.821.246 0 .606-.176.606-.176l-.13.79-.001.001zm1.756.039l.023-.277c-.016 0-.23.338-.752.338-.268 0-.706-.146-.706-.783 0-.813.66-1.081 1.297-1.081.1 0 .315.015.315.015s.023-.046.023-.184c0-.223-.2-.254-.468-.254-.476 0-.799.13-.799.13l.108-.63s.384-.16.882-.16c.26 0 1.006.03 1.006.882l-.284 2.01c-.008-.007-.645-.007-.645-.007zm1.512.008h-.752l.453-2.825h.683l-.06.407s.245-.446.567-.446c.091 0 .138.008.138.008-.1.2-.185.376-.269.844-.506-.176-.544.807-.76 2.01v.002zm2.234-.008l.03-.26s-.245.306-.683.306c-.606 0-.906-.583-.906-1.182 0-.929.561-1.735 1.228-1.735.43 0 .706.376.706.376l.16-.975h.73l-.56 3.469h-.706zm1.367-.015a.195.195 0 0 1-.108.03.178.178 0 0 1-.107-.03.226.226 0 0 1-.085-.085.187.187 0 0 1-.03-.108c0-.038.007-.077.03-.107a.226.226 0 0 1 .085-.085.187.187 0 0 1 .107-.03c.039 0 .077.007.108.03.038.016.061.046.085.085.023.038.03.069.03.107a.178.178 0 0 1-.03.108.218.218 0 0 1-.085.085zm-.024-.353a.197.197 0 0 0-.183 0 .156.156 0 0 0-.07.069.197.197 0 0 0 0 .183c.016.03.039.054.07.07a.197.197 0 0 0 .183 0 .151.151 0 0 0 .07-.07.197.197 0 0 0 0-.183.156.156 0 0 0-.07-.07zm-.03.284l-.023-.039a.18.18 0 0 0-.039-.053c-.008-.007-.015-.008-.03-.008h-.023v.1h-.038v-.238h.084c.031 0 .047 0 .062.008.014.008.022.016.03.023.008.007.008.022.008.038s-.008.03-.016.046c-.016.016-.03.023-.046.023.008 0 .016.008.023.016.006.008.022.023.038.046l.03.047h-.06v-.01zm-.015-.17c0-.008 0-.016-.008-.016l-.016-.015c-.008 0-.023-.008-.038-.008h-.047v.069h.047c.022 0 .038 0 .046-.008.016-.008.016-.016.016-.023v.001z");
			attr(path, "fill", "#444");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-master");
			attr(svg, "viewBox", "0 0 23 15");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (202:0) {#if name == 'icon-minus' }
function create_if_block_71(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M.5 1C.5.7.7.5 1 .5h8a.5.5 0 110 1H1A.5.5 0 01.5 1z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-minus");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 10 2");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (207:0) {#if name == 'icon-padlock' }
function create_if_block_70(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				class: true,
				role: true,
				viewBox: true,
				fill: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				d: true,
				"clip-rule": true,
				fill: true
			});

			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "d", "M5.03 1.79A3.73 3.73 0 018 .5c1.28 0 2.28.48 2.97 1.29.67.8 1 1.87 1.03 3V7.5h3c.28 0 .5.22.5.5v12a.5.5 0 01-.5.5H1a.5.5 0 01-.5-.5V8c0-.28.22-.5.5-.5h3V4.8c0-1.1.36-2.15 1.03-3.01zM11 6.4v1.09H5V4.82c.03-.99.31-1.82.8-2.4A2.75 2.75 0 018 1.49c1.01 0 1.73.37 2.2.93.49.58.77 1.41.8 2.4V6.4zM1.5 8.49v11h13v-11h-13zm6.51 2.5a1.5 1.5 0 00-.7 2.82v2.5a.68.68 0 001.36 0v-2.47A1.5 1.5 0 008 11l.01-.01z");
			attr(path, "clip-rule", "evenodd");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "class", "icon icon-padlock");
			attr(svg, "role", "presentation");
			attr(svg, "viewBox", "0 0 16 21");
			attr(svg, "fill", "none");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (212:0) {#if name == 'icon-pause' }
function create_if_block_69(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				viewBox: true,
				fill: true,
				xmlns: true,
				focusable: true,
				"aria-hidden": true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M1.2 0.75C0.813401 0.75 0.5 0.985051 0.5 1.275V10.725C0.5 11.0149 0.813401 11.25 1.2 11.25C1.5866 11.25 1.9 11.0149 1.9 10.725V1.275C1.9 0.985051 1.5866 0.75 1.2 0.75Z");
			attr(path0, "fill", "currentColor");
			attr(path1, "d", "M6.8 0.75C6.4134 0.75 6.1 0.985051 6.1 1.275V10.725C6.1 11.0149 6.4134 11.25 6.8 11.25C7.1866 11.25 7.5 11.0149 7.5 10.725V1.275C7.5 0.985051 7.1866 0.75 6.8 0.75Z");
			attr(path1, "fill", "currentColor");
			attr(svg, "class", "icon icon-pause");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "viewBox", "0 0 8 12");
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "focusable", "false");
			attr(svg, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (218:0) {#if name == 'icon-paypal' }
function create_if_block_68(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M33.691 7.141h2.012l-1.66 7.5h-1.992zM5.332 7.16q.918 0 1.553.674t.381 1.865q-.234 1.152-1.064 1.807t-1.963.654H2.696l-.547 2.48H.001l1.641-7.48h3.691zm19.141 0q.918 0 1.563.674t.391 1.865q-.156.762-.596 1.328t-1.074.85-1.396.283h-1.523l-.527 2.48h-2.148l1.641-7.48h3.672zM8.027 9.055q.098-.02.42-.098t.537-.127.566-.098.684-.049q.547-.02 1.025.078t.879.313.566.645.029 1.016l-.82 3.906H9.94l.137-.586q-.41.41-1.035.586t-1.182.088-.889-.615-.176-1.387q.215-1.016 1.221-1.455t2.744-.439q.059-.293-.059-.469t-.352-.244-.625-.049q-.508.02-1.094.156t-.781.254zm19.18 0q.117-.02.342-.078t.42-.107.439-.088.508-.068.537-.029q.566-.02 1.045.078t.879.313.576.645.039 1.016l-.84 3.906H29.16l.137-.586q-.41.41-1.045.586t-1.201.088-.898-.615-.176-1.387q.137-.703.684-1.123t1.348-.596 1.973-.176q.098-.449-.166-.615t-.869-.146q-.352 0-.762.078t-.713.166-.459.166zM4.004 10.734q.273 0 .537-.137t.449-.371.244-.527q.117-.43-.098-.723t-.625-.293H3.476l-.469 2.051h.996zm19.16 0q.41 0 .781-.303t.469-.732-.127-.723-.615-.293h-1.094l-.43 2.051h1.016zm-9.531-1.933l.801 5.879-1.445 2.461h2.207l4.688-8.34h-2.031L15.9 12.278l-.313-3.477h-1.953zm-3.242 3.887q0-.195.098-.527h-.508q-.918 0-1.172.488-.195.352-.01.586t.537.234q.859-.039 1.055-.781zm19.199 0q.039-.332.117-.527h-.488q-.977 0-1.191.488-.195.352-.01.586t.537.234q.879-.039 1.035-.781z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-paypal");
			attr(svg, "viewBox", "0 0 36 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (221:0) {#if name == 'icon-pin' }
function create_if_block_67(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M4 12a12 12 0 0 1 24 0c0 8-12 20-12 20S4 20 4 12m7 0a5 5 0 0 0 10 0 5 5 0 0 0-10 0z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-pin");
			attr(svg, "viewBox", "0 0 32 32");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (224:0) {#if name == 'icon-pinterest' }
function create_if_block_66(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "currentColor");
			attr(path, "d", "M8.48.58a8.42 8.42 0 015.9 2.45 8.42 8.42 0 011.33 10.08 8.28 8.28 0 01-7.23 4.16 8.5 8.5 0 01-2.37-.32c.42-.68.7-1.29.85-1.8l.59-2.29c.14.28.41.52.8.73.4.2.8.31 1.24.31.87 0 1.65-.25 2.34-.75a4.87 4.87 0 001.6-2.05 7.3 7.3 0 00.56-2.93c0-1.3-.5-2.41-1.49-3.36a5.27 5.27 0 00-3.8-1.43c-.93 0-1.8.16-2.58.48A5.23 5.23 0 002.85 8.6c0 .75.14 1.41.43 1.98.28.56.7.96 1.27 1.2.1.04.19.04.26 0 .07-.03.12-.1.15-.2l.18-.68c.05-.15.02-.3-.11-.45a2.35 2.35 0 01-.57-1.63A3.96 3.96 0 018.6 4.8c1.09 0 1.94.3 2.54.89.61.6.92 1.37.92 2.32 0 .8-.11 1.54-.33 2.21a3.97 3.97 0 01-.93 1.62c-.4.4-.87.6-1.4.6-.43 0-.78-.15-1.06-.47-.27-.32-.36-.7-.26-1.13a111.14 111.14 0 01.47-1.6l.18-.73c.06-.26.09-.47.09-.65 0-.36-.1-.66-.28-.89-.2-.23-.47-.35-.83-.35-.45 0-.83.2-1.13.62-.3.41-.46.93-.46 1.56a4.1 4.1 0 00.18 1.15l.06.15c-.6 2.58-.95 4.1-1.08 4.54-.12.55-.16 1.2-.13 1.94a8.4 8.4 0 01-5-7.65c0-2.3.81-4.28 2.44-5.9A8.04 8.04 0 018.48.57z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-pinterest");
			attr(svg, "viewBox", "0 0 17 18");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (229:0) {#if name == 'icon-play-video' }
function create_if_block_65(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M99.594 0H4.5A4.5 4.5 0 0 0 0 4.5v62.708a4.5 4.5 0 0 0 4.5 4.5h95.094a4.5 4.5 0 0 0 4.5-4.5V4.5a4.5 4.5 0 0 0-4.5-4.5M70.82 36.72L40.67 54.127a1 1 0 0 1-1.5-.866V18.447a1 1 0 0 1 1.5-.866l30.15 17.407a1 1 0 0 1 0 1.732");
			attr(path, "fill", "#221F1F");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-play-video");
			attr(svg, "viewBox", "0 0 105 72");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (232:0) {#if name == 'icon-play' }
function create_if_block_64(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M1.48177 0.814643C0.81532 0.448245 0 0.930414 0 1.69094V12.2081C0 12.991 0.858787 13.4702 1.52503 13.0592L10.5398 7.49813C11.1918 7.09588 11.1679 6.13985 10.4965 5.77075L1.48177 0.814643Z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-play");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 10 14");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (235:0) {#if name == 'icon-plus' }
function create_if_block_63(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "clip-rule", "evenodd");
			attr(path, "d", "M1 4.51a.5.5 0 000 1h3.5l.01 3.5a.5.5 0 001-.01V5.5l3.5-.01a.5.5 0 00-.01-1H5.5L5.49.99a.5.5 0 00-1 .01v3.5l-3.5.01H1z");
			attr(path, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-plus");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 10 10");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (240:0) {#if name == 'icon-quote' }
function create_if_block_62(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M10.208 17.711h6.124v16.332H0V21.684C0 8.184 5.444.956 16.332 0v6.125c-4.083 1.14-6.124 4.414-6.124 9.82v1.766zm24.498 0h6.124v16.332H24.498V21.684C24.498 8.184 29.942.956 40.83 0v6.125c-4.083 1.14-6.124 4.414-6.124 9.82v1.766z");
			attr(path, "fill", "#000");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-quote");
			attr(svg, "viewBox", "0 0 41 35");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (243:0) {#if name == 'icon-remove' }
function create_if_block_61(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				viewBox: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M14 3h-3.53a3.07 3.07 0 00-.6-1.65C9.44.82 8.8.5 8 .5s-1.44.32-1.87.85A3.06 3.06 0 005.53 3H2a.5.5 0 000 1h1.25v10c0 .28.22.5.5.5h8.5a.5.5 0 00.5-.5V4H14a.5.5 0 000-1zM6.91 1.98c.23-.29.58-.48 1.09-.48s.85.19 1.09.48c.2.24.3.6.36 1.02h-2.9c.05-.42.17-.78.36-1.02zm4.84 11.52h-7.5V4h7.5v9.5z");
			attr(path0, "fill", "currentColor");
			attr(path1, "d", "M6.55 5.25a.5.5 0 00-.5.5v6a.5.5 0 001 0v-6a.5.5 0 00-.5-.5zM9.45 5.25a.5.5 0 00-.5.5v6a.5.5 0 001 0v-6a.5.5 0 00-.5-.5z");
			attr(path1, "fill", "currentColor");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "viewBox", "0 0 16 16");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-remove");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (249:0) {#if name == 'icon-rss' }
function create_if_block_60(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "fill", "#444");
			attr(path0, "d", "M5.903 16.586a2.489 2.489 0 1 1-4.977 0 2.489 2.489 0 0 1 4.977 0zM12.956 19.075H9.43c0-4.688-3.817-8.505-8.505-8.505V7.044c6.638 0 12.031 5.393 12.031 12.031z");
			attr(path1, "fill", "#444");
			attr(path1, "d", "M15.445 19.075c0-8.028-6.493-14.52-14.52-14.52V.925c10.019 0 18.15 8.131 18.15 18.15h-3.63z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-rss");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (252:0) {#if name == 'icon-search' }
function create_if_block_59(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M35.6 36l-9.8-9.8c4.1-5.4 3.6-13.2-1.3-18.1-5.4-5.4-14.2-5.4-19.7 0-5.4 5.4-5.4 14.2 0 19.7 2.6 2.6 6.1 4.1 9.8 4.1 3 0 5.9-1 8.3-2.8l9.8 9.8c.4.4.9.6 1.4.6s1-.2 1.4-.6c.9-.9.9-2.1.1-2.9zm-20.9-8.2c-2.6 0-5.1-1-7-2.9-3.9-3.9-3.9-10.1 0-14C9.6 9 12.2 8 14.7 8s5.1 1 7 2.9c3.9 3.9 3.9 10.1 0 14-1.9 1.9-4.4 2.9-7 2.9z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-search");
			attr(svg, "viewBox", "0 0 37 40");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (255:0) {#if name == 'icon-share' }
function create_if_block_58(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				width: true,
				height: true,
				viewBox: true,
				class: true,
				fill: true,
				xmlns: true,
				"aria-hidden": true,
				focusable: true
			});

			var svg_nodes = children(svg);

			path0 = claim_svg_element(svg_nodes, "path", {
				d: true,
				stroke: true,
				"stroke-linecap": true,
				"stroke-linejoin": true
			});

			children(path0).forEach(detach);

			path1 = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path1).forEach(detach);

			path2 = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path2).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M1.625 8.125V10.2917C1.625 10.579 1.73914 10.8545 1.9423 11.0577C2.14547 11.2609 2.42102 11.375 2.70833 11.375H10.2917C10.579 11.375 10.8545 11.2609 11.0577 11.0577C11.2609 10.8545 11.375 10.579 11.375 10.2917V8.125");
			attr(path0, "stroke", "currentColor");
			attr(path0, "stroke-linecap", "round");
			attr(path0, "stroke-linejoin", "round");
			attr(path1, "fill-rule", "evenodd");
			attr(path1, "clip-rule", "evenodd");
			attr(path1, "d", "M6.14775 1.27137C6.34301 1.0761 6.65959 1.0761 6.85485 1.27137L9.56319 3.9797C9.75845 4.17496 9.75845 4.49154 9.56319 4.6868C9.36793 4.88207 9.05135 4.88207 8.85609 4.6868L6.5013 2.33203L4.14652 4.6868C3.95126 4.88207 3.63468 4.88207 3.43942 4.6868C3.24415 4.49154 3.24415 4.17496 3.43942 3.9797L6.14775 1.27137Z");
			attr(path1, "fill", "currentColor");
			attr(path2, "fill-rule", "evenodd");
			attr(path2, "clip-rule", "evenodd");
			attr(path2, "d", "M6.5 1.125C6.77614 1.125 7 1.34886 7 1.625V8.125C7 8.40114 6.77614 8.625 6.5 8.625C6.22386 8.625 6 8.40114 6 8.125V1.625C6 1.34886 6.22386 1.125 6.5 1.125Z");
			attr(path2, "fill", "currentColor");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "height", "12");
			attr(svg, "viewBox", "0 0 13 12");
			attr(svg, "class", "icon icon-share");
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (262:0) {#if name == 'icon-shopify-logo' }
function create_if_block_57(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#999");
			attr(path, "d", "M33.3 8.9s0-.2-.1-.3c-.1-.1-.2-.1-.2-.1l-3.4-.2-2.1-2.1c-.1-.1-.2-.1-.3-.1l-1.8 36.1L38 39.5 33.3 8.9zm-7.5-3l-.9.3c-.6-1.6-1.3-2.8-2.3-3.5-.7-.5-1.5-.7-2.3-.6l-.6-.6c-.9-.7-2.1-.9-3.6-.3C11.8 2.7 10 8.3 9.3 11l-3.8 1.1s-.9.2-1.1.5c-.2.3-.3 1-.3 1L.9 37.9l23.6 4.4L26.3 6c-.2-.2-.4-.1-.5-.1zm-5.7 1.7L16 8.9c.5-2.1 1.6-4.3 3.6-5.1.4 1 .5 2.5.5 3.8zm-3.5-5.2c.9-.3 1.6-.3 2.1 0-2.7 1.2-3.9 4.3-4.4 6.9l-3.3 1c.7-2.5 2.3-6.7 5.6-7.9zm2.3 17.9c-.2-.1-.4-.2-.7-.3-.3-.1-.5-.2-.8-.3-.3-.1-.6-.1-1-.2h-1.1c-.3 0-.6.1-.9.2-.3.1-.5.2-.7.4-.2.2-.3.4-.4.6-.1.2-.2.5-.2.7 0 .2 0 .4.1.6l.3.6.6.6c.2.2.5.4.8.6.5.3.9.6 1.4 1 .5.4.9.8 1.2 1.3.4.5.7 1 .9 1.7.2.6.3 1.3.3 2.1-.1 1.2-.3 2.3-.8 3.2-.4.9-1.1 1.6-1.8 2.1s-1.6.8-2.5.9c-.9.1-1.9.1-2.8-.2-.5-.1-.9-.3-1.3-.4l-1.2-.6c-.3-.2-.7-.4-.9-.6-.3-.2-.5-.4-.7-.7L7.8 30c.2.2.4.3.7.5.3.2.6.4.9.5.3.2.7.3 1 .5.4.1.7.2 1.1.3h.8c.2-.1.5-.2.6-.3.2-.1.3-.3.4-.5.1-.2.1-.4.2-.7 0-.2 0-.5-.1-.7-.1-.2-.2-.4-.3-.7-.1-.2-.3-.4-.6-.7-.2-.2-.5-.5-.9-.7-.4-.3-.8-.6-1.2-1-.3-.4-.7-.7-.9-1.2-.2-.4-.4-.9-.6-1.4-.1-.5-.2-1-.2-1.6 0-1 .2-1.8.6-2.6.3-.8.8-1.5 1.4-2.2.6-.6 1.3-1.2 2.2-1.6.9-.4 1.8-.7 2.9-.9.5-.1 1-.1 1.4-.1.5 0 .9 0 1.3.1s.8.1 1.1.2l.9.3-1.6 4.8zm2.6-13.1v-.5c0-1.3-.2-2.4-.5-3.2.3 0 .6.1.9.3.8.5 1.3 1.6 1.7 2.8l-2.1.6zM45.3 29.6c.9.5 2.5 1.1 4.1 1.1 1.4 0 2.2-.8 2.2-1.7 0-.9-.5-1.5-2.1-2.4-1.9-1.1-3.3-2.6-3.3-4.6 0-3.5 3-6 7.4-6 1.9 0 3.4.4 4.2.8l-1.2 3.5c-.7-.3-1.8-.7-3.1-.7-1.4 0-2.3.6-2.3 1.7 0 .8.7 1.4 1.9 2 2 1.1 3.6 2.6 3.6 4.7 0 4-3.2 6.2-7.7 6.1-2.1 0-4-.6-4.9-1.2l1.2-3.3zm12.4 4.5l4.9-25.2h5l-1.9 9.8h.1c1.3-1.6 3.1-2.7 5.3-2.7 2.6 0 4.1 1.7 4.1 4.5 0 .9-.1 2.2-.4 3.3l-2 10.3h-5l1.9-9.9c.1-.7.2-1.5.2-2.2 0-1.1-.4-1.8-1.6-1.8-1.6 0-3.3 2-4 5.3l-1.7 8.7h-4.9v-.1zM93.3 23c0 6.1-4 11.4-9.9 11.4-4.5 0-6.9-3.1-6.9-6.9 0-6 4-11.4 10-11.4 4.7 0 6.8 3.3 6.8 6.9zm-11.7 4.3c0 1.8.7 3.2 2.4 3.2 2.7 0 4.1-4.7 4.1-7.7 0-1.5-.6-3-2.4-3-2.6.1-4.1 4.7-4.1 7.5zm10.5 13.8L95.6 23c.4-2 .8-4.7 1-6.6h4.4l-.3 2.8h.1c1.3-1.9 3.3-3 5.3-3 3.7 0 5.2 2.9 5.2 6.3 0 6-3.9 12.1-9.7 12.1-1.2 0-2.4-.5-2.9-.5h-.1l-1.4 7h-5.1zm7.2-11.2c.5.4 1.2.7 2.1.7 2.8 0 4.7-4.6 4.7-7.8 0-1.3-.5-2.7-2-2.7-1.7 0-3.4 2-4 5.1l-.8 4.7zm12.2 4.2l3.4-17.7h5.1l-3.4 17.7h-5.1zm6.5-19.6c-1.4 0-2.4-1.1-2.4-2.6 0-1.6 1.3-2.9 2.9-2.9 1.5 0 2.5 1.1 2.5 2.6 0 1.8-1.4 2.9-3 2.9zm2.9 19.6l2.7-14h-2.3l.7-3.7h2.3l.1-.8c.4-2.1 1.2-4.2 2.9-5.6 1.3-1.1 3.1-1.6 4.9-1.6 1.2 0 2.1.2 2.7.4l-1 3.9c-.4-.1-.9-.3-1.6-.3-1.7 0-2.7 1.5-3 3.2l-.2.8h3.5l-.7 3.7h-3.5l-2.7 14h-4.8zm18-17.7l.8 7.9c.2 1.8.4 3.3.4 4.2h.1c.4-.9.8-2.3 1.5-4.2l3.1-7.9h5.2l-6.1 13.1c-2.2 4.5-4.3 7.7-6.6 9.9-1.8 1.7-3.9 2.5-4.9 2.7l-1.4-4.2c.8-.3 1.9-.7 2.8-1.4 1.2-.8 2.1-1.9 2.7-3 .1-.3.2-.5.1-1.9l-3-15.2h5.3z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-shopify-logo");
			attr(svg, "viewBox", "0 0 150 43");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (265:0) {#if name == 'icon-shopify_pay' }
function create_if_block_56(ctx) {
	let svg;
	let g2;
	let path0;
	let g0;
	let path1;
	let g1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			g2 = svg_element("g");
			path0 = svg_element("path");
			g0 = svg_element("g");
			path1 = svg_element("path");
			g1 = svg_element("g");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			g2 = claim_svg_element(svg_nodes, "g", { fill: true, "fill-rule": true });
			var g2_nodes = children(g2);
			path0 = claim_svg_element(g2_nodes, "path", { d: true });
			children(path0).forEach(detach);
			g0 = claim_svg_element(g2_nodes, "g", {});
			var g0_nodes = children(g0);
			path1 = claim_svg_element(g0_nodes, "path", { d: true });
			children(path1).forEach(detach);
			g0_nodes.forEach(detach);
			g1 = claim_svg_element(g2_nodes, "g", {});
			var g1_nodes = children(g1);
			path2 = claim_svg_element(g1_nodes, "path", { d: true });
			children(path2).forEach(detach);
			g1_nodes.forEach(detach);
			g2_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M75.05 33.928c-1.85-.993-2.803-1.83-2.803-2.98 0-1.464 1.322-2.404 3.385-2.404 1.567.036 3.112.374 4.549.993l1.692-5.124s-1.557-1.202-6.135-1.202c-6.374 0-10.79 3.607-10.79 8.679 0 2.875 2.064 5.071 4.814 6.64 2.222 1.254 3.014 2.143 3.014 3.45 0 1.36-1.11 2.458-3.173 2.458a14.386 14.386 0 0 1-5.977-1.569l-1.8 5.124a13.893 13.893 0 0 0 7.193 1.78c6.558 0 11.265-3.19 11.265-8.941.003-3.087-2.377-5.283-5.233-6.904zM100.802 23.098a9.913 9.913 0 0 0-7.722 3.816l-.105-.052 2.803-14.483h-7.299l-7.088 36.86h7.299l2.433-12.6c.952-4.759 3.438-7.686 5.765-7.686 1.64 0 2.274 1.098 2.274 2.667 0 1.07-.107 2.139-.318 3.189l-2.75 14.43h7.299l2.856-14.9a26.66 26.66 0 0 0 .529-4.706c0-4.077-2.168-6.535-5.976-6.535zM123.38 23.21c-8.78 0-14.597 7.843-14.597 16.575 0 5.595 3.49 10.091 10.048 10.091 8.622 0 14.439-7.633 14.439-16.574 0-5.176-3.067-10.091-9.89-10.091zm-3.6 21.122c-2.486 0-3.544-2.089-3.544-4.705 0-4.131 2.169-10.876 6.135-10.876 2.591 0 3.438 2.196 3.438 4.34.004 4.447-2.165 11.243-6.025 11.243l-.004-.002zM151.894 23.21c-4.926 0-7.722 4.288-7.722 4.288h-.105l.423-3.868h-6.453c-.317 2.614-.899 6.588-1.481 9.568l-5.078 26.404h7.299l2.01-10.666h.156a8.588 8.588 0 0 0 4.284.941c8.568 0 14.174-8.68 14.174-17.464.003-4.862-2.166-9.202-7.507-9.202zm-6.981 21.228a4.667 4.667 0 0 1-3.015-1.045l1.216-6.745c.846-4.497 3.226-7.477 5.765-7.477 2.22 0 2.909 2.04 2.909 3.974-.001 4.653-2.803 11.294-6.875 11.294zM170.091 13.158a4.19 4.19 0 0 0-2.977 1.224 4.093 4.093 0 0 0-1.2 2.958c0 2.144 1.375 3.608 3.438 3.608h.105a4.147 4.147 0 0 0 3.06-1.172 4.05 4.05 0 0 0 1.224-3.01 3.41 3.41 0 0 0-1.012-2.609 3.492 3.492 0 0 0-2.638-1zM159.652 49.551h7.299l4.972-25.567h-7.351zM190.926 24.157h-5.078l.265-1.202c.423-2.458 1.904-4.654 4.337-4.654.79.002 1.575.125 2.327.366l1.428-5.648a9.734 9.734 0 0 0-3.967-.627 10.916 10.916 0 0 0-7.138 2.406c-2.486 2.089-3.65 5.124-4.23 8.156l-.212 1.202h-3.384l-1.058 5.438h3.385l-3.862 20.182h7.299l3.862-20.18h5.024l1.002-5.439zM207.869 23.984s-4.563 11.365-6.611 17.568h-.106c-.14-1.997-1.8-17.568-1.8-17.568h-7.67l4.393 23.478c.117.405.06.84-.157 1.202a12.396 12.396 0 0 1-3.967 4.34 15.86 15.86 0 0 1-4.125 2.039l2.01 6.118a16.724 16.724 0 0 0 7.14-3.922c3.332-3.085 6.399-7.843 9.572-14.327l8.939-18.927h-7.618z");
			attr(path1, "d", "M35.217 59.977l18.067-3.88S46.77 12.548 46.73 12.249a.577.577 0 0 0-.525-.482c-.218-.018-4.835-.356-4.835-.356s-3.208-3.147-3.558-3.495a.774.774 0 0 0-.305-.18l-2.29 52.24zM36.218 7.023c-.07.013-.134.027-.181.04l-1.795.549c-1.071-3.047-2.961-5.847-6.286-5.847-.092 0-.187.004-.281.01A4.05 4.05 0 0 0 24.545 0c-7.749 0-11.448 9.574-12.609 14.438L6.516 16.1c-1.68.522-1.733.574-1.957 2.139C4.396 19.424 0 53.034 0 53.034l33.928 6.284 2.29-52.295zM27.42 9.366V9.7l-5.988 1.829c1.153-4.398 3.313-6.522 5.203-7.324.582 1.658.848 3.408.785 5.162zm-3.088-7.312c.358.007.705.123.994.331-2.483 1.155-5.143 4.064-6.268 9.872l-4.732 1.449c1.318-4.43 4.443-11.652 10.006-11.652zM25.67 27.95a10.626 10.626 0 0 0-4.461-1.059c-3.6 0-3.785 2.236-3.785 2.8 0 3.073 8.105 4.255 8.105 11.45 0 5.664-3.634 9.312-8.535 9.312a11.942 11.942 0 0 1-8.887-3.618l1.575-5.142s3.091 2.623 5.7 2.623a2.314 2.314 0 0 0 1.697-.638 2.26 2.26 0 0 0 .7-1.657c0-4.01-6.653-4.19-6.653-10.778 0-5.545 4.026-10.909 12.153-10.909a10.096 10.096 0 0 1 4.679.887l-2.288 6.729zm3.09-24.117c1.712.213 2.854 2.14 3.588 4.358l-2.895.887v-.62a13.902 13.902 0 0 0-.694-4.625z");
			attr(path2, "d", "M219 61l5.087-27.561a178.392 178.392 0 0 0 1.43-8.9h2.173l-.794 5.232h.106C229.28 26.21 232.46 24 235.852 24c4.822 0 6.624 4.153 6.624 8.414 0 8.737-5.882 18.554-13.99 18.554a10.28 10.28 0 0 1-5.087-1.133h-.106l-2.014 11.163L219 61zm4.769-13.537a7.91 7.91 0 0 0 4.928 1.456c6.73 0 11.392-9.709 11.392-16.344 0-3.074-1.166-6.526-4.928-6.526-3.603 0-8.322 4.692-9.75 12.513l-1.642 8.9zM259.823 50.43c.06-2.33.272-4.655.636-6.958h-.103c-2.914 5.718-6.144 7.498-9.489 7.498-3.869 0-6.2-3.237-6.2-7.875 0-8.845 6.2-19.094 16.056-19.094a16.416 16.416 0 0 1 5.14.756l-2.702 13.916a56.835 56.835 0 0 0-1.112 11.757h-2.226zm3.391-24.001a9.016 9.016 0 0 0-3.073-.378c-7.31 0-13.035 8.306-13.088 16.45-.053 3.399.9 6.419 4.345 6.419 4.133 0 8.797-6.31 10.015-12.998l1.801-9.493zM272.167 24l2.544 15.642c.53 2.912.794 4.692 1.059 7.065h.107c.74-1.888 1.641-3.884 2.861-6.526L285.999 24h2.438l-9.487 20.663c-2.28 5.066-4.667 9.658-8.16 13.053a14.235 14.235 0 0 1-5.99 3.829l-.689-2.05a17.228 17.228 0 0 0 4.61-2.75 22.06 22.06 0 0 0 5.14-6.797 1.85 1.85 0 0 0 .159-1.294L269.835 24h2.332z");
			attr(g2, "fill", "#000");
			attr(g2, "fill-rule", "nonzero");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon--wide icon-shopify_pay");
			attr(svg, "viewBox", "0 0 289 62");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, g2);
			append_hydration(g2, path0);
			append_hydration(g2, g0);
			append_hydration(g0, path1);
			append_hydration(g2, g1);
			append_hydration(g1, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (268:0) {#if name == 'icon-snapchat' }
function create_if_block_55(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M390.3 282.3a27.2 27.2 0 00-13.8-14.7l-3-1.6-5.4-2.7a117 117 0 01-42.7-36.6 83 83 0 01-7.3-13c-.8-2.4-.8-3.8-.2-5 .6-1 1.4-1.9 2.4-2.5a1073.6 1073.6 0 0117.7-11.7 49.5 49.5 0 0016-17.1 33.6 33.6 0 00-30.8-49.7 44.8 44.8 0 00-11.8 1.6c.1-9 0-18.6-.9-27.9A105 105 0 00257.4 16 122 122 0 00196 .3c-22.5 0-43 5.3-61.3 15.7a104.6 104.6 0 00-53.2 85.4c-.8 9.4-1 19-.8 27.9a44.8 44.8 0 00-12-1.6 33.7 33.7 0 00-30.8 49.7A49.6 49.6 0 0054 194.6l9.1 6 8.3 5.4c1 .7 2 1.6 2.6 2.7.7 1.3.7 2.7-.2 5.3-2 4.5-4.5 8.7-7.3 12.8a116.5 116.5 0 01-41.4 36c-9.5 5-19.3 8.3-23.4 19.5-3.1 8.5-1 18.2 6.9 26.3 2.9 3 6.2 5.6 10 7.6 7.7 4.2 15.9 7.5 24.4 9.8a16 16 0 015 2.2c2.9 2.5 2.4 6.3 6.3 12 2 2.8 4.4 5.3 7.2 7.3 8.1 5.6 17.2 6 26.8 6.3 8.7.3 18.5.7 29.8 4.4 4.7 1.5 9.5 4.5 15.1 8a110 110 0 0062.8 19.6c30.8 0 49.4-11.4 63-19.7a77.9 77.9 0 0114.9-7.9c11.2-3.7 21-4 29.8-4.4 9.6-.4 18.7-.7 26.8-6.3 3.3-2.3 6.2-5.4 8.2-9 2.8-4.7 2.7-8 5.3-10.3 1.4-1 3-1.7 4.6-2.1 8.7-2.3 17-5.6 24.8-9.9A39 39 0 00384 308l.1-.1c7.5-8 9.4-17.4 6.3-25.6zM362.9 297c-16.8 9.2-27.9 8.3-36.5 13.8-7.4 4.8-3 15-8.4 18.6-6.5 4.6-26-.3-51 8-20.6 6.8-33.8 26.5-71 26.5-37.1 0-50-19.6-71-26.6-25-8.2-44.4-3.4-51-8-5.3-3.6-1-13.8-8.3-18.5-8.7-5.6-19.8-4.6-36.5-13.8-10.7-5.9-4.6-9.5-1.1-11.2 60.6-29.4 70.3-74.7 70.7-78 .5-4.1 1.1-7.3-3.4-11.5-4.3-4-23.5-15.8-28.9-19.6-8.8-6.1-12.6-12.3-9.8-19.8 2-5.3 6.9-7.2 12-7.2 1.6 0 3.2.2 4.8.5 9.7 2.1 19.1 7 24.5 8.3l2 .2c3 0 4-1.4 3.8-4.7-.7-10.6-2.2-31.3-.5-50.6a80 80 0 0121-51.3A93.7 93.7 0 01196 22.3c43.8 0 66.8 24.1 71.7 29.7a80 80 0 0121 51.3c1.7 19.3.2 40-.5 50.5-.2 3.5.9 4.8 3.8 4.8.6 0 1.3 0 2-.3 5.4-1.3 14.8-6.1 24.5-8.2a19 19 0 014.8-.5c5.1 0 10 2 12 7.2 2.8 7.5-1 13.7-9.9 19.8-5.3 3.7-24.5 15.6-28.8 19.6-4.5 4.2-4 7.4-3.4 11.4.4 3.5 10 48.8 70.7 78 3.6 1.8 9.6 5.5-1 11.4z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-snapchat");
			attr(svg, "viewBox", "0 0 392 386");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (273:0) {#if name == 'icon-spinner' }
function create_if_block_54(ctx) {
	let svg;
	let path;
	let svg_class_value;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				focusable: true,
				role: true,
				width: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M7.229 1.173a9.25 9.25 0 1 0 11.655 11.412 1.25 1.25 0 1 0-2.4-.698 6.75 6.75 0 1 1-8.506-8.329 1.25 1.25 0 1 0-.75-2.385z");
			attr(path, "fill", "#919EAB");
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "class", svg_class_value = "icon icon-spinner " + /*classes*/ ctx[3]);
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}

			if (dirty & /*classes*/ 8 && svg_class_value !== (svg_class_value = "icon icon-spinner " + /*classes*/ ctx[3])) {
				attr(svg, "class", svg_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (276:0) {#if name == 'icon-stripe' }
function create_if_block_53(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M14.375 7.313q.469 0 .781-.322t.313-.771-.313-.771-.781-.322q-.293 0-.547.146t-.391.4-.137.547q0 .449.313.771t.762.322zm-5.801 5.234q-.039 0-.166.02t-.234.039-.225.029-.156.01q-.195 0-.283-.107t-.088-.4V9.443h.879l.273-1.387H7.422V6.22l-1.895.469-.293 1.367h-.82v1.387h.82v3.105q0 .352.068.625t.176.459.264.313.303.195.342.107.322.049.303.01q.781 0 1.563-.195v-1.563zM2.676 10.32q-.254-.117-.332-.156t-.146-.127-.068-.205q0-.313.469-.313.645 0 1.367.254V8.23q-.762-.273-1.602-.273-.449 0-.84.088t-.752.293-.566.615-.205.996q0 1.191 1.25 1.777l.273.137q.293.117.41.215t.117.254q0 .371-.605.371-.488 0-1.367-.293v1.602q.996.293 1.777.293 2.344 0 2.344-2.09 0-.41-.117-.723t-.332-.518-.4-.313-.439-.225zm8.554-.332q.391-.195.723-.195.41 0 .801.117V8.074q-.156-.117-.664-.117-.781 0-.977.703l-.332-.605H9.043v6.133h2.188V9.989zm7.364 4.18q.508.137.781.137.234 0 .391-.01t.43-.078.459-.186.41-.352.361-.566.234-.859.098-1.172q0-.84-.127-1.436t-.303-.918-.459-.498-.518-.225-.547-.049q-.762 0-1.309.508l-.313-.41h-1.777v8.32h2.188v-2.207zm8.886-2.305v-.723q0-1.738-.635-2.461t-1.787-.723q-2.715 0-2.715 3.184 0 .84.195 1.455t.469.938.723.508.801.225.859.039q.918 0 1.797-.313V12.39q-1.445.254-1.797.254-.293 0-.469-.049t-.283-.234-.107-.498h2.949zm-11.992 2.325V8.055H13.3v6.133h2.188zm9.043-3.516v-.234l.01-.234.01-.215.02-.205.039-.166.059-.146.098-.107.127-.078.166-.02q.137 0 .225.088t.117.322.039.42.01.576h-.918zm-5.937-.918q.273-.195.508-.195.293 0 .391.273t.098 1.25q0 .957-.156 1.318t-.469.361q-.195 0-.371-.059V9.753z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-stripe");
			attr(svg, "viewBox", "0 0 28 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (279:0) {#if name == 'icon-success' }
function create_if_block_52(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);

			path0 = claim_svg_element(svg_nodes, "path", {
				d: true,
				fill: true,
				stroke: true,
				"stroke-width": true
			});

			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true, stroke: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true, stroke: true });
			var path2_nodes = children(path2);
			path2_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M6.5 12.35C9.73087 12.35 12.35 9.73086 12.35 6.5C12.35 3.26913 9.73087 0.65 6.5 0.65C3.26913 0.65 0.65 3.26913 0.65 6.5C0.65 9.73086 3.26913 12.35 6.5 12.35Z");
			attr(path0, "fill", "#428445");
			attr(path0, "stroke", "white");
			attr(path0, "stroke-width", "0.7");
			attr(path1, "d", "M5.53271 8.66357L9.25213 4.68197");
			attr(path1, "stroke", "white");
			attr(path2, "d", "M4.10645 6.7688L6.13766 8.62553");
			attr(path2, "stroke", "white");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-success");
			attr(svg, "viewBox", "0 0 13 13");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (286:0) {#if name == 'icon-tick' }
function create_if_block_51(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				xmlns: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, stroke: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#108043");
			attr(path, "stroke", "#fff");
			attr(path, "d", "M16.136 6.979h0l.003-.004a1.499 1.499 0 00-2.275-1.954l-5.945 6.777-1.858-1.859A1.499 1.499 0 103.94 12.06l2.999 3s0 0 0 0c.289.29.675.44 1.1.439h.019a1.5 1.5 0 001.08-.522l6.998-7.998z");
			attr(svg, "class", "icon icon-tick");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (291:0) {#if name == 'icon-tiktok' }
function create_if_block_50(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				xmlns: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M8.02 0H11s-.17 3.82 4.13 4.1v2.95s-2.3.14-4.13-1.26l.03 6.1a5.52 5.52 0 11-5.51-5.52h.77V9.4a2.5 2.5 0 101.76 2.4L8.02 0z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-tiktok");
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (296:0) {#if name == 'icon-tumblr' }
function create_if_block_49(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { "fill-rule": true, d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "d", "M64 160.3c-24 0-42-12.3-42-41.8V71.3H.3V45.7c24-6.2 34-26.9 35.2-44.7h24.9v40.5h29v29.8h-29v41.1c0 12.3 6.2 16.6 16.1 16.6h14v31.3H64");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-tumblr");
			attr(svg, "viewBox", "0 0 91 161");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (301:0) {#if name == 'icon-twitter' }
function create_if_block_48(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "currentColor");
			attr(path, "d", "M17.64 2.6a7.33 7.33 0 01-1.75 1.82c0 .05 0 .13.02.23l.02.23a9.97 9.97 0 01-1.69 5.54c-.57.85-1.24 1.62-2.02 2.28a9.09 9.09 0 01-2.82 1.6 10.23 10.23 0 01-8.9-.98c.34.02.61.04.83.04 1.64 0 3.1-.5 4.38-1.5a3.6 3.6 0 01-3.3-2.45A2.91 2.91 0 004 9.35a3.47 3.47 0 01-2.02-1.21 3.37 3.37 0 01-.8-2.22v-.03c.46.24.98.37 1.58.4a3.45 3.45 0 01-1.54-2.9c0-.61.14-1.2.45-1.79a9.68 9.68 0 003.2 2.6 10 10 0 004.08 1.07 3 3 0 01-.13-.8c0-.97.34-1.8 1.03-2.48A3.45 3.45 0 0112.4.96a3.49 3.49 0 012.54 1.1c.8-.15 1.54-.44 2.23-.85a3.4 3.4 0 01-1.54 1.94c.74-.1 1.4-.28 2.01-.54z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-twitter");
			attr(svg, "viewBox", "0 0 18 15");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (306:0) {#if name == 'icon-unavailable' }
function create_if_block_47(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				xmlns: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, stroke: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#DE3618");
			attr(path, "stroke", "#fff");
			attr(path, "d", "M13.94 3.94L10 7.878l-3.94-3.94A1.499 1.499 0 103.94 6.06L7.88 10l-3.94 3.94a1.499 1.499 0 102.12 2.12L10 12.12l3.94 3.94a1.497 1.497 0 002.12 0 1.499 1.499 0 000-2.12L12.122 10l3.94-3.94a1.499 1.499 0 10-2.121-2.12z");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-unavailable");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (311:0) {#if name == 'icon-vimeo' }
function create_if_block_46(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { "fill-rule": true, d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill-rule", "evenodd");
			attr(path, "d", "M100 20.4c-.5 9.7-7.3 23-20.4 40C66 78.1 54.5 87 45 87c-5.8 0-10.7-5.4-14.7-16.2l-8.1-29.6C19.2 30.4 16 25 12.6 25c-.8 0-3.4 1.6-7.9 4.7l-4.7-6 14.6-13c6.6-5.8 11.5-8.8 14.8-9C37.2.8 42 6.1 43.8 17.5c2 12.3 3.3 20 4 23 2.3 10.2 4.7 15.3 7.4 15.3 2.1 0 5.3-3.3 9.5-10a39.2 39.2 0 006.7-15c.6-5.8-1.7-8.7-6.7-8.7-2.4 0-4.9.6-7.4 1.7C62.2 7.7 71.6-.1 85.4.4c10.3.3 15.1 7 14.6 20");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-vimeo");
			attr(svg, "viewBox", "0 0 100 87");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (316:0) {#if name == 'icon-visa' }
function create_if_block_45(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { fill: true, d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "fill", "#444");
			attr(path, "d", "M19.16 8.465q-.781-.352-1.621-.332-.605 0-.928.225t-.322.508.283.508.947.557q1.855.84 1.836 2.285 0 1.328-1.035 2.119t-2.773.791q-1.445-.02-2.441-.449l.293-1.914.273.156q1.113.449 2.07.449.527 0 .918-.225t.41-.635q0-.273-.254-.498t-.918-.557q-.371-.195-.654-.371t-.596-.459-.488-.664-.176-.811q.02-1.23 1.064-2.002t2.666-.771q1.035 0 1.953.332l-.273 1.855zm-9.14-1.934l-3.457 8.477H4.258L2.461 8.25q.938.371 1.709 1.133t1.104 1.66Q4.063 7.703.001 6.688l.02-.156h3.535q.82 0 .996.684l.762 3.906.254 1.172 2.129-5.762h2.324zm3.085 0l-1.367 8.477H9.55l1.367-8.477h2.188zm13.946 8.477H25q-.156-.996-.234-1.27l-2.813-.02-.449 1.289H19.18l3.262-7.793q.293-.684 1.152-.684h1.68zM23.77 8.797l-.137.361q-.078.205-.127.342t-.029.117q-.703 1.875-.879 2.383h1.777l-.469-2.461z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-visa");
			attr(svg, "viewBox", "0 0 27 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (319:0) {#if name == 'icon-youtube' }
function create_if_block_44(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, fill: true });
			var path_nodes = children(path);
			path_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M98 11c2 7.7 2 24 2 24s0 16.3-2 24a12.5 12.5 0 01-9 9c-7.7 2-39 2-39 2s-31.3 0-39-2a12.5 12.5 0 01-9-9c-2-7.7-2-24-2-24s0-16.3 2-24c1.2-4.4 4.6-7.8 9-9 7.7-2 39-2 39-2s31.3 0 39 2c4.4 1.2 7.8 4.6 9 9zM40 50l26-15-26-15v30z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-youtube");
			attr(svg, "viewBox", "0 0 100 70");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (324:0) {#if name == 'icon-zoom' }
function create_if_block_43(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				"aria-hidden": true,
				width: true,
				focusable: true,
				role: true,
				class: true,
				viewBox: true,
				fill: true,
				xmlns: true
			});

			var svg_nodes = children(svg);

			path0 = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path0).forEach(detach);

			path1 = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path1).forEach(detach);

			path2 = claim_svg_element(svg_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path2).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "fill-rule", "evenodd");
			attr(path0, "clip-rule", "evenodd");
			attr(path0, "d", "M4.66724 7.93978C4.66655 7.66364 4.88984 7.43922 5.16598 7.43853L10.6996 7.42464C10.9758 7.42395 11.2002 7.64724 11.2009 7.92339C11.2016 8.19953 10.9783 8.42395 10.7021 8.42464L5.16849 8.43852C4.89235 8.43922 4.66793 8.21592 4.66724 7.93978Z");
			attr(path0, "fill", "currentColor");
			attr(path1, "fill-rule", "evenodd");
			attr(path1, "clip-rule", "evenodd");
			attr(path1, "d", "M7.92576 4.66463C8.2019 4.66394 8.42632 4.88723 8.42702 5.16337L8.4409 10.697C8.44159 10.9732 8.2183 11.1976 7.94215 11.1983C7.66601 11.199 7.44159 10.9757 7.4409 10.6995L7.42702 5.16588C7.42633 4.88974 7.64962 4.66532 7.92576 4.66463Z");
			attr(path1, "fill", "currentColor");
			attr(path2, "fill-rule", "evenodd");
			attr(path2, "clip-rule", "evenodd");
			attr(path2, "d", "M12.8324 3.03011C10.1255 0.323296 5.73693 0.323296 3.03011 3.03011C0.323296 5.73693 0.323296 10.1256 3.03011 12.8324C5.73693 15.5392 10.1255 15.5392 12.8324 12.8324C15.5392 10.1256 15.5392 5.73693 12.8324 3.03011ZM2.32301 2.32301C5.42035 -0.774336 10.4421 -0.774336 13.5395 2.32301C16.6101 5.39361 16.6366 10.3556 13.619 13.4588L18.2473 18.0871C18.4426 18.2824 18.4426 18.599 18.2473 18.7943C18.0521 18.9895 17.7355 18.9895 17.5402 18.7943L12.8778 14.1318C9.76383 16.6223 5.20839 16.4249 2.32301 13.5395C-0.774335 10.4421 -0.774335 5.42035 2.32301 2.32301Z");
			attr(path2, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "class", "icon icon-plus");
			attr(svg, "viewBox", "0 0 19 19");
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (331:0) {#if name == 'apple' }
function create_if_block_42(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M10.6616 1.84311C11.4997 0.994336 12.5829 0.555929 13.3364 0.406304C13.4671 0.380359 13.6027 0.407635 13.7132 0.48208C13.8237 0.556525 13.8999 0.671982 13.9249 0.802834C14.2685 2.59987 13.7042 3.90202 12.8265 4.77303C11.9732 5.61989 10.8528 6.03394 10.0739 6.16284C9.94237 6.1846 9.80763 6.15297 9.69957 6.07495C9.59151 5.99694 9.51906 5.87901 9.49832 5.74735C9.22227 3.99494 9.8034 2.71219 10.6616 1.84311ZM10.4322 5.05051C10.9838 4.87866 11.6201 4.56143 12.1221 4.06324C12.6862 3.5034 13.1028 2.69625 13.0153 1.52987C12.4847 1.71504 11.8688 2.04373 11.3731 2.54573C10.8104 3.1156 10.3882 3.92035 10.4322 5.05051Z");
			attr(path1, "d", "M6.74466 1.36403C6.82081 1.09859 7.09771 0.945143 7.36315 1.02129C8.4313 1.32771 10.4241 2.68991 10.4999 5.68393C10.5069 5.95998 10.2888 6.18943 10.0127 6.19643C9.73668 6.20342 9.50723 5.9853 9.50024 5.70925C9.43732 3.22559 7.81131 2.19019 7.0874 1.98252C6.82196 1.90637 6.66851 1.62947 6.74466 1.36403Z");
			attr(path2, "d", "M5.7976 5.51618C5.08273 5.80325 4.40428 6.33518 3.91474 6.94951C3.01446 8.0793 2.53613 9.47907 2.53613 11.1986C2.53613 14.3276 4.3809 16.9669 7.07997 18.0835C7.41131 18.2206 7.75875 18.2099 8.22329 18.1348C8.32226 18.1188 8.42919 18.0991 8.54253 18.0782C8.92684 18.0074 9.38491 17.923 9.85684 17.923C10.3302 17.923 10.8107 18.007 11.2255 18.0795C11.3576 18.1026 11.4831 18.1246 11.5995 18.1422C12.1188 18.2211 12.517 18.2314 12.872 18.0838C15.6049 16.9478 17.4589 14.3 17.4639 11.2113C17.3883 9.75258 17.1668 8.70553 16.7428 7.88888C16.3278 7.08972 15.6964 6.46856 14.717 5.90109C13.9224 5.57109 13.3583 5.45194 12.9406 5.4387C12.5294 5.42567 12.2379 5.51434 11.9817 5.63936C11.8475 5.70489 11.72 5.78185 11.5797 5.86982C11.5575 5.8837 11.5348 5.89804 11.5115 5.91271C11.3938 5.98697 11.2627 6.06966 11.1279 6.14411C10.7884 6.3316 10.3877 6.48938 9.85684 6.48938C9.22764 6.48938 8.83995 6.29877 8.52175 6.04985C8.44189 5.98738 8.34486 5.90226 8.26392 5.83126C8.22148 5.79404 8.18347 5.76069 8.15468 5.73653C8.04777 5.64681 7.94466 5.57121 7.8199 5.50793C7.21536 5.2013 6.5101 5.23007 5.7976 5.51618ZM5.42495 4.58821C6.32089 4.22843 7.33981 4.14315 8.27225 4.61609C8.4901 4.72659 8.65843 4.8538 8.79753 4.97054C8.86924 5.03072 8.92077 5.07647 8.96623 5.11683C9.02365 5.16781 9.07139 5.2102 9.13788 5.26221C9.30136 5.39009 9.47644 5.48938 9.85684 5.48938C10.1679 5.48938 10.4012 5.4031 10.6445 5.26872C10.7515 5.20961 10.8536 5.14531 10.9708 5.07145C10.9959 5.05563 11.0217 5.03937 11.0484 5.02262C11.1936 4.93153 11.3585 4.83076 11.5431 4.74067C11.9247 4.55444 12.3768 4.42033 12.9722 4.4392C13.556 4.4577 14.2527 4.62242 15.1322 4.99079L15.1611 5.00288L15.1882 5.01846C16.3065 5.66113 17.1032 6.41295 17.6303 7.42805C18.1508 8.43058 18.3851 9.64589 18.4633 11.173L18.4639 11.1858V11.1986C18.4639 14.7063 16.3566 17.7183 13.2559 19.0072C12.6339 19.2658 12.0024 19.2149 11.4494 19.1309C11.2863 19.1061 11.1317 19.0792 10.9824 19.0532C10.5912 18.9849 10.2359 18.923 9.85684 18.923C9.48487 18.923 9.15235 18.984 8.78723 19.0509C8.65765 19.0747 8.52396 19.0992 8.38294 19.122C7.87454 19.2042 7.29552 19.2549 6.69769 19.0075C3.6271 17.7372 1.53613 14.7348 1.53613 11.1986C1.53613 9.28002 2.07513 7.65346 3.13268 6.32632C3.71714 5.59286 4.53139 4.94704 5.42495 4.58821Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (338:0) {#if name == 'banana' }
function create_if_block_41(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M9.58939 2.04935C9.70278 1.96927 9.84436 1.93993 9.98024 1.96837L12.1559 2.42361C12.408 2.47637 12.5788 2.71205 12.5504 2.96807L12.3138 5.10404C12.3555 5.13755 12.4053 5.17072 12.4788 5.21958C12.5193 5.24655 12.567 5.27831 12.6245 5.31756C12.9513 5.54051 13.3912 5.88157 13.6898 6.53073C14.024 7.25761 14.303 8.11357 14.5807 8.96549C14.6035 9.03552 14.6264 9.10552 14.6492 9.17542C14.9546 10.1102 15.2674 11.0396 15.6678 11.8693C16.068 12.6988 16.5398 13.3939 17.1428 13.8785C17.7344 14.3539 18.477 14.6469 19.4685 14.6364C19.6178 14.6349 19.76 14.7001 19.8562 14.8144C19.9524 14.9287 19.9925 15.0799 19.9655 15.2268C19.8731 15.7293 19.5512 16.4108 18.893 16.9222C18.2217 17.4439 17.2418 17.7572 15.8976 17.5804C14.6826 17.4511 13.1852 16.8785 12.0063 15.311C11.9882 15.287 11.9702 15.2627 11.9522 15.2381C11.1194 17.0387 8.72378 19.2058 4.58412 18.6145C4.35292 18.5815 4.17538 18.3929 4.15645 18.1601C4.13753 17.9273 4.28227 17.7124 4.50511 17.6425C4.53208 17.634 4.56314 17.625 4.59775 17.615C4.97981 17.5043 5.7956 17.2679 6.34999 16.237C6.61683 15.4808 6.73258 14.9216 6.77285 14.4342C6.81396 13.9365 6.77848 13.4941 6.72455 12.9516C6.71963 12.9022 6.7146 12.8522 6.70951 12.8016C6.60065 11.7201 6.46178 10.3405 6.80091 7.78357C6.89499 7.07423 7.2501 6.36099 7.70563 5.80064C8.07332 5.34834 8.54644 4.94741 9.06367 4.74229L9.38236 2.39062C9.40101 2.25306 9.476 2.12944 9.58939 2.04935ZM11.2725 14.1084C10.5074 12.557 10.0209 10.3842 10.0365 7.37309C10.038 7.09695 10.263 6.87426 10.5391 6.87569C10.8153 6.87712 11.038 7.10213 11.0365 7.37827C11.017 11.1373 11.8091 13.3852 12.8055 14.71C13.7938 16.0241 15.023 16.4829 16.009 16.5866L16.0224 16.588C17.1418 16.7365 17.8462 16.4692 18.2794 16.1326C18.4907 15.9684 18.6475 15.7801 18.7597 15.5972C17.871 15.4873 17.1327 15.1533 16.5164 14.658C15.752 14.0438 15.2006 13.2024 14.7671 12.3039C14.3337 11.4057 14.0024 10.4157 13.6986 9.48599C13.6772 9.42039 13.6559 9.35515 13.6348 9.29028C13.3514 8.42141 13.09 7.61997 12.7812 6.94854C12.5929 6.53906 12.3248 6.32367 12.0609 6.1436C12.0354 6.12619 12.0066 6.10708 11.9759 6.08667C11.8678 6.01486 11.7357 5.92709 11.6375 5.84192C11.4956 5.71899 11.3146 5.5136 11.3025 5.20124C11.3015 5.17638 11.3024 5.15148 11.3051 5.12675L11.5065 3.30939L10.3012 3.05718L10.0118 5.19278C9.9833 5.4028 9.82551 5.57207 9.61799 5.61518C9.27759 5.6859 8.85406 5.97324 8.48157 6.43144C8.11516 6.88218 7.85688 7.42763 7.79223 7.91505C7.46822 10.358 7.59866 11.6519 7.70409 12.6977C7.70935 12.7499 7.71456 12.8016 7.71964 12.8527C7.77404 13.3998 7.81867 13.9208 7.76945 14.5165C7.71999 15.1152 7.57786 15.77 7.27992 16.6066C7.27203 16.6288 7.26257 16.6504 7.25163 16.6712C7.02512 17.1028 6.7592 17.4359 6.48673 17.6938C9.65464 17.4589 11.1039 15.2127 11.2725 14.1084Z");
			attr(path1, "d", "M6.27111 11.8004C6.52894 11.3027 6.60251 10.9081 6.58566 10.7451L7.58035 10.6422C7.62656 11.0889 7.45335 11.6923 7.15905 12.2604C6.85438 12.8486 6.38071 13.4767 5.73385 13.9687C4.86162 14.6322 4.1367 15.0865 3.40292 15.4806C5.55977 15.2705 6.56129 14.7956 6.93741 14.4936L7.56344 15.2734C6.79366 15.8914 4.92577 16.5867 1.00511 16.5867C0.770535 16.5867 0.567494 16.4236 0.516889 16.1946C0.466283 15.9655 0.581721 15.7321 0.794467 15.6332C0.870045 15.5981 0.944324 15.5637 1.01741 15.5298C2.59233 14.7991 3.61321 14.3255 5.12841 13.1728C5.63986 12.7838 6.02365 12.2781 6.27111 11.8004Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (344:0) {#if name == 'bottle' }
function create_if_block_40(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M13.1436 3.0254C13.3363 3.0254 13.5118 3.13611 13.5948 3.30999C13.6778 3.48386 13.6536 3.68996 13.5324 3.83978C13.4038 3.99885 13.3639 4.17442 13.3691 4.34267C13.3746 4.52205 13.4315 4.66574 13.4591 4.71337C14.6041 6.69086 15.0342 9.52317 15.1116 10.6863C15.1123 10.6974 15.1127 10.7085 15.1127 10.7195V18.7774C15.1127 19.0535 14.8888 19.2774 14.6127 19.2774H5.39716C5.12101 19.2774 4.89716 19.0535 4.89716 18.7774V10.7358C4.84125 9.8507 5.03236 8.79357 5.29232 7.81832C5.55654 6.82711 5.9041 5.87643 6.18601 5.1985C6.2393 5.07034 6.31494 4.93247 6.37143 4.82952C6.38977 4.79607 6.4061 4.76631 6.41899 4.74177C6.48471 4.61655 6.51337 4.53933 6.52193 4.47554C6.53252 4.3967 6.51006 4.29687 6.439 4.16377C6.40471 4.09955 6.36476 4.03788 6.32141 3.97381C6.31602 3.96585 6.30986 3.95683 6.30314 3.94701C6.26852 3.89642 6.21927 3.82444 6.18678 3.7649C6.10224 3.60998 6.10564 3.42197 6.19571 3.27021C6.28579 3.11844 6.44919 3.0254 6.62568 3.0254H13.1436ZM12.3915 4.02539L7.46117 4.0254C7.51302 4.19577 7.54196 4.39323 7.51304 4.6086C7.48043 4.85158 7.38361 5.05566 7.30443 5.20651C7.27233 5.26767 7.2448 5.31773 7.22052 5.36187C7.17495 5.44473 7.14083 5.50678 7.10936 5.58246C6.84062 6.22873 6.50895 7.13661 6.25858 8.07589C6.00564 9.02481 5.8476 9.96272 5.89604 10.6861C5.89678 10.6972 5.89716 10.7084 5.89716 10.7195V18.2774H14.1127V10.7364C14.036 9.61852 13.6192 6.98555 12.5937 5.21445C12.4833 5.0239 12.3802 4.71869 12.3696 4.37355C12.3661 4.26297 12.3722 4.14581 12.3915 4.02539Z");
			attr(path1, "d", "M6.37329 1.69755C6.45246 1.21406 6.87025 0.859121 7.36017 0.859131L12.4688 0.859235C12.9266 0.859245 13.3259 1.17011 13.4382 1.61391L13.7705 2.92708C13.9304 3.55892 13.4528 4.17241 12.8011 4.17241H6.85086C6.38827 4.17241 6.03597 3.75773 6.11071 3.30122L6.37329 1.69755ZM12.4688 1.85924L7.36015 1.85913L7.14512 3.17241L12.8011 3.17241L12.4688 1.85924Z");
			attr(path2, "d", "M14.1014 8.95304L14.1 8.95373L14.0595 8.97423L14.0578 8.9751L14.0151 8.99651L13.9721 9.01791L13.9287 9.03926L13.8849 9.06055L13.8407 9.08171L13.7961 9.10273L13.7511 9.12356L13.7056 9.14416L13.6598 9.1645L13.6135 9.18453L13.5667 9.20423L13.5195 9.22355L13.4718 9.24244L13.4237 9.26088L13.3751 9.27881L13.326 9.29621L13.2764 9.31301L13.2264 9.3292L13.1759 9.34472L13.1249 9.35952L13.0735 9.37358L13.0216 9.38685L12.9693 9.39928L12.9166 9.41084L12.8634 9.42149L12.8099 9.4312L12.7561 9.43992L12.7019 9.44763L12.6474 9.45429L12.5928 9.45989L12.5379 9.4644L12.4829 9.4678L12.4277 9.47008L12.3725 9.47124L12.3173 9.47126L12.2622 9.47014L12.2071 9.46791L12.1522 9.46455L12.0974 9.4601L12.0429 9.45457L11.9886 9.44797L11.9347 9.44035L11.8811 9.43172L11.8278 9.42213L11.775 9.4116L11.7225 9.40017L11.6705 9.38789L11.6189 9.37478L11.5678 9.36089L11.5172 9.34626L11.467 9.33093L11.4173 9.31495L11.3681 9.29834L11.3193 9.28116L11.2711 9.26344L11.2232 9.24523L11.1759 9.22655L11.129 9.20746L11.0826 9.18799L11.0365 9.16818L10.991 9.14806L10.9458 9.12768L10.9011 9.10707L10.8568 9.08626L10.8129 9.0653L10.7693 9.04422L10.7262 9.02306L10.6835 9.00185L10.6429 8.98154L10.6411 8.98062L10.6006 8.96015L10.5991 8.95942L10.5575 8.93827L10.3156 8.81448L10.2766 8.79467L10.275 8.79391L10.2379 8.77518L10.236 8.77423L10.1997 8.75604L10.1974 8.75491L10.1618 8.73728L10.1591 8.73597L10.1228 8.71818L10.0855 8.70018L10.0486 8.68263L10.0122 8.66558L9.97608 8.64902L9.94047 8.63303L9.90526 8.61757L9.87047 8.60267L9.83616 8.58838L9.80227 8.57469L9.76888 8.56162L9.73593 8.54918L9.70345 8.53737L9.67144 8.52621L9.63992 8.5157L9.60886 8.50584L9.57828 8.49663L9.54817 8.48807L9.51852 8.48015L9.48931 8.47287L9.46055 8.46622L9.4322 8.46019L9.40425 8.45477L9.37668 8.44995L9.34945 8.44573L9.32254 8.44208L9.2959 8.43899L9.26951 8.43647L9.24331 8.43449L9.21726 8.43306L9.19132 8.43216L9.16543 8.43179L9.13956 8.43196L9.11364 8.43265L9.08764 8.43388L9.0615 8.43565L9.03519 8.43797L9.00865 8.44084L8.98184 8.44427L8.95474 8.44828L8.9273 8.45287L8.8995 8.45806L8.87131 8.46385L8.84271 8.47026L8.81367 8.4773L8.78419 8.48498L8.75425 8.4933L8.72385 8.50226L8.69298 8.51187L8.66163 8.52214L8.62981 8.53305L8.5975 8.54461L8.56474 8.55681L8.5315 8.56965L8.4978 8.5831L8.46365 8.59717L8.42906 8.61183L8.39401 8.62707L8.35854 8.64287L8.32264 8.65922L8.28633 8.67608L8.24961 8.69344L8.21249 8.71127L8.17495 8.72956L8.13702 8.74826L8.09873 8.76734L8.06087 8.78638L8.05921 8.78722L8.02161 8.80626L8.02033 8.80691L7.7378 8.95136L7.73649 8.95203L7.69426 8.9734L7.65166 8.9948L7.60868 9.0162L7.5653 9.03757L7.52154 9.05886L7.47737 9.08003L7.4328 9.10106L7.38781 9.12191L7.3424 9.14253L7.29655 9.16289L7.25028 9.18295L7.20355 9.20268L7.15638 9.22202L7.10874 9.24095L7.06065 9.25943L7.01208 9.2774L6.96304 9.29484L6.91352 9.3117L6.86353 9.32793L6.81307 9.3435L6.76213 9.35837L6.71074 9.37249L6.65889 9.38582L6.6066 9.39832L6.5539 9.40995L6.50079 9.42068L6.44731 9.43046L6.39348 9.43926L6.33933 9.44705L6.2849 9.4538L6.23024 9.45948L6.17537 9.46408L6.12035 9.46757L6.06522 9.46994L6.01004 9.47119L5.95484 9.4713L5.89968 9.47027L5.8446 9.46813L5.78965 9.46486L5.73489 9.46049L5.68035 9.45505L5.62607 9.44854L5.57209 9.44099L5.51844 9.43245L5.46516 9.42293L5.4636 8.33645L5.49517 8.34701L5.52626 8.35692L5.55688 8.36618L5.58703 8.3748L5.61672 8.38277L5.64596 8.3901L5.67476 8.3968L5.70313 8.40288L5.73111 8.40834L5.75871 8.41321L5.78597 8.41748L5.81291 8.42118L5.83956 8.42431L5.86597 8.42688L5.89219 8.42889L5.91825 8.43037L5.9442 8.43131L5.97009 8.43172L5.99596 8.4316L6.02187 8.43095L6.04786 8.42976L6.07399 8.42803L6.10029 8.42576L6.12681 8.42294L6.15359 8.41955L6.18067 8.41559L6.20808 8.41104L6.23585 8.4059L6.26401 8.40016L6.29258 8.39379L6.32158 8.3868L6.35102 8.37918L6.38092 8.37092L6.41129 8.362L6.44212 8.35244L6.47344 8.34223L6.50522 8.33137L6.53748 8.31986L6.57022 8.30771L6.60341 8.29492L6.63708 8.28152L6.67119 8.2675L6.70576 8.25288L6.74077 8.23768L6.77619 8.22193L6.81207 8.20562L6.84835 8.1888L6.88503 8.17148L6.92212 8.15369L6.95964 8.13543L6.99752 8.11677L7.0358 8.0977L7.0736 8.07871L7.07529 8.07786L7.11282 8.05886L7.11413 8.0582L7.35502 7.93496L7.39775 7.9132L7.43994 7.89183L7.48251 7.87043L7.52546 7.84902L7.5688 7.82766L7.61254 7.80636L7.65667 7.78517L7.70122 7.76413L7.74617 7.74327L7.79155 7.72263L7.83736 7.70225L7.8836 7.68216L7.93029 7.66241L7.97743 7.64303L8.02502 7.62406L8.07308 7.60555L8.12161 7.58753L8.17062 7.57005L8.22009 7.55315L8.27005 7.53686L8.32048 7.52123L8.37137 7.50631L8.42273 7.49213L8.47454 7.47873L8.52679 7.46617L8.57947 7.45446L8.63254 7.44367L8.686 7.43381L8.7398 7.42493L8.79392 7.41706L8.84833 7.41022L8.90298 7.40445L8.95783 7.39977L9.01284 7.39619L9.06796 7.39373L9.12315 7.3924L9.17835 7.3922L9.23351 7.39313L9.2886 7.39519L9.34355 7.39836L9.39833 7.40264L9.45289 7.408L9.50719 7.41443L9.5612 7.42189L9.61487 7.43036L9.66819 7.4398L9.72111 7.45019L9.77363 7.46147L9.82572 7.47363L9.87736 7.48661L9.92854 7.50037L9.97926 7.51489L10.0295 7.53011L10.0793 7.54599L10.1286 7.5625L10.1774 7.57959L10.2257 7.59723L10.2736 7.61537L10.3211 7.63397L10.368 7.653L10.4145 7.67241L10.4606 7.69217L10.5063 7.71224L10.5515 7.73258L10.5963 7.75316L10.6407 7.77394L10.6846 7.79488L10.7282 7.81594L10.7714 7.83709L10.8142 7.8583L10.8566 7.87952L10.8987 7.90073L10.9404 7.92189L11.1826 8.04586L11.2217 8.06572L11.2232 8.06645L11.2604 8.08526L11.2622 8.08618L11.2987 8.10446L11.3009 8.10556L11.3367 8.12329L11.3393 8.12456L11.3757 8.14243L11.413 8.1605L11.45 8.17812L11.4865 8.19526L11.5227 8.21189L11.5584 8.22799L11.5936 8.24354L11.6285 8.25851L11.6629 8.2729L11.6968 8.28669L11.7303 8.29986L11.7633 8.31241L11.7959 8.32431L11.8279 8.33558L11.8596 8.34619L11.8907 8.35616L11.9213 8.36547L11.9515 8.37414L11.9813 8.38215L12.0105 8.38954L12.0394 8.39629L12.0678 8.40242L12.0958 8.40793L12.1234 8.41284L12.1507 8.41716L12.1777 8.42091L12.2043 8.42408L12.2308 8.42669L12.257 8.42875L12.2831 8.43027L12.309 8.43126L12.3349 8.43171L12.3608 8.43163L12.3867 8.43102L12.4127 8.42987L12.4388 8.42819L12.4651 8.42596L12.4916 8.42318L12.5183 8.41984L12.5454 8.41592L12.5728 8.41143L12.6005 8.40633L12.6286 8.40064L12.6572 8.39432L12.6861 8.38738L12.7155 8.37981L12.7454 8.37159L12.7757 8.36273L12.8065 8.35322L12.8378 8.34306L12.8696 8.33225L12.9018 8.3208L12.9345 8.3087L12.9676 8.29596L13.0013 8.28261L13.0353 8.26864L13.0699 8.25407L13.1048 8.23892L13.1402 8.2232L13.1761 8.20694L13.2123 8.19015L13.249 8.17288L13.286 8.15512L13.3221 8.13761L13.3601 8.11889L13.3626 8.11766L13.3986 8.09977L13.4007 8.09872L13.4374 8.08028L13.4391 8.07941L13.4766 8.06045L13.4779 8.05977L13.76 7.91553L13.7613 7.9149L13.8034 7.89353L13.846 7.87213L13.8889 7.85073L13.9322 7.82936L13.9759 7.80805L14.02 7.78685L14.0645 7.7658L14.1095 7.74492L14.1548 7.72426L14.2006 7.70386L14.2468 7.68375L14.184 8.9109L14.1429 8.93193L14.1014 8.95304Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (351:0) {#if name == 'box' }
function create_if_block_39(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M9.69502 0.6786C9.91338 0.601796 10.1516 0.603123 10.3691 0.682353L18.2151 3.54058C18.61 3.68445 18.8728 4.05988 18.8728 4.48018V14.4287C18.8728 14.8074 18.6588 15.1537 18.32 15.3231L10.4731 19.2465C10.196 19.385 9.87022 19.3873 9.59117 19.2526L1.45405 15.3244C1.10843 15.1576 0.888794 14.8076 0.888794 14.4239V4.48434C0.888794 4.05997 1.15665 3.68181 1.55699 3.541L9.69502 0.6786ZM6.07999 3.01017L2.5346 4.25719L10.149 7.63545L13.5692 6.118L6.07999 3.01017ZM6.78606 2.76183L14.1997 5.83828L17.5367 4.35774L10.0268 1.62195L6.78606 2.76183ZM1.88879 14.4239L1.88879 5.06467L9.64898 8.50762V18.1701L1.88879 14.4239ZM17.8728 14.4287L10.649 18.0405V8.50762L17.8728 5.30263V14.4287Z");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (356:0) {#if name == 'carrot' }
function create_if_block_38(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			path5 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path5).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M13.2007 3.20077C14.0708 3.44799 14.8041 4.00582 15.3825 4.5842C16.2207 5.42236 16.6759 6.29785 16.8114 7.17238C16.9467 8.04585 16.7557 8.87096 16.3832 9.59676C15.9414 10.4576 15.1619 11.0331 14.4616 11.4873L2.62637 19.1625C2.12702 19.4863 1.46511 19.3907 1.07779 18.9388C0.737991 18.5424 0.696827 17.9706 0.976338 17.5296L8.60593 5.49145C9.01714 4.84263 9.52843 4.13083 10.278 3.67078C11.3161 3.03367 12.3083 2.9472 13.2007 3.20077ZM12.9274 4.16269C12.3101 3.98731 11.6062 4.02897 10.8011 4.52307C10.2597 4.85536 9.85026 5.39615 9.45058 6.02677L1.82098 18.0649C1.77672 18.1347 1.78324 18.2253 1.83705 18.288C1.89838 18.3596 2.0032 18.3747 2.08227 18.3235L13.9175 10.6482C14.6029 10.2038 15.1812 9.74867 15.4935 9.14018C15.7883 8.56575 15.9205 7.95335 15.8232 7.32546C15.7261 6.69861 15.393 6.00887 14.6754 5.29132C14.1567 4.77261 13.5669 4.34441 12.9274 4.16269Z");
			attr(path1, "d", "M10.7668 12.8682C10.6731 12.9696 10.5149 12.9758 10.4135 12.8821L8.90763 11.49C8.80624 11.3962 8.80003 11.2381 8.89376 11.1367C8.98748 11.0353 9.14565 11.0291 9.24704 11.1228L10.7529 12.5149C10.8543 12.6086 10.8605 12.7668 10.7668 12.8682Z");
			attr(path2, "d", "M11.1604 8.42439C11.0671 8.52617 10.909 8.53304 10.8072 8.43974L8.51699 6.34018C8.41521 6.24688 8.40834 6.08874 8.50164 5.98696C8.59494 5.88518 8.75309 5.87831 8.85486 5.97162L11.1451 8.07117C11.2469 8.16447 11.2538 8.32262 11.1604 8.42439Z");
			attr(path3, "d", "M16.4865 3.03018C16.5841 3.12781 16.5841 3.2861 16.4865 3.38373L15.119 4.75118C15.0214 4.84881 14.8631 4.84881 14.7655 4.75118C14.6678 4.65355 14.6678 4.49526 14.7655 4.39763L16.1329 3.03018C16.2306 2.93255 16.3888 2.93255 16.4865 3.03018Z");
			attr(path4, "d", "M6.24811 14.5997C6.15439 14.7011 5.99622 14.7073 5.89483 14.6135L4.38894 13.2214C4.28755 13.1277 4.28134 12.9696 4.37507 12.8682C4.46879 12.7668 4.62696 12.7606 4.72835 12.8543L6.23424 14.2464C6.33563 14.3401 6.34184 14.4983 6.24811 14.5997Z");
			attr(path5, "d", "M15.1489 1.79459C14.8108 2.16669 14.515 2.42303 14.2115 2.57726C13.887 2.74215 13.5937 2.77041 13.3103 2.75961H12.4977C11.7987 2.82025 11.4452 3.45337 11.4517 3.94279L10.4518 3.95616C10.4404 3.1065 11.0471 1.86293 12.4414 1.76094L12.4596 1.75961L13.3306 1.75961L13.341 1.76004C13.5207 1.76752 13.6314 1.75035 13.7584 1.68578C13.9056 1.61101 14.1089 1.45423 14.4236 1.10571L14.4392 1.08853L14.4562 1.07286C14.8541 0.706824 15.4138 0.430762 16.0689 0.42081C16.7314 0.410747 17.4358 0.673487 18.1148 1.28675C18.4263 1.56805 18.8681 2.03401 19.0602 2.65903C19.265 3.32542 19.1621 4.09192 18.5277 4.88236L18.508 4.90683L18.4855 4.92864C18.3252 5.08386 18.2537 5.17427 18.21 5.29103C18.1643 5.41343 18.13 5.62051 18.1731 6.02839L18.2752 6.79709C18.3357 7.23357 18.1902 7.75046 17.901 8.17635C17.6019 8.61691 17.1192 9.00553 16.4551 9.13239L16.2675 8.15015C16.6341 8.08013 16.901 7.86897 17.0737 7.61466C17.2558 7.34633 17.3042 7.07418 17.2846 6.93388L17.2841 6.93035L17.1792 6.14099C17.1269 5.65202 17.1509 5.2682 17.2734 4.94068C17.3929 4.62121 17.588 4.40752 17.7662 4.23331C18.1942 3.68869 18.2017 3.26969 18.1043 2.95281C17.9928 2.59008 17.7154 2.27342 17.4446 2.0289C16.9207 1.55573 16.4531 1.41509 16.0841 1.42069C15.7158 1.42629 15.3906 1.57837 15.1489 1.79459Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
			append_hydration(svg, path5);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (366:0) {#if name == 'chat_bubble' }
function create_if_block_37(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M5.80023 10.2433C5.80023 9.691 6.24795 9.24329 6.80023 9.24329C7.35252 9.24329 7.80023 9.691 7.80023 10.2433C7.80023 10.7956 7.35252 11.2433 6.80023 11.2433C6.24795 11.2433 5.80023 10.7956 5.80023 10.2433Z");
			attr(path1, "d", "M9.22974 10.2433C9.22974 9.691 9.67745 9.24329 10.2297 9.24329C10.782 9.24329 11.2297 9.691 11.2297 10.2433C11.2297 10.7956 10.782 11.2433 10.2297 11.2433C9.67745 11.2433 9.22974 10.7956 9.22974 10.2433Z");
			attr(path2, "d", "M12.6592 10.2433C12.6592 9.691 13.1069 9.24329 13.6592 9.24329C14.2115 9.24329 14.6592 9.691 14.6592 10.2433C14.6592 10.7956 14.2115 11.2433 13.6592 11.2433C13.1069 11.2433 12.6592 10.7956 12.6592 10.2433Z");
			attr(path3, "d", "M16.6445 17.2036C16.6418 17.2023 16.6392 17.2009 16.6365 17.1996C16.3947 17.0764 16.1302 16.9257 15.8701 16.7774C15.2251 16.4099 14.607 16.0576 14.4279 16.1795C13.2314 16.9937 11.7861 17.4696 10.2297 17.4696C6.10323 17.4696 2.75806 14.1244 2.75806 9.99791C2.75806 5.87142 6.10323 2.52625 10.2297 2.52625C14.3562 2.52625 17.7014 5.87142 17.7014 9.99791C17.7014 11.512 17.251 12.9209 16.477 14.0979C16.3445 14.2994 16.6705 14.9403 17.0113 15.6104C17.1583 15.8994 17.308 16.1938 17.4249 16.4607C17.4269 16.4653 17.4289 16.4697 17.4308 16.4742C17.6237 16.9172 17.7239 17.2824 17.5671 17.418C17.4394 17.5544 17.0791 17.4243 16.6445 17.2036ZM18.2593 18.14C17.8792 18.5115 17.4018 18.4853 17.2128 18.461C16.9786 18.4309 16.7562 18.3504 16.587 18.2799C16.2391 18.1348 15.8412 17.9114 15.506 17.7209C15.4611 17.6954 15.4172 17.6704 15.3743 17.6459C15.0837 17.4804 14.8356 17.3391 14.6299 17.2385C13.347 18.0196 11.8396 18.4696 10.2297 18.4696C5.55095 18.4696 1.75806 14.6767 1.75806 9.99791C1.75806 5.31914 5.55095 1.52625 10.2297 1.52625C14.9085 1.52625 18.7014 5.31914 18.7014 9.99791C18.7014 11.5821 18.2656 13.0672 17.5072 14.3369C17.5098 14.3432 17.5125 14.3497 17.5153 14.3564C17.6071 14.5755 17.7411 14.8392 17.8997 15.1513C17.927 15.2049 17.9549 15.2599 17.9835 15.3164C18.1621 15.6689 18.3719 16.0905 18.5003 16.4618C18.5631 16.6435 18.6314 16.8815 18.6427 17.1309C18.6529 17.3561 18.6228 17.7987 18.2593 18.14Z");
			attr(path3, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (374:0) {#if name == 'check_mark' }
function create_if_block_36(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M18.5 1.5H1.5L1.5 18.5H18.5V1.5ZM1.5 0.5C0.947715 0.5 0.5 0.947715 0.5 1.5V18.5C0.5 19.0523 0.947715 19.5 1.5 19.5H18.5C19.0523 19.5 19.5 19.0523 19.5 18.5V1.5C19.5 0.947715 19.0523 0.5 18.5 0.5H1.5Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M14.9975 6.09084C15.201 6.27746 15.2147 6.59375 15.0281 6.79728L8.91631 13.4627C8.82231 13.5652 8.68987 13.6239 8.55079 13.6247C8.41172 13.6256 8.27857 13.5684 8.18335 13.4671L4.99513 10.0731C4.80606 9.87179 4.81596 9.55536 5.01723 9.3663C5.21849 9.17723 5.53492 9.18713 5.72399 9.3884L8.54335 12.3897L14.291 6.12145C14.4776 5.91791 14.7939 5.90421 14.9975 6.09084Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (380:0) {#if name == 'clipboard' }
function create_if_block_35(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M6.31104 9.13574C6.31104 8.99767 6.42296 8.88574 6.56104 8.88574H13.7464C13.8844 8.88574 13.9964 8.99767 13.9964 9.13574C13.9964 9.27381 13.8844 9.38574 13.7464 9.38574H6.56104C6.42296 9.38574 6.31104 9.27381 6.31104 9.13574Z");
			attr(path1, "d", "M6.31104 14.0544C6.31104 13.9164 6.42296 13.8044 6.56104 13.8044H13.439C13.577 13.8044 13.689 13.9164 13.689 14.0544C13.689 14.1925 13.577 14.3044 13.439 14.3044H6.56104C6.42296 14.3044 6.31104 14.1925 6.31104 14.0544Z");
			attr(path2, "d", "M6.92587 11.5952C6.92587 11.4571 7.0378 11.3452 7.17587 11.3452H12.8241C12.9622 11.3452 13.0741 11.4571 13.0741 11.5952C13.0741 11.7333 12.9622 11.8452 12.8241 11.8452H7.17587C7.0378 11.8452 6.92587 11.7333 6.92587 11.5952Z");
			attr(path3, "d", "M5.19623 1.77832C5.19623 0.949892 5.8678 0.27832 6.69623 0.27832H13.3038C14.1322 0.27832 14.8038 0.949893 14.8038 1.77832V3.46728C14.8038 4.29571 14.1322 4.96728 13.3038 4.96728H6.69623C5.8678 4.96728 5.19623 4.29571 5.19623 3.46728V1.77832ZM6.69623 1.27832C6.42009 1.27832 6.19623 1.50218 6.19623 1.77832V3.46728C6.19623 3.74342 6.42009 3.96728 6.69623 3.96728H13.3038C13.5799 3.96728 13.8038 3.74342 13.8038 3.46728V1.77832C13.8038 1.50218 13.5799 1.27832 13.3038 1.27832H6.69623Z");
			attr(path4, "d", "M3.73691 2.50806V18.7232H16.2631V2.50806H14.4981V1.50806H16.2631C16.8154 1.50806 17.2631 1.95577 17.2631 2.50806V18.7232C17.2631 19.2755 16.8154 19.7232 16.2631 19.7232H3.73691C3.18462 19.7232 2.73691 19.2755 2.73691 18.7232V2.50806C2.73691 1.95577 3.18462 1.50806 3.73691 1.50806H5.75974V2.50806L3.73691 2.50806Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (389:0) {#if name == 'dairy' }
function create_if_block_34(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M6.46816 3.065L4.29671 6.0883L3.4845 5.50493L5.65594 2.48163L6.46816 3.065ZM15.1299 3.15247L13.4802 6.23562L12.5985 5.76386L14.2482 2.6807L15.1299 3.15247Z");
			attr(path1, "d", "M14.5216 2.58283H15.1011L16.4806 5.74789C16.5356 5.87393 16.5639 6.00995 16.5639 6.14744V16.1023C16.5639 16.372 16.455 16.6302 16.2619 16.8184L13.8023 19.2158C13.6156 19.3979 13.3651 19.4997 13.1043 19.4997H11V18.4997H13.1043L15.5639 16.1023V6.14744L14.3152 3.2826L14.5216 3.19268V2.58283Z");
			attr(path2, "d", "M3.49998 5.49976H13.5V18.4998C13.5 19.052 13.0523 19.4998 12.5 19.4998H4.49998C3.94769 19.4998 3.49998 19.052 3.49998 18.4998V5.49976ZM4.49998 6.49976V18.4998H12.5V6.49976H4.49998Z");
			attr(path3, "d", "M5.49998 1.49976C5.49998 0.947471 5.94769 0.499756 6.49998 0.499756H14.1015C14.6538 0.499756 15.1015 0.947471 15.1015 1.49976V2.62301H14.1015V1.49976H6.49998V2.99976H5.49998V1.49976Z");
			attr(path4, "d", "M15.0133 3.08862H5.87577V2.58862H15.0133V3.08862Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (398:0) {#if name == 'dairy_free' }
function create_if_block_33(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			path5 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path5).forEach(detach);
			path6 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path6).forEach(detach);
			path7 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path7).forEach(detach);
			path8 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path8).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M6.20039 12.9182L2.4549 15.5063L1.88641 14.6837L5.63191 12.0955L6.20039 12.9182Z");
			attr(path1, "d", "M17.3978 5.26416L14.2983 7.3195L13.7457 6.48609L16.8452 4.43075L17.3978 5.26416Z");
			attr(path2, "d", "M5.15762 12.7983L4.98999 12.5573L5.81101 11.9864L5.97864 12.2274L5.15762 12.7983Z");
			attr(path3, "d", "M9.93939 18.4998C14.6338 18.4998 18.4394 14.6942 18.4394 9.99976C18.4394 5.30534 14.6338 1.49976 9.93939 1.49976C5.24497 1.49976 1.43939 5.30534 1.43939 9.99976C1.43939 14.6942 5.24497 18.4998 9.93939 18.4998ZM9.93939 19.4998C15.1861 19.4998 19.4394 15.2465 19.4394 9.99976C19.4394 4.75305 15.1861 0.499756 9.93939 0.499756C4.69269 0.499756 0.439392 4.75305 0.439392 9.99976C0.439392 15.2465 4.69269 19.4998 9.93939 19.4998Z");
			attr(path3, "fill-rule", "evenodd");
			attr(path4, "d", "M7.72041 4.91077L6.22367 7.185C6.07186 7.41567 5.7618 7.4796 5.53113 7.32779C5.30046 7.17598 5.23653 6.86592 5.38834 6.63525L6.88508 4.36102L7.72041 4.91077ZM13.7064 5.17641L12.5414 7.35371L11.6597 6.88194L12.8247 4.70465L13.7064 5.17641Z");
			attr(path5, "d", "M13.4248 4.63432L14.6478 6.60375C14.7462 6.76214 14.7983 6.94487 14.7983 7.13132V14.0304C14.7983 14.3 14.6894 14.5582 14.4963 14.7465L12.8465 16.3545C12.6598 16.5366 12.4093 16.6384 12.1485 16.6384H10.7222V15.6384H12.1485L13.7983 14.0304V7.13132L12.5752 5.16189L13.4248 4.63432Z");
			attr(path6, "d", "M5.27887 6.95804C5.27887 6.6819 5.50273 6.45804 5.77887 6.45804H12.6346V15.6385C12.6346 16.1908 12.1869 16.6385 11.6346 16.6385H6.27887C5.72658 16.6385 5.27887 16.1908 5.27887 15.6385V6.95804ZM6.27887 7.45804V15.6385H11.6346V7.45804H6.27887Z");
			attr(path7, "d", "M6.5 3.5C6.5 2.94772 6.94772 2.5 7.5 2.5H12.5C13.0523 2.5 13.5 2.94772 13.5 3.5V4.84992H12.5V3.5H7.5V5H6.5V3.5Z");
			attr(path8, "d", "M13.4084 5.02249H6.95563V4.02249H13.4084V5.02249Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
			append_hydration(svg, path5);
			append_hydration(svg, path6);
			append_hydration(svg, path7);
			append_hydration(svg, path8);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (411:0) {#if name == 'dryer' }
function create_if_block_32(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M18.47 1.53H1.53L1.53 18.47H18.47V1.53ZM1.53 0.5C0.961149 0.5 0.5 0.961148 0.5 1.53V18.47C0.5 19.0389 0.961148 19.5 1.53 19.5H18.47C19.0389 19.5 19.5 19.0389 19.5 18.47V1.53C19.5 0.961149 19.0389 0.5 18.47 0.5H1.53Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M9.99998 15.2238C12.885 15.2238 15.2237 12.885 15.2237 10C15.2237 7.11505 12.885 4.7763 9.99998 4.7763C7.11499 4.7763 4.77624 7.11505 4.77624 10C4.77624 12.885 7.11499 15.2238 9.99998 15.2238ZM9.99998 16.2538C13.4538 16.2538 16.2537 13.4539 16.2537 10C16.2537 6.54619 13.4538 3.7463 9.99998 3.7463C6.54613 3.7463 3.74624 6.54619 3.74624 10C3.74624 13.4539 6.54613 16.2538 9.99998 16.2538Z");
			attr(path1, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (417:0) {#if name == 'eye' }
function create_if_block_31(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M9.5235 4.79973C6.76257 4.92905 4.08307 6.62063 1.1722 9.66543C0.993412 9.85244 0.993412 10.1474 1.1722 10.3344C4.08307 13.3793 6.76258 15.0709 9.52351 15.2003C12.2733 15.3291 15.2667 13.9138 18.8217 10.3399C19.0086 10.152 19.0086 9.84814 18.8217 9.6602C15.2667 6.0863 12.2733 4.67093 9.5235 4.79973ZM9.47509 3.7592C12.6521 3.61039 15.9149 5.26347 19.5564 8.92433C20.1479 9.5189 20.1479 10.4812 19.5564 11.0758C15.9149 14.7366 12.6521 16.3897 9.47508 16.2408C6.30917 16.0924 3.3912 14.1603 0.42305 11.0555C-0.141017 10.4655 -0.141017 9.53435 0.423051 8.94433C3.3912 5.8396 6.30918 3.90749 9.47509 3.7592Z");
			attr(path1, "d", "M13.5807 10.0002C13.5807 11.9741 11.9742 13.5586 10.012 13.5586C8.04979 13.5586 6.44327 11.9741 6.44327 10.0002C6.44327 8.02617 8.04979 6.44176 10.012 6.44176C11.9742 6.44176 13.5807 8.02617 13.5807 10.0002ZM10.012 12.5169C11.4096 12.5169 12.5426 11.3901 12.5426 10.0002C12.5426 8.6102 11.4096 7.48342 10.012 7.48342C8.61438 7.48342 7.48138 8.6102 7.48138 10.0002C7.48138 11.3901 8.61438 12.5169 10.012 12.5169Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (423:0) {#if name == 'fire' }
function create_if_block_30(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M10.289 0.195688L10.0165 0.614868L9.73308 0.202948C9.89985 0.0882083 10.1193 0.085342 10.289 0.195688ZM10.0239 1.22397C10.0059 1.23709 9.98711 1.25084 9.96754 1.2652C9.75267 1.42286 9.44443 1.65462 9.07398 1.94898C8.33229 2.53833 7.34518 3.37545 6.35998 4.36829C5.3731 5.36282 4.39917 6.50258 3.6746 7.69609C2.9476 8.8936 2.49361 10.1091 2.49359 11.265C2.49353 16.0723 6.3863 18.7892 9.86979 18.8827C13.3336 18.9757 17.5064 16.2076 17.5064 11.1715C17.5064 9.95392 17.0516 8.71412 16.3299 7.51857C15.6097 6.32527 14.6416 5.20589 13.6605 4.23874C12.6809 3.27316 11.6994 2.47011 10.9619 1.90808C10.5935 1.62738 10.2871 1.4076 10.0736 1.25854C10.0564 1.24656 10.0399 1.23503 10.0239 1.22397ZM17.1861 7.00182C17.9626 8.28829 18.5064 9.70844 18.5064 11.1716C18.5064 16.8584 13.7772 19.988 9.84295 19.8824C5.92833 19.7773 1.49353 16.7183 1.49359 11.265C1.49361 9.85582 2.04249 8.45751 2.81979 7.17715C3.59952 5.89279 4.63131 4.69065 5.65015 3.66392C6.67066 2.6355 7.68927 1.77201 8.45186 1.16605C8.83356 0.862756 9.1521 0.623199 9.37598 0.45894C9.48794 0.376793 9.5763 0.31343 9.63711 0.270293C9.66752 0.248724 9.69105 0.232207 9.7072 0.220924L9.72585 0.207945L9.73092 0.20444L9.73308 0.202948C9.73308 0.202948 9.73308 0.202948 10.0165 0.614868C10.289 0.195688 10.289 0.195688 10.289 0.195688L10.2913 0.197143L10.2964 0.200494L10.3151 0.21283C10.3313 0.223537 10.3549 0.23919 10.3853 0.259633C10.4461 0.300517 10.5343 0.360582 10.646 0.438599C10.8695 0.594598 11.1873 0.822577 11.568 1.11271C12.3286 1.69232 13.3445 2.52316 14.3625 3.52657C15.3788 4.52841 16.4082 5.71311 17.1861 7.00182Z");
			attr(path1, "d", "M10.2984 6.53911L10.0101 6.94762L9.71091 6.547C9.88437 6.41747 10.1215 6.41428 10.2984 6.53911ZM10.0177 7.57751C9.89792 7.67445 9.74607 7.80014 9.57119 7.95096C9.12226 8.33812 8.52516 8.88776 7.92971 9.53903C7.33288 10.1918 6.7473 10.9363 6.31312 11.7125C5.87714 12.492 5.61131 13.2722 5.6113 14.0056C5.61126 17.1425 7.75659 18.8851 9.9123 18.8851C12.0924 18.8851 14.3887 17.2093 14.3887 13.9436C14.3887 12.3722 13.2922 10.7471 12.0841 9.45463C11.4927 8.82192 10.8996 8.29519 10.4537 7.92638C10.2836 7.78568 10.1354 7.66842 10.0177 7.57751ZM12.8147 8.77178C14.0459 10.089 15.3887 11.9619 15.3887 13.9436C15.3887 17.7841 12.622 19.8851 9.9123 19.8851C7.17825 19.8851 4.61126 17.6683 4.6113 14.0055C4.61131 13.039 4.95783 12.087 5.44038 11.2243C5.92472 10.3585 6.56383 9.55098 7.19169 8.86426C7.82093 8.17602 8.44852 7.59865 8.9181 7.19368C9.15326 6.99088 9.3497 6.83053 9.48811 6.72031C9.55734 6.66518 9.61212 6.62254 9.65004 6.59335L9.694 6.55974L9.70595 6.55072L9.70932 6.54819L9.71091 6.547C9.71091 6.547 9.71091 6.547 10.0101 6.94762C10.2984 6.53911 10.2984 6.53911 10.2984 6.53911L10.3 6.54029L10.3035 6.54273L10.3155 6.55135L10.3597 6.58331C10.3977 6.61105 10.4525 6.65155 10.5217 6.70398C10.66 6.80882 10.8562 6.9616 11.091 7.1558C11.5599 7.54357 12.1864 8.09964 12.8147 8.77178Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (429:0) {#if name == 'gluten_free' }
function create_if_block_29(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			path5 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path5).forEach(detach);
			path6 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path6).forEach(detach);
			path7 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path7).forEach(detach);
			path8 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path8).forEach(detach);
			path9 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path9).forEach(detach);
			path10 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path10).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M7.06824 12.3516L2.5155 15.5063L1.94594 14.6844L6.49868 11.5296L7.06824 12.3516Z");
			attr(path1, "d", "M17.5225 5.32178L12.9698 8.47656L12.4002 7.65461L16.953 4.49983L17.5225 5.32178Z");
			attr(path2, "d", "M9.5 16.5102V7.48755C9.5 7.21141 9.72386 6.98755 10 6.98755C10.2761 6.98755 10.5 7.21141 10.5 7.48755V16.5102C10.5 16.7863 10.2761 17.0102 10 17.0102C9.72386 17.0102 9.5 16.7863 9.5 16.5102Z");
			attr(path3, "d", "M11.6499 6.16907C12.0653 4.3892 11.1344 2.97716 10.4169 2.35932C10.2112 2.18215 9.90167 2.20154 9.71965 2.403C8.5055 3.74686 8.23998 5.05583 8.46722 6.15655L9.44657 5.95437C9.31065 5.296 9.40373 4.45385 10.1172 3.49217C10.5448 4.04146 10.9158 4.91458 10.6761 5.94184L11.6499 6.16907Z");
			attr(path4, "d", "M9.23931 5.58007C8.53263 4.97546 7.68892 4.71888 7.10039 4.65047C6.83071 4.61912 6.58528 4.80872 6.54752 5.07758C6.36481 6.37849 6.53802 7.47619 7.01787 8.2605L7.87088 7.73861C7.60135 7.29806 7.43535 6.634 7.48488 5.74907C7.84288 5.85624 8.24246 6.04325 8.58922 6.33992C9.09387 6.77167 9.51495 7.45768 9.51495 8.56389L10.515 8.56389C10.515 7.16257 9.96384 6.19994 9.23931 5.58007Z");
			attr(path5, "d", "M10.7766 5.7705C11.4833 5.16589 12.327 4.90931 12.9155 4.8409C13.1852 4.80955 13.4307 4.99915 13.4684 5.26801C13.6511 6.56892 13.4779 7.66662 12.9981 8.45093L12.145 7.92903C12.4146 7.48849 12.5806 6.82443 12.531 5.9395C12.1731 6.04667 11.7735 6.23368 11.4267 6.53035C10.9221 6.9621 10.501 7.64811 10.501 8.75432L9.50098 8.75432C9.50098 7.353 10.0521 6.39037 10.7766 5.7705Z");
			attr(path6, "d", "M11.1313 8.03618C11.9048 7.51988 12.7731 7.36543 13.3655 7.36747C13.637 7.3684 13.8582 7.58583 13.8637 7.85728C13.8905 9.17069 13.588 10.24 13.0183 10.9617L12.2334 10.3421C12.5534 9.93673 12.7972 9.29711 12.8532 8.41257C12.485 8.47642 12.066 8.61459 11.6864 8.86793C11.134 9.23663 10.6344 9.86771 10.5029 10.9661L9.50995 10.8472C9.67655 9.45581 10.3382 8.56552 11.1313 8.03618Z");
			attr(path7, "d", "M8.78433 8.01627C7.99185 7.52953 7.11841 7.40795 6.52642 7.43234C6.25515 7.44352 6.04237 7.66914 6.04708 7.9406C6.06991 9.25408 6.41252 10.3112 7.00904 11.0109L7.77002 10.3621C7.43496 9.96912 7.16722 9.33916 7.07786 8.45736C7.44821 8.50727 7.8721 8.62954 8.26096 8.86838C8.82688 9.21597 9.34999 9.82774 9.52286 10.9204L10.5106 10.7641C10.2916 9.37999 9.59682 8.51531 8.78433 8.01627Z");
			attr(path8, "d", "M10.4487 12.1822C9.29338 10.2297 7.27248 10.0798 6.23288 10.3152C5.96807 10.3752 5.79951 10.6355 5.85315 10.9016C6.11442 12.1981 6.67517 13.079 7.37604 13.6435C8.07111 14.2032 8.86395 14.4197 9.54256 14.4622L9.60513 13.4642C9.08338 13.4315 8.50257 13.2667 8.00326 12.8646C7.59385 12.5349 7.21139 12.0234 6.96619 11.2297C7.77612 11.2096 8.8907 11.5129 9.58803 12.6914L10.4487 12.1822Z");
			attr(path9, "d", "M9.50482 12.1822C10.6601 10.2297 12.681 10.0798 13.7206 10.3152C13.9854 10.3752 14.154 10.6355 14.1003 10.9016C13.8401 12.1932 13.2951 13.0779 12.6087 13.6485C11.9265 14.2156 11.1444 14.4393 10.4615 14.4821L10.3989 13.4841C10.9164 13.4516 11.4827 13.2842 11.9695 12.8795C12.3704 12.5463 12.7452 12.0292 12.9884 11.2297C12.1784 11.2093 11.0631 11.5123 10.3655 12.6914L9.50482 12.1822Z");
			attr(path10, "d", "M10 18.4998C14.6944 18.4998 18.5 14.6942 18.5 9.99976C18.5 5.30534 14.6944 1.49976 10 1.49976C5.30558 1.49976 1.5 5.30534 1.5 9.99976C1.5 14.6942 5.30558 18.4998 10 18.4998ZM10 19.4998C15.2467 19.4998 19.5 15.2465 19.5 9.99976C19.5 4.75305 15.2467 0.499756 10 0.499756C4.75329 0.499756 0.5 4.75305 0.5 9.99976C0.5 15.2465 4.75329 19.4998 10 19.4998Z");
			attr(path10, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
			append_hydration(svg, path5);
			append_hydration(svg, path6);
			append_hydration(svg, path7);
			append_hydration(svg, path8);
			append_hydration(svg, path9);
			append_hydration(svg, path10);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (444:0) {#if name == 'heart' }
function create_if_block_28(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M10 5.2393L8.5149 3.77392C6.79996 2.08174 4.01945 2.08174 2.30451 3.77392C0.589562 5.4661 0.589563 8.2097 2.30451 9.90188L10 17.4952L17.6955 9.90188C19.4104 8.2097 19.4104 5.4661 17.6955 3.77392C15.9805 2.08174 13.2 2.08174 11.4851 3.77392L10 5.2393ZM10.765 3.06343C12.8777 0.978857 16.3029 0.978856 18.4155 3.06343C20.5282 5.148 20.5282 8.52779 18.4155 10.6124L10.72 18.2057C10.3224 18.5981 9.67763 18.5981 9.27996 18.2057L1.58446 10.6124C-0.528154 8.52779 -0.528154 5.14801 1.58446 3.06343C3.69708 0.978859 7.12233 0.978858 9.23495 3.06343L10 3.81832L10.765 3.06343Z");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (449:0) {#if name == 'iron' }
function create_if_block_27(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M7.06843 2C7.06843 1.72386 7.29229 1.5 7.56843 1.5H18.8715C19.5071 1.5 20 2.01682 20 2.64089H19C19 2.55058 18.9365 2.5 18.8715 2.5H7.56843C7.29229 2.5 7.06843 2.27614 7.06843 2ZM0.0496071 16.2893L0.0456548 16.3034L0.0425352 16.3177C-0.0693018 16.8308 0.0392824 17.3941 0.373431 17.8237C0.704644 18.2495 1.21056 18.5 1.7572 18.5H18.2429C19.2185 18.5 20 17.6891 20 16.7183V2.64089H19V7.78236H12.3493C7.3981 7.78236 4.24306 9.43504 2.37802 11.7502C1.47719 12.8655 0.897699 13.9807 0.5528 14.8266C0.38499 15.233 0.255782 15.5934 0.17739 15.8549C0.15381 15.9277 0.121759 16.037 0.0970143 16.1228C0.0838597 16.1684 0.0720441 16.2099 0.0635213 16.2399L0.0534033 16.2758L0.0496071 16.2893ZM19 8.78236H12.3493C7.63614 8.78236 4.79462 10.3441 3.15638 12.378C2.3266 13.4053 1.79297 14.4333 1.47838 15.2051L1.47751 15.2072C1.3171 15.5957 1.19979 15.9259 1.13382 16.1469L1.13011 16.1593C1.11264 16.2128 1.08389 16.3096 1.05785 16.3999C1.04524 16.4436 1.03388 16.4835 1.02566 16.5125L1.01689 16.5436C0.968598 16.7829 1.02541 17.0332 1.16275 17.2097C1.3055 17.3933 1.52075 17.5 1.7572 17.5H18.2429C18.648 17.5 19 17.1552 19 16.7183V8.78236Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M8.7886 14.3589C8.3886 14.3589 8.08859 14.6589 8.08859 15.0589C8.08859 15.4489 8.3886 15.7489 8.7886 15.7489C9.1886 15.7489 9.48861 15.4489 9.48861 15.0589C9.47861 14.6689 9.1786 14.3589 8.7886 14.3589Z");
			attr(path2, "d", "M11.6186 14.3589C11.2186 14.3589 10.9186 14.6589 10.9186 15.0589C10.9186 15.4489 11.2186 15.7489 11.6186 15.7489C12.0186 15.7489 12.3186 15.4489 12.3186 15.0589C12.3086 14.6689 12.0086 14.3589 11.6186 14.3589Z");
			attr(path3, "d", "M14.4486 14.3589C14.0486 14.3589 13.7486 14.6589 13.7486 15.0589C13.7486 15.4489 14.0486 15.7489 14.4486 15.7489C14.8486 15.7489 15.1486 15.4489 15.1486 15.0589C15.1486 14.6689 14.8486 14.3589 14.4486 14.3589Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (457:0) {#if name == 'leaf' }
function create_if_block_26(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M18.6307 0.0851008C18.9214 0.143319 19.2573 0.251631 19.499 0.483071C19.7487 0.722288 19.8616 1.06444 19.9202 1.35568C19.9821 1.66275 20.0008 2.00418 20 2.32523C19.9986 2.89096 19.9355 3.45932 19.9011 3.76888C19.8965 3.81064 19.8924 3.8477 19.889 3.8794L19.8885 3.88469C19.7574 5.00604 19.5546 6.53586 19.2559 8.16345C18.9577 9.77538 18.5618 11.5447 18.0423 13.1175L18.0415 13.1198C17.54 14.6143 16.835 16.2292 15.7876 17.2779C12.1807 20.8897 6.31722 20.917 2.70668 17.3017C-0.903844 13.6864 -0.876728 7.8151 2.73025 4.20335C3.77726 3.15495 5.37751 2.44898 6.88416 1.94609L6.88527 1.94573C8.4557 1.42559 10.21 1.02928 11.8328 0.73059C13.4582 0.431407 14.986 0.228254 16.1059 0.097027L16.1111 0.0964089C16.1231 0.0951308 16.1358 0.0937998 16.1492 0.09237C16.4416 0.0610531 17.0517 -0.0042707 17.6652 0.000220251C17.9855 0.00256445 18.3248 0.0238389 18.6307 0.0851008ZM16.2207 1.10269C15.114 1.23241 13.6107 1.4325 12.0155 1.72612C10.4166 2.02043 8.71247 2.40674 7.20334 2.90653C5.72522 3.39993 4.31684 4.04614 3.44505 4.91909C0.229287 8.13911 0.209266 13.3695 3.42148 16.5859C6.63368 19.8024 11.8571 19.7822 15.0728 16.5622C15.9442 15.6897 16.5895 14.2687 17.0829 12.7984C17.5818 11.2879 17.9676 9.5703 18.2616 7.98044C18.5549 6.38318 18.7546 4.8779 18.8841 3.76969C18.8878 3.73473 18.8921 3.69563 18.8969 3.65288C18.9315 3.33899 18.9879 2.82875 18.9891 2.32275C18.9898 2.03445 18.9722 1.76875 18.9293 1.5558C18.8832 1.32703 18.8229 1.23626 18.8002 1.21454C18.7694 1.18504 18.6656 1.12434 18.4325 1.07766C18.2146 1.03402 17.9461 1.01452 17.6578 1.01241C17.1035 1.00835 16.5429 1.06826 16.2505 1.09951C16.2402 1.10061 16.2303 1.10167 16.2207 1.10269Z");
			attr(path1, "d", "M19.4297 0.501734C19.6261 0.7004 19.6244 1.02084 19.426 1.21747L0.860985 19.6161C0.662582 19.8127 0.342561 19.811 0.146198 19.6124C-0.0501654 19.4137 -0.0485124 19.0933 0.14989 18.8966L18.7149 0.498038C18.9133 0.301414 19.2334 0.303069 19.4297 0.501734Z");
			attr(path2, "d", "M5.62257 2.4772H6.12801V13.6663H17.3961V14.1724H5.62257V2.4772Z");
			attr(path3, "d", "M10.1879 1.18752H10.6933L10.6933 9.14731H18.7842V9.65342H10.1879L10.1879 1.18752Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (465:0) {#if name == 'leather' }
function create_if_block_25(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M7.97895 1.55555C7.75602 1.55555 7.55049 1.71237 7.49305 1.94762L7.49123 1.95509C7.42498 2.21019 7.33959 2.53757 7.21755 2.85227C7.09741 3.16208 6.92519 3.50498 6.66011 3.77111C5.94871 4.49525 4.9347 4.58069 4.15302 4.58069C3.86517 4.58069 3.57871 4.54519 3.29458 4.47515C3.24995 4.46626 3.17168 4.45029 3.08678 4.41925C3.02446 4.40156 2.97878 4.39485 2.93608 4.39485C2.85763 4.39485 2.77367 4.41506 2.69931 4.45229C2.58049 4.51177 2.49244 4.61426 2.45245 4.74393L2.08187 5.96006C1.99969 6.23376 2.14791 6.5108 2.40926 6.59694C3.06631 6.80864 3.64401 7.16273 4.12596 7.64524C5.79603 9.31728 5.79603 12.0249 4.12596 13.697L4.1207 13.7022C3.70656 14.1053 3.22471 14.4375 2.66344 14.653C2.42776 14.7449 2.29223 15.0137 2.37026 15.2777L2.3694 15.275L2.37085 15.2797L2.37026 15.2777L2.92436 17.0653L2.92291 17.061L2.92626 17.0715L2.92436 17.0653C2.97736 17.22 3.1002 17.3437 3.23664 17.3938C3.23134 17.3924 3.22591 17.3909 3.22032 17.3894L3.24853 17.3979C3.24455 17.3966 3.24059 17.3952 3.23664 17.3938C3.31908 17.4155 3.36721 17.4222 3.41048 17.4222C3.49912 17.4222 3.60995 17.3887 3.70246 17.3233C3.98945 17.1198 4.30448 16.9574 4.6125 16.8318L4.61978 16.8288C5.10547 16.639 5.61461 16.5446 6.14334 16.5446C7.11309 16.5446 8.05549 16.8874 8.79764 17.4889L8.80712 17.4966L8.81955 17.5076C8.90806 17.5864 9.00821 17.6755 9.10985 17.7768C9.10724 17.7743 9.10462 17.7719 9.10199 17.7695L9.11722 17.7841C9.11476 17.7817 9.11231 17.7792 9.10985 17.7768C9.26909 17.925 9.40178 18.0826 9.51863 18.2455L9.51488 18.2407L9.52415 18.2532C9.52231 18.2507 9.52048 18.2481 9.51863 18.2455C9.61654 18.3713 9.76885 18.4444 9.91772 18.4444V19.4999C9.42913 19.4999 8.96472 19.2651 8.67058 18.8776L8.66585 18.8714L8.66131 18.865C8.57515 18.7443 8.48502 18.6386 8.38216 18.5436L8.3744 18.5364L8.36693 18.5289C8.28943 18.4513 8.21077 18.3808 8.12058 18.3006C8.12363 18.303 8.12667 18.3055 8.12971 18.3079L8.11112 18.2921C8.11428 18.295 8.11744 18.2978 8.12058 18.3006C7.56475 17.8535 6.86093 17.6002 6.14334 17.6002C5.74527 17.6002 5.36861 17.6705 5.00975 17.8102L5.01345 17.8087L5.00616 17.8116L5.00975 17.8102C4.7622 17.9115 4.52249 18.0371 4.31551 18.1839C4.05739 18.3663 3.73435 18.4778 3.41048 18.4778C3.22966 18.4778 3.07494 18.4441 2.94062 18.4074L2.9264 18.4036L2.91241 18.3989C2.43607 18.2399 2.07057 17.8518 1.91799 17.3935L1.91453 17.3831L1.35631 15.5819C1.12631 14.8143 1.50604 13.9695 2.27996 13.6691L2.28202 13.6683C2.68845 13.5124 3.05095 13.2676 3.37829 12.9495L3.37567 12.9522L3.38096 12.9469L3.37829 12.9495C4.63437 11.6891 4.6335 9.64934 3.37567 8.39003C3.01234 8.02628 2.57987 7.76103 2.08252 7.60098L2.08001 7.60016C1.26969 7.33494 0.820566 6.47637 1.06787 5.6562L1.06832 5.65473L1.43956 4.43642L1.43993 4.43521C1.565 4.02823 1.84814 3.69722 2.22417 3.50898C2.43856 3.40166 2.68453 3.3393 2.93608 3.3393C3.11661 3.3393 3.27314 3.37268 3.40855 3.41335L3.43121 3.42015L3.45248 3.42867C3.45248 3.42867 3.45629 3.42989 3.46231 3.4314C3.47374 3.43427 3.48719 3.43707 3.51473 3.44259L3.52713 3.44507L3.5394 3.44814C3.746 3.49985 3.95026 3.52514 4.15302 3.52514C4.91759 3.52514 5.52295 3.42089 5.9046 3.03158L5.90806 3.02805C6.02355 2.91242 6.13155 2.72544 6.22996 2.47166C6.32632 2.22316 6.39772 1.95396 6.46528 1.69386L6.46427 1.69798L6.46615 1.69052L6.46528 1.69386C6.63616 1.00201 7.25456 0.5 7.97895 0.5H11.609C12.3348 0.5 12.9542 1.00401 13.1237 1.69798L13.1242 1.70013C13.1834 1.94725 13.2587 2.21702 13.359 2.46369C13.4616 2.71581 13.5762 2.90808 13.696 3.02807C14.1211 3.45365 14.7781 3.68003 15.4455 3.68003C15.5631 3.68003 15.6809 3.67176 15.7991 3.65507C16.0139 3.6203 16.225 3.56054 16.415 3.47834C16.6179 3.38568 16.8361 3.3393 17.0543 3.3393C17.2747 3.3393 17.4951 3.38664 17.6997 3.48119C18.0942 3.66348 18.4093 4.00233 18.5392 4.44215L18.9305 5.59736L18.9334 5.60717C19.0547 6.01723 19.0121 6.46746 18.7906 6.84757C18.5695 7.22709 18.1953 7.48993 17.7778 7.58282L17.7709 7.58435C17.5695 7.62636 17.3676 7.69501 17.1451 7.78185C16.7638 7.95199 16.4097 8.19235 16.1092 8.49326C15.4747 9.1285 15.1188 9.97588 15.1188 10.8775C15.1188 11.7824 15.4665 12.6274 16.1066 13.2593L16.1092 13.2619C16.4842 13.6374 16.929 13.9137 17.4287 14.0838C18.1828 14.3325 18.7843 15.188 18.5193 16.05L18.0759 17.4952L18.0752 17.4976C17.9207 17.9926 17.544 18.3705 17.0476 18.5259L17.0418 18.5277C16.9097 18.5673 16.7524 18.6017 16.5797 18.6017C16.2411 18.6017 15.898 18.4939 15.6144 18.273L15.6108 18.2702C15.3991 18.1024 15.1801 17.9708 14.9427 17.865L14.9447 17.8659L14.9408 17.8641L14.9427 17.865C14.5354 17.688 14.1132 17.6002 13.6715 17.6002C12.9507 17.6002 12.2587 17.8453 11.7065 18.2988L11.7141 18.2921L11.6994 18.3047C11.7018 18.3028 11.7041 18.3008 11.7065 18.2988L11.4477 18.5292C11.4511 18.5257 11.4547 18.5221 11.4582 18.5186L11.4356 18.5399L11.4477 18.5292C11.3396 18.6384 11.2492 18.7459 11.1669 18.8609C11.1682 18.8589 11.1695 18.857 11.1708 18.8551L11.1639 18.865L11.1669 18.8609C10.8858 19.2703 10.4109 19.4975 9.92545 19.4999L9.92546 18.4444H9.91772C10.0873 18.4444 10.2255 18.3642 10.2941 18.2632L10.3009 18.2532C10.4214 18.0843 10.5538 17.9281 10.7079 17.7738L10.7189 17.7628L11.0162 17.4983L11.0237 17.4921C11.7696 16.8756 12.7042 16.5446 13.6715 16.5446C14.2604 16.5446 14.8275 16.663 15.3684 16.8985L15.3723 16.9002C15.6902 17.0416 15.9855 17.219 16.2676 17.4422L16.2662 17.4411L16.2698 17.444L16.2676 17.4422C16.355 17.5098 16.4651 17.5461 16.5797 17.5461C16.6128 17.5461 16.6607 17.5394 16.7332 17.5179L16.7305 17.5187L16.7363 17.517L16.7332 17.5179C16.895 17.4664 17.0122 17.3494 17.0638 17.185L17.5069 15.741C17.5716 15.5306 17.412 15.1893 17.0951 15.0856L17.0895 15.0838C16.4357 14.8617 15.8506 14.4986 15.3602 14.008L15.3615 14.0093L15.3589 14.0067L15.3602 14.008C14.5161 13.1739 14.0599 12.0577 14.0599 10.8775C14.0599 9.69362 14.529 8.57933 15.3589 7.74846C15.7569 7.34998 16.2242 7.03443 16.7259 6.81248L16.7363 6.80786L16.747 6.80369C16.9934 6.70716 17.2611 6.61261 17.5499 6.55201L17.5472 6.55261L17.5541 6.55113L17.5499 6.55201C17.6881 6.52047 17.8079 6.43273 17.875 6.3174C17.9411 6.20409 17.9608 6.05889 17.9202 5.91414L17.924 5.92537L17.9178 5.90587C17.9187 5.90862 17.9195 5.91138 17.9202 5.91414L17.5282 4.75688L17.5247 4.74458C17.4871 4.61282 17.3921 4.50249 17.2544 4.43887C17.1909 4.40952 17.1226 4.39485 17.0543 4.39485C16.9859 4.39485 16.9176 4.40953 16.8541 4.43887L16.8433 4.44383C16.5614 4.56653 16.2601 4.6503 15.9626 4.69796L15.9538 4.69937C15.7847 4.72356 15.6152 4.73559 15.4455 4.73559C14.5661 4.73559 13.6138 4.4417 12.9457 3.77286C12.684 3.51084 12.5047 3.17239 12.3778 2.86025C12.2488 2.54315 12.1592 2.21564 12.0947 1.94676C12.037 1.71199 11.8317 1.55555 11.609 1.55555H7.97895Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (470:0) {#if name == 'lightning_bolt' }
function create_if_block_24(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M14.6792 0.161747C14.8796 0.280525 14.9715 0.522024 14.9006 0.743992L12.5162 8.21151L16.6937 9.21166C16.8685 9.2535 17.0074 9.38595 17.0575 9.55856C17.1076 9.73117 17.0612 9.91739 16.936 10.0463L7.56282 19.6949C7.39667 19.8659 7.13287 19.8958 6.93265 19.7663C6.73242 19.6368 6.65151 19.384 6.73935 19.1623L9.70397 11.6806L5.23445 10.6106C5.06054 10.5689 4.9221 10.4376 4.87139 10.2661C4.82068 10.0946 4.86541 9.9091 4.9887 9.77957L14.0621 0.247179C14.2228 0.0784039 14.4787 0.042969 14.6792 0.161747ZM6.3116 9.84018L10.4977 10.8424C10.6387 10.8761 10.7581 10.9694 10.8249 11.0981C10.8918 11.2267 10.8995 11.378 10.8461 11.5128L8.59272 17.1996L15.6066 9.97963L11.7597 9.05865C11.6245 9.02628 11.5089 8.93906 11.4406 8.81795C11.3723 8.69683 11.3575 8.55276 11.3998 8.42031L13.286 2.51296L6.3116 9.84018Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (475:0) {#if name == 'lipstick' }
function create_if_block_23(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M5.75667 9.01565C6.15216 8.63015 6.79313 8.6304 7.18832 9.01621L11.3583 13.0872C11.7535 13.473 11.7533 14.0983 11.3578 14.4838L7.09967 18.6344C6.3087 19.4054 5.02676 19.4049 4.23639 18.6332L1.49746 15.9593C0.707086 15.1877 0.707575 13.9372 1.49855 13.1662L5.75667 9.01565ZM10.6422 13.7852L6.47222 9.71421L2.2141 13.8648C1.81861 14.2503 1.81837 14.8755 2.21355 15.2613L4.95248 17.9352C5.34767 18.3211 5.98864 18.3213 6.38412 17.9358L10.6422 13.7852Z");
			attr(path1, "d", "M9.72567 6.73552L13.6983 10.6138L10.5435 13.6889L6.57087 9.81062L9.72567 6.73552ZM9.72513 8.13208L8.00251 9.81118L10.544 12.2923L12.2666 10.6132L9.72513 8.13208Z");
			attr(path2, "d", "M15.5129 1.0945C15.9084 0.709004 16.5493 0.709254 16.9445 1.09506L17.6972 1.82982C19.0803 3.18014 19.0795 5.36856 17.6953 6.7178L12.9823 11.3117L9.00968 7.43344L15.5129 1.0945ZM16.9811 2.52782L16.2284 1.79306L10.4413 7.434L12.9828 9.91516L16.9797 6.01924C17.9684 5.0555 17.969 3.49234 16.9811 2.52782Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (482:0) {#if name == 'lock' }
function create_if_block_22(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M16.5 7.11819H3.5L3.5 18.9997L16.5 18.9997V7.11819ZM3.5 6.11786C2.94772 6.11786 2.5 6.56573 2.5 7.11819V18.9997C2.5 19.5521 2.94772 20 3.5 20H16.5C17.0523 20 17.5 19.5521 17.5 18.9997V7.11819C17.5 6.56572 17.0523 6.11786 16.5 6.11786H3.5Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M11.443 11.9199C11.443 12.7406 10.797 13.406 10.0001 13.406C9.20314 13.406 8.55712 12.7406 8.55712 11.9199C8.55712 11.0992 9.20314 10.4338 10.0001 10.4338C10.797 10.4338 11.443 11.0992 11.443 11.9199Z");
			attr(path2, "d", "M10.0187 11.9202C10.3639 11.9202 10.6437 12.2001 10.6437 12.5454V15.6971C10.6437 16.0424 10.3639 16.3223 10.0187 16.3223C9.67354 16.3223 9.39372 16.0424 9.39372 15.6971V12.5454C9.39372 12.2001 9.67354 11.9202 10.0187 11.9202Z");
			attr(path3, "d", "M6.2417 3.75956C6.2417 1.68321 7.92435 0 10 0C12.0757 0 13.7583 1.68321 13.7583 3.75956V6.12135H12.7583V3.75956C12.7583 2.23568 11.5234 1.00033 10 1.00033C8.47663 1.00033 7.2417 2.23568 7.2417 3.75956V6.12135H6.2417V3.75956Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (490:0) {#if name == 'map_pin' }
function create_if_block_21(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M9.91038 18.5904L14.9458 9.80988C17.1744 5.9237 14.4213 1.03316 10.004 1.03316C5.61856 1.03316 2.85676 5.85475 5.01217 9.74644L9.91038 18.5904ZM10.004 0C4.84496 0 1.59264 5.67261 4.13039 10.2547L9.34236 19.6651C9.58751 20.1078 10.2108 20.1126 10.4625 19.6737L15.82 10.3316C18.4445 5.75498 15.2016 0 10.004 0Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M12.9997 6.79602C12.9997 8.5559 11.6011 9.98256 9.87597 9.98256C8.1508 9.98256 6.75228 8.5559 6.75228 6.79602C6.75228 5.03615 8.1508 3.60949 9.87597 3.60949C11.6011 3.60949 12.9997 5.03615 12.9997 6.79602ZM9.87597 8.9494C11.0418 8.9494 11.9869 7.9853 11.9869 6.79602C11.9869 5.60675 11.0418 4.64265 9.87597 4.64265C8.71015 4.64265 7.76506 5.60675 7.76506 6.79602C7.76506 7.9853 8.71015 8.9494 9.87597 8.9494Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (496:0) {#if name == 'nut_free' }
function create_if_block_20(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M8.38041 11.5855L2.5155 15.5063L1.95973 14.675L7.82464 10.7542L8.38041 11.5855Z");
			attr(path1, "d", "M17.6981 5.08643L11.8332 9.00726L11.2774 8.17593L17.1424 4.25509L17.6981 5.08643Z");
			attr(path2, "d", "M6.13399 9.34115C6.80574 10.0344 7.66191 10.4557 8.28602 10.5914C8.40535 10.6174 8.51106 10.6861 8.5832 10.7847C8.70288 10.9482 8.80546 11.0846 8.89607 11.2051C9.04851 11.4078 9.16711 11.5655 9.2764 11.7315C9.46109 12.0119 9.6332 12.3328 9.95101 12.9745C10.4796 14.0417 11.4698 14.339 11.8528 14.4362C12.4756 14.5687 12.9843 14.6365 13.3964 14.6349C13.8107 14.6334 14.0932 14.5618 14.2896 14.4469C14.6434 14.2399 14.9175 13.76 14.9175 12.5471C14.9175 11.6522 14.5765 10.8589 14.0942 10.2599C13.6042 9.65156 13.0036 9.28557 12.5348 9.1946C11.3967 8.97378 10.7812 8.27648 10.5969 7.84891C10.4593 7.53894 10.1866 7.07083 9.87896 6.62103C9.5679 6.16616 9.26103 5.78894 9.06123 5.61912C8.45551 5.15102 8.02652 5.00866 7.42372 4.90607C6.29733 4.71437 5.79753 4.88276 5.55066 5.1071C5.28632 5.34732 5.14585 5.79122 5.09075 6.56826C5.00813 7.73344 5.47224 8.65824 6.13399 9.34115ZM5.41583 10.037C4.59647 9.19146 3.98677 7.99933 4.09325 6.49754C4.14909 5.71003 4.29708 4.89505 4.87814 4.36703C5.47667 3.82312 6.37921 3.71392 7.5915 3.92024C8.33035 4.04599 8.92081 4.24475 9.68194 4.835C9.68684 4.8388 9.69167 4.84269 9.69642 4.84667C10.0093 5.10851 10.3844 5.58865 10.7044 6.05655C11.0305 6.53334 11.3407 7.05887 11.5124 7.44641L11.5151 7.45267C11.5652 7.57005 11.9047 8.0537 12.7253 8.21291C13.4827 8.35987 14.2758 8.89112 14.873 9.63272C15.4779 10.3838 15.9175 11.3932 15.9175 12.5471C15.9175 13.8345 15.6375 14.8169 14.7946 15.31C14.3928 15.5451 13.9164 15.633 13.4001 15.6349C12.8836 15.6368 12.293 15.5526 11.635 15.4122C11.6291 15.4109 11.6232 15.4095 11.6172 15.4081C11.1791 15.2976 9.79283 14.9082 9.0549 13.4183C8.73742 12.7773 8.58886 12.5057 8.44122 12.2815C8.34723 12.1387 8.25749 12.0196 8.1243 11.8429C8.05736 11.7541 7.97945 11.6507 7.88452 11.5224C7.10236 11.3107 6.16389 10.809 5.41583 10.037Z");
			attr(path3, "d", "M10 18.4998C14.6944 18.4998 18.5 14.6942 18.5 9.99976C18.5 5.30534 14.6944 1.49976 10 1.49976C5.30558 1.49976 1.5 5.30534 1.5 9.99976C1.5 14.6942 5.30558 18.4998 10 18.4998ZM10 19.4998C15.2467 19.4998 19.5 15.2465 19.5 9.99976C19.5 4.75305 15.2467 0.499756 10 0.499756C4.75329 0.499756 0.5 4.75305 0.5 9.99976C0.5 15.2465 4.75329 19.4998 10 19.4998Z");
			attr(path3, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (504:0) {#if name == 'pants' }
function create_if_block_19(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M5.38585 1.09329C5.07555 1.09329 4.81943 1.35288 4.81943 1.66737V3.1424V3.68905V3.79657L2.58822 17.5451C2.53138 17.8619 2.74218 18.1574 3.04189 18.2081L3.04477 18.2086L7.0226 18.9029L7.0238 18.9031C7.03985 18.9058 7.05426 18.9067 7.12196 18.9067C7.2249 18.9067 7.34688 18.8779 7.49367 18.8011C7.61722 18.7011 7.68686 18.5755 7.70572 18.4512L7.70722 18.4414L9.22185 9.54571C9.37633 8.63834 10.6618 8.63833 10.8163 9.54568L12.3206 18.379C12.3651 18.656 12.5975 18.8507 12.8719 18.8507C12.9396 18.8507 12.954 18.8497 12.97 18.8471L12.9712 18.8469L16.9432 18.1536C17.1105 18.1199 17.2405 18.0327 17.3138 17.9238C17.4016 17.7932 17.4374 17.6315 17.4146 17.4768L15.1762 3.68905L15.1388 3.33082L15.1191 3.1424V1.66737C15.1191 1.35288 14.8629 1.09329 14.5526 1.09329H5.38585ZM3.74074 1.66737C3.74074 0.749069 4.47981 0 5.38585 0H14.5526C15.4587 0 16.1977 0.749069 16.1977 1.66737V3.24777L18.4804 17.3081C18.5452 17.7354 18.4484 18.1779 18.205 18.5397C17.9471 18.9231 17.548 19.149 17.1425 19.2281L17.1322 19.2301L13.1514 19.9248L13.1486 19.9253C13.0375 19.9441 12.9437 19.944 12.8803 19.944L12.8719 19.944C12.0855 19.944 11.3898 19.3778 11.2564 18.5579L11.2559 18.5552L10.0191 11.2923L8.77103 18.6229C8.70148 19.0708 8.44825 19.4502 8.10262 19.7049L8.07511 19.7252L8.04531 19.7418C7.7641 19.8986 7.45399 20 7.12196 20L7.1135 20C7.05014 20 6.95633 20.0001 6.84527 19.9813L6.8424 19.9808L2.86456 19.2865L2.86275 19.2862C1.97085 19.1345 1.36484 18.268 1.52597 17.3544L3.74074 3.70726V1.66737Z");
			attr(path1, "d", "M15.1762 3.68905H4.81943V3.1424H15.1191L15.1762 3.68905Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (510:0) {#if name == 'paw_print' }
function create_if_block_18(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M4.34392 7.16368C4.01559 6.62807 3.5917 6.36975 3.21922 6.39495C2.73316 6.42785 2.45795 6.58174 2.30073 6.74933C2.14054 6.92007 2.05037 7.16105 2.04138 7.46193C2.02254 8.09186 2.36617 8.81926 2.81281 9.17768C3.09955 9.40778 3.55864 9.54479 3.95773 9.4945C4.32171 9.44864 4.59366 9.26185 4.68772 8.84687C4.80166 8.34416 4.66637 7.68972 4.34392 7.16368ZM5.19648 6.64106C5.62446 7.33924 5.84642 8.25859 5.66298 9.06792C5.45965 9.96498 4.78605 10.398 4.08274 10.4867C3.41454 10.5708 2.68459 10.357 2.18694 9.95761C1.49068 9.39888 1.0138 8.36924 1.04182 7.43204C1.05626 6.94936 1.20637 6.45426 1.57143 6.06513C1.93946 5.67284 2.47446 5.44307 3.15171 5.39724C4.05461 5.33615 4.77437 5.95246 5.19648 6.64106Z");
			attr(path1, "d", "M7.14946 1.68176C6.9184 1.59371 6.62261 1.70407 6.49559 1.9565C6.22812 2.48805 6.083 3.36616 6.18378 4.10853C6.35261 5.35217 7.25625 5.71812 7.70271 5.65305C7.86816 5.62894 8.12274 5.47614 8.31293 5.14915C8.49419 4.83751 8.59089 4.40403 8.47246 3.90187C8.36055 3.42733 8.19106 2.91836 7.95574 2.49796C7.7165 2.07056 7.44271 1.79351 7.14946 1.68176ZM5.6023 1.50701C5.94378 0.828378 6.76265 0.464216 7.50555 0.747312C8.11181 0.978337 8.53571 1.48675 8.82834 2.00952C9.12489 2.5393 9.32145 3.14522 9.44576 3.67233C9.62415 4.42875 9.48453 5.12377 9.17735 5.65192C8.87909 6.16472 8.39313 6.563 7.84693 6.6426C6.80439 6.79453 5.43013 5.99077 5.19287 4.24305C5.06802 3.32337 5.23428 2.23839 5.6023 1.50701Z");
			attr(path2, "d", "M12.6907 1.80274C12.3355 1.97062 12.0017 2.33008 11.8476 2.75928C11.6133 3.41213 11.5804 4.12275 11.9972 4.77771C12.1956 5.08948 12.3753 5.24649 12.5141 5.32269C12.6452 5.39474 12.7606 5.40672 12.8697 5.38874C13.119 5.34765 13.3959 5.13462 13.6039 4.86582C13.6354 4.82509 13.6668 4.77061 13.706 4.68927C13.7204 4.65945 13.7348 4.62961 13.7492 4.59974C13.8655 4.35944 13.9828 4.11688 14.0737 3.86325C14.1756 3.57906 14.2289 3.32057 14.2137 3.09192C14.192 2.76518 13.9579 2.26203 13.5735 1.8984C13.333 1.67099 13.0297 1.64254 12.6907 1.80274ZM12.2635 0.898617C12.8842 0.605286 13.6539 0.598007 14.2606 1.1719C14.7883 1.67098 15.1698 2.39777 15.2115 3.02563C15.2396 3.44739 15.1396 3.85347 15.015 4.20081C14.9048 4.50815 14.7632 4.80049 14.649 5.03616C14.6345 5.0661 14.6205 5.09513 14.607 5.12316C14.5566 5.2278 14.4896 5.35525 14.3948 5.47779C14.1224 5.82976 13.6457 6.27432 13.0323 6.37543C12.7101 6.42854 12.3669 6.38277 12.0326 6.19918C11.706 6.01974 11.4135 5.72323 11.1535 5.31458C10.5193 4.31806 10.6049 3.26144 10.9064 2.4214C11.1464 1.75307 11.659 1.18427 12.2635 0.898617Z");
			attr(path3, "d", "M17.6809 6.04621C17.5007 5.91767 17.2317 5.89108 16.9698 6.00071C16.4976 6.19832 16.0025 6.58528 15.8248 7.18311C15.6412 7.8004 15.7046 8.22074 15.8297 8.46804C15.9512 8.70832 16.1477 8.82666 16.3584 8.84523C16.6985 8.87521 17.0562 8.86118 17.3579 8.69638C17.6345 8.54529 17.9513 8.21835 18.1143 7.42891C18.1984 7.02206 18.1528 6.73097 18.0669 6.52401C17.9799 6.31413 17.8378 6.15805 17.6809 6.04621ZM16.5837 5.07824C17.1051 4.86005 17.7504 4.86756 18.2615 5.232C18.5443 5.43362 18.8203 5.73017 18.9907 6.14097C19.1622 6.5547 19.2132 7.05235 19.0937 7.63117C18.8855 8.63918 18.4276 9.25149 17.8373 9.57397C17.2721 9.88275 16.6707 9.87663 16.2706 9.84137C15.7087 9.79184 15.2116 9.46185 14.9373 8.91931C14.6665 8.3838 14.6317 7.68684 14.8662 6.8981C15.1592 5.91277 15.9478 5.34435 16.5837 5.07824Z");
			attr(path4, "d", "M10.2255 15.5337L11.4477 16.756C12.4796 17.7879 14.1526 17.7879 15.1845 16.756C16.2164 15.7241 16.2164 14.051 15.1845 13.0191L10.2255 8.06003L5.26638 13.0191C4.23448 14.051 4.23448 15.7241 5.26638 16.756C6.29828 17.7879 7.97134 17.7879 9.00324 16.756L10.2255 15.5337ZM10.9326 7.35292L15.8916 12.312C17.3141 13.7344 17.3141 16.0406 15.8916 17.4631C14.4692 18.8855 12.163 18.8855 10.7406 17.4631L10.2255 16.948L9.71034 17.4631C8.28792 18.8855 5.9817 18.8855 4.55927 17.4631C3.13685 16.0406 3.13685 13.7344 4.55927 12.312L9.51834 7.35292C9.90887 6.9624 10.542 6.9624 10.9326 7.35292Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (519:0) {#if name == 'pepper' }
function create_if_block_17(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M13.8697 0.56604C13.8697 0.289898 14.0935 0.06604 14.3697 0.06604H16.1634C16.4395 0.06604 16.6634 0.289898 16.6634 0.56604V2.00119C16.8943 2.11287 17.0762 2.2161 17.2364 2.32805C17.4622 2.48585 17.6272 2.64926 17.8098 2.83566C18.3879 3.4258 18.6838 4.0656 18.5812 4.59575C18.5301 4.85963 18.3669 5.11474 18.0821 5.22789C17.9221 8.51167 16.8642 11.1646 15.0245 13.383C13.1049 15.6976 10.3577 17.5112 6.97064 19.0917C5.83897 19.6198 4.66049 19.9164 3.67478 19.9278C2.73561 19.9387 1.7552 19.6826 1.37658 18.8445C1.17446 18.3971 1.11237 17.9655 1.26429 17.5467C1.40694 17.1534 1.71003 16.8573 2.02785 16.6059C2.26091 16.4216 2.54867 16.227 2.85558 16.0194C2.96642 15.9444 3.07977 15.8678 3.19393 15.7893C3.63681 15.4849 4.13145 15.1279 4.65693 14.6701C4.92064 14.4404 5.1939 14.2073 5.47234 13.9698C6.40218 13.1766 7.38971 12.3342 8.27196 11.4037C9.41554 10.1975 10.3247 8.89945 10.6603 7.47273C10.7012 7.29869 10.724 7.08615 10.7475 6.8208C10.7505 6.7866 10.7535 6.75157 10.7566 6.71584C10.7764 6.48649 10.7987 6.22794 10.8381 5.97015C10.8938 5.60546 10.9878 5.20747 11.1798 4.83151C11.1501 4.80403 11.1216 4.77301 11.0947 4.73804C10.8783 4.45736 10.9044 4.09427 10.9762 3.79231C11.0555 3.45849 11.2874 3.18135 11.5216 2.97117C11.7664 2.75155 12.0711 2.55419 12.3884 2.38942C12.8464 2.15153 13.3815 1.95585 13.8697 1.86928V0.56604ZM12.407 4.86811C12.409 4.86725 12.4109 4.86639 12.4129 4.86553C12.5275 4.8153 12.6251 4.76382 12.6749 4.73705C12.7418 4.71705 12.8926 4.7152 13.0953 4.80628C13.3053 4.90068 13.4627 5.0486 13.5278 5.17835C13.8801 5.881 14.5839 6.01378 15.1168 5.94363C15.387 5.90805 15.6472 5.8201 15.8648 5.7034C16.0705 5.59304 16.2919 5.42788 16.421 5.20375C16.4448 5.16235 16.5495 5.06452 16.7333 5.01828C16.8672 4.98459 16.9905 4.99199 17.0898 5.03328C16.9642 8.18191 15.9752 10.67 14.2547 12.7446C12.4678 14.8993 9.86837 16.636 6.54778 18.1856C5.51393 18.668 4.47602 18.9184 3.66318 18.9279C2.80379 18.9378 2.40347 18.6886 2.2879 18.4328C2.15392 18.1362 2.1692 17.9846 2.20436 17.8877C2.24879 17.7652 2.36666 17.613 2.64825 17.3902C2.8499 17.2307 3.09094 17.0677 3.38386 16.8696C3.50082 16.7905 3.62606 16.7057 3.76036 16.6134C4.2184 16.2986 4.74771 15.9173 5.31379 15.4241C5.56162 15.2082 5.82407 14.9844 6.09557 14.7529C7.03158 13.9546 8.07509 13.0647 8.99763 12.0917C10.1906 10.8335 11.2389 9.38021 11.6337 7.70168C11.6933 7.4485 11.7207 7.16834 11.7436 6.90875C11.7469 6.87165 11.7501 6.83481 11.7532 6.79817C11.7733 6.5669 11.7926 6.34398 11.8266 6.12103C11.9027 5.62261 12.0414 5.21135 12.3412 4.90777C12.3619 4.89477 12.3838 4.88149 12.407 4.86811ZM17.5332 4.1359C17.467 3.98775 17.339 3.7841 17.0954 3.53544C16.9171 3.35342 16.8072 3.24815 16.6635 3.14766C16.5173 3.0455 16.3189 2.93675 15.9612 2.77864C15.7802 2.69861 15.6634 2.51929 15.6634 2.32133V1.06604H14.8697V2.32133C14.8697 2.59747 14.6458 2.82133 14.3697 2.82133C13.9943 2.82133 13.3936 2.99416 12.8493 3.27687C12.5835 3.41493 12.3546 3.5673 12.1894 3.71553C12.0695 3.82309 12.0059 3.90791 11.9745 3.96414C12.0669 3.91366 12.1677 3.8644 12.2738 3.81991C12.6862 3.64699 13.1523 3.73558 13.5052 3.89417C13.8667 4.05666 14.2281 4.34391 14.4217 4.73012C14.5095 4.90511 14.6858 4.99174 14.9862 4.95218C15.1326 4.93291 15.2773 4.88373 15.3921 4.82216C15.5023 4.76309 15.5456 4.71437 15.5533 4.70578C15.5544 4.70449 15.5548 4.70411 15.5544 4.70472C15.7497 4.36558 16.1228 4.14073 16.4892 4.04851C16.8054 3.96897 17.1837 3.97088 17.5332 4.1359Z");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (524:0) {#if name == 'perfume' }
function create_if_block_16(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M14.3418 4.01136C13.9848 3.73496 12.6615 3.7584 11.331 3.78196C10.9574 3.78858 10.5832 3.79521 10.2297 3.79521C9.88584 3.79521 9.51668 3.78621 9.14346 3.77711C7.90091 3.74682 6.61334 3.71544 6.06507 4.01135C3.48159 5.40609 1.79797 8.51637 1.79797 11.5832C1.79797 14.7181 3.62382 17.4403 6.30228 18.8076C7.47516 19.4063 8.81154 19.7452 10.2297 19.7452C11.6478 19.7452 12.9842 19.4063 14.1571 18.8076C16.8356 17.4403 18.6614 14.7181 18.6614 11.5832C18.6614 8.51637 16.9253 5.4061 14.3418 4.01136ZM13.7989 4.85466C13.7595 4.84463 13.6961 4.83194 13.6031 4.81974C13.3808 4.79058 13.0786 4.77518 12.7062 4.77044C12.27 4.76489 11.8342 4.77295 11.3816 4.78132C11.0119 4.78816 10.631 4.79521 10.2297 4.79521C9.873 4.79521 9.49181 4.78591 9.12145 4.77687C9.08988 4.7761 9.0584 4.77533 9.02701 4.77457C8.62113 4.76474 8.22906 4.75612 7.86427 4.75895C7.49696 4.7618 7.18238 4.77625 6.93082 4.80758C6.80621 4.82309 6.70953 4.84128 6.63756 4.85985C6.57251 4.87665 6.54392 4.88963 6.54011 4.89136C6.53955 4.89162 6.53962 4.89163 6.54011 4.89136C4.31953 6.09024 2.79797 8.83678 2.79797 11.5832C2.79797 14.3156 4.38864 16.708 6.75693 17.9169C7.7914 18.4449 8.97223 18.7452 10.2297 18.7452C11.4871 18.7452 12.668 18.4449 13.7024 17.9169C16.0707 16.708 17.6614 14.3156 17.6614 11.5832C17.6614 8.84882 16.0972 6.09543 13.8668 4.89131L13.7989 4.85466ZM6.54011 4.89136C6.53955 4.89162 6.53962 4.89163 6.54011 4.89136Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M10.7202 1.18872H9.73911C9.18683 1.18872 8.73911 1.63644 8.73911 2.18872V3.75251H11.7202V2.18872C11.7202 1.63644 11.2725 1.18872 10.7202 1.18872ZM9.73911 0.188721C8.63454 0.188721 7.73911 1.08415 7.73911 2.18872V4.75251H12.7202V2.18872C12.7202 1.08415 11.8248 0.188721 10.7202 0.188721H9.73911Z");
			attr(path1, "fill-rule", "evenodd");
			attr(path2, "d", "M13.4614 8.96045L13.5166 8.96114L13.5717 8.96311L13.6267 8.9662L13.6815 8.97039L13.736 8.97567L13.7904 8.98201L13.8444 8.98939L13.8981 8.99778L13.9514 9.00715L14.0044 9.01746L14.0569 9.02867L14.1091 9.04076L14.1607 9.05367L14.212 9.06738L14.2627 9.08184L14.313 9.097L14.3628 9.11283L14.4122 9.12929L14.461 9.14634L14.5094 9.16393L14.5573 9.18204L14.6048 9.20061L14.6518 9.21959L14.6983 9.23898L14.7444 9.25871L14.7901 9.27876L14.8354 9.29908L14.8802 9.31965L14.9246 9.34041L14.9686 9.36133L15.0123 9.38239L15.0555 9.40353L15.0983 9.42474L15.1408 9.44596L15.1829 9.46718L15.2246 9.48834L15.2651 9.50901L15.3877 9.57183L15.5061 9.63227L15.5075 9.633L15.5448 9.65185L15.5466 9.65275L15.5832 9.67107L15.5854 9.67216L15.6211 9.68993L15.6237 9.6912L15.6587 9.70839L15.6617 9.70983L15.6959 9.72641L15.6993 9.72803L15.7327 9.74399L15.7364 9.74577L15.7711 9.76204L15.8073 9.77873L15.843 9.79484L15.8784 9.81047L15.9132 9.82547L15.9476 9.83991L15.9816 9.85375L16.0151 9.86697L16.0482 9.87957L16.0808 9.89151L16.1129 9.90284L16.1445 9.9135L16.1757 9.92352L16.2064 9.93288L16.2366 9.9416L16.2664 9.94967L16.2957 9.9571L16.3246 9.9639L16.353 9.97008L16.3811 9.97564L16.4087 9.9806L16.436 9.98497L16.463 9.98876L16.4897 9.99198L16.5162 9.99463L16.5424 9.99674L16.5685 9.9983L16.5944 9.99933L16.6203 9.99982L16.6462 9.99979L16.6721 9.99922L16.6981 9.99812L16.7242 9.99648L16.7505 9.99429L16.7769 9.99156L16.8037 9.98826L16.8307 9.98439L16.8581 9.97994L16.8858 9.97489L16.9139 9.96924L16.9424 9.96298L16.9713 9.95609L17.0007 9.94857L17.0305 9.9404L17.0608 9.9316L17.0916 9.92214L17.1228 9.91203L17.1545 9.90127L17.1867 9.88986L17.2194 9.87781L17.2525 9.86514L17.2861 9.85182L17.3201 9.8379L17.3546 9.82339L17.3896 9.80827L17.4249 9.79261L17.4607 9.77639L17.499 9.7587L17.5317 9.74329L17.5354 9.74153L17.5689 9.72548L17.5722 9.72389L17.6066 9.70721L17.6095 9.7058L17.6446 9.68853L17.6471 9.68728L17.683 9.66943L17.6851 9.66837L17.7218 9.64998L17.7235 9.64909L17.7609 9.63017L17.7623 9.62948L17.8005 9.61007L17.841 9.58936L18.4676 10.481L18.4271 10.5017L18.3855 10.5229L18.3842 10.5236L18.3436 10.5441L18.3419 10.5449L18.3013 10.5653L18.2992 10.5663L18.2587 10.5865L18.2562 10.5877L18.2127 10.6091L18.1689 10.6304L18.1247 10.6515L18.08 10.6725L18.035 10.6933L17.9895 10.7139L17.9436 10.7342L17.8972 10.7542L17.8504 10.7739L17.8032 10.7932L17.7555 10.8121L17.7073 10.8305L17.6587 10.8483L17.6096 10.8657L17.56 10.8825L17.5099 10.8986L17.4594 10.9141L17.4084 10.9288L17.3569 10.9428L17.305 10.956L17.2526 10.9684L17.1998 10.9799L17.1467 10.9904L17.0931 11.0001L17.0392 11.0087L16.985 11.0163L16.9306 11.0229L16.8759 11.0284L16.821 11.0328L16.766 11.0362L16.7108 11.0383L16.6556 11.0394L16.6004 11.0393L16.5453 11.0381L16.4902 11.0358L16.4353 11.0324L16.3806 11.0278L16.3261 11.0222L16.2718 11.0155L16.2179 11.0078L16.1643 10.9991L16.1111 10.9895L16.0583 10.9789L16.0058 10.9674L15.9538 10.955L15.9023 10.9418L15.8512 10.9279L15.8006 10.9132L15.7505 10.8978L15.7008 10.8818L15.6517 10.8651L15.6029 10.8479L15.5547 10.8301L15.5069 10.8119L15.4596 10.7932L15.4128 10.7741L15.3664 10.7546L15.3204 10.7347L15.2748 10.7146L15.2297 10.6942L15.185 10.6735L15.1408 10.6527L15.0969 10.6318L15.0534 10.6107L15.0128 10.5908L15.0103 10.5895L14.9697 10.5694L14.9676 10.5683L14.927 10.548L14.9252 10.5471L14.8847 10.5266L14.8833 10.5259L14.8427 10.5053L14.7599 10.4629L14.7191 10.442L14.5999 10.381L14.561 10.3612L14.5594 10.3605L14.5223 10.3418L14.5204 10.3408L14.4841 10.3227L14.4818 10.3215L14.4463 10.3039L14.4436 10.3026L14.4088 10.2856L14.4057 10.2841L14.3718 10.2677L14.3683 10.2661L14.3351 10.2503L14.3312 10.2485L14.2968 10.2324L14.2608 10.2159L14.2251 10.1999L14.19 10.1845L14.1552 10.1696L14.1209 10.1554L14.0871 10.1418L14.0537 10.1287L14.0208 10.1164L13.9884 10.1046L13.9564 10.0935L13.9249 10.083L13.8939 10.0732L13.8634 10.0641L13.8333 10.0555L13.8037 10.0477L13.7745 10.0404L13.7458 10.0338L13.7174 10.0279L13.6895 10.0225L13.662 10.0177L13.6348 10.0135L13.6079 10.0099L13.5813 10.0069L13.5549 10.0044L13.5287 10.0025L13.5027 10.0011L13.4767 10.0002L13.4509 9.99992L13.425 10.0001L13.3991 10.0009L13.3731 10.0021L13.3469 10.0039L13.3206 10.0063L13.294 10.0092L13.2672 10.0127L13.2401 10.0168L13.2126 10.0214L13.1848 10.0266L13.1565 10.0325L13.1279 10.0389L13.0988 10.046L13.0693 10.0537L13.0393 10.0621L13.0089 10.0711L12.978 10.0808L12.9466 10.0911L12.9147 10.1021L12.8824 10.1137L12.8496 10.1259L12.8163 10.1388L12.7826 10.1523L12.7484 10.1664L12.7137 10.1812L12.6787 10.1964L12.6432 10.2123L12.6073 10.2287L12.5729 10.2446L12.5689 10.2465L12.5359 10.2621L12.5324 10.2638L12.4986 10.2801L12.4954 10.2816L12.4608 10.2985L12.458 10.2998L12.4227 10.3173L12.4203 10.3185L12.3841 10.3365L12.3821 10.3375L12.3452 10.3561L12.3436 10.3569L12.306 10.376L12.3047 10.3766L12.2663 10.3962L12.1046 10.479L12.0635 10.5001L12.022 10.5212L12.0206 10.5219L11.9801 10.5424L11.9784 10.5432L11.9357 10.5646L11.8927 10.586L11.8493 10.6074L11.8055 10.6287L11.7613 10.6498L11.7167 10.6709L11.6717 10.6917L11.6262 10.7123L11.5804 10.7326L11.5341 10.7527L11.4873 10.7724L11.4401 10.7917L11.3924 10.8106L11.3443 10.829L11.2957 10.8469L11.2466 10.8643L11.197 10.8811L11.147 10.8973L11.0965 10.9128L11.0455 10.9277L10.9941 10.9417L10.9422 10.955L10.8899 10.9674L10.8372 10.979L10.784 10.9896L10.7305 10.9993L10.6767 11.008L10.6225 11.0158L10.568 11.0224L10.5134 11.028L10.4585 11.0325L10.4035 11.0359L10.3483 11.0382L10.2931 11.0394L10.2379 11.0394L10.1828 11.0383L10.1277 11.036L10.0728 11.0327L10.018 11.0282L9.9635 11.0227L9.90925 11.0161L9.85529 11.0085L9.80167 10.9999L9.74842 10.9903L9.69556 10.9797L9.64311 10.9683L9.59109 10.956L9.53953 10.9429L9.48841 10.929L9.43777 10.9144L9.3876 10.8991L9.3379 10.8831L9.28868 10.8665L9.23993 10.8493L9.19165 10.8316L9.14385 10.8134L9.0965 10.7947L9.0496 10.7756L9.00315 10.7561L8.95715 10.7363L8.91158 10.7162L8.86643 10.6958L8.8217 10.6752L8.77737 10.6544L8.73346 10.6334L8.68993 10.6124L8.6468 10.5912L8.60406 10.57L8.56353 10.5497L8.56169 10.5487L8.52116 10.5283L8.51971 10.5275L8.47809 10.5064L8.23618 10.3826L8.19717 10.3628L8.19565 10.362L8.15852 10.3433L8.15663 10.3424L8.12027 10.3242L8.11799 10.323L8.0824 10.3054L8.07974 10.3041L8.04338 10.2863L8.00611 10.2683L7.96921 10.2508L7.93276 10.2337L7.89668 10.2172L7.86107 10.2012L7.82586 10.1857L7.79108 10.1708L7.75676 10.1565L7.72287 10.1428L7.68948 10.1298L7.65653 10.1173L7.62405 10.1055L7.59204 10.0943L7.56052 10.0838L7.52946 10.074L7.49888 10.0648L7.46877 10.0562L7.43912 10.0483L7.40991 10.041L7.38115 10.0344L7.3528 10.0283L7.32485 10.0229L7.29728 10.0181L7.27006 10.0139L7.24314 10.0102L7.21651 10.0071L7.19011 10.0046L7.16391 10.0026L7.13786 10.0012L7.11192 10.0003L7.08603 9.99992L7.06016 10.0001L7.03424 10.0008L7.00824 10.002L6.98211 10.0038L6.95579 10.0061L6.92925 10.009L6.90244 10.0124L6.87534 10.0164L6.8479 10.021L6.8201 10.0262L6.79191 10.032L6.76331 10.0384L6.73427 10.0454L6.7048 10.0531L6.67486 10.0614L6.64446 10.0704L6.61358 10.08L6.58223 10.0903L6.55041 10.1012L6.51811 10.1127L6.48534 10.1249L6.4521 10.1378L6.4184 10.1512L6.38425 10.1653L6.34966 10.18L6.31461 10.1952L6.27914 10.211L6.24325 10.2274L6.20693 10.2442L6.17021 10.2616L6.13309 10.2794L6.09555 10.2977L6.05762 10.3164L6.01933 10.3355L5.98147 10.3545L5.97981 10.3553L5.94221 10.3744L5.94094 10.375L5.6584 10.5195L5.65709 10.5202L5.61487 10.5415L5.57226 10.5629L5.52928 10.5843L5.48591 10.6057L5.44214 10.627L5.39797 10.6482L5.3534 10.6692L5.30841 10.69L5.263 10.7107L5.21716 10.731L5.17088 10.7511L5.12415 10.7708L5.07698 10.7902L5.02935 10.8091L4.98125 10.8276L4.93268 10.8455L4.88364 10.863L4.83412 10.8798L4.78413 10.8961L4.73367 10.9116L4.68273 10.9265L4.63134 10.9406L4.57949 10.954L4.52721 10.9665L4.4745 10.9781L4.42139 10.9888L4.36791 10.9986L4.31408 11.0074L4.25993 11.0152L4.20551 11.0219L4.15084 11.0276L4.09597 11.0322L4.04095 11.0357L3.98583 11.0381L3.93064 11.0393L3.87544 11.0394L3.82028 11.0384L3.7652 11.0363L3.71026 11.033L3.65549 11.0286L3.60095 11.0232L3.54667 11.0167L3.49269 11.0091L3.43904 11.0006L3.38576 10.9911L3.33287 10.9806L3.28039 10.9692L3.22833 10.957L3.17673 10.944L3.12558 10.9302L3.0749 10.9156L3.02469 10.9003L2.97496 10.8844L2.9257 10.8678L2.87691 10.8507L2.8286 10.833L2.78075 10.8148L2.73337 10.7962L2.68644 10.7771L2.63995 10.7577L2.59391 10.7379L2.54831 10.7178L2.50312 10.6974L2.45836 10.6768L2.414 10.6561L2.37005 10.6351L2.3265 10.614L2.28334 10.5929L2.24056 10.5717L2.19817 10.5504L2.15615 10.5292L2.11451 10.5081L2.07397 10.4874L1.9918 10.4453L2.6201 9.55449L2.70043 9.59565L2.74004 9.61587L2.77927 9.63579L2.81812 9.6554L2.85661 9.67466L2.8947 9.69354L2.93241 9.71202L2.96972 9.73006L3.00663 9.74764L3.04314 9.76474L3.07923 9.78132L3.1149 9.79738L3.15014 9.81288L3.18494 9.82781L3.2193 9.84216L3.25321 9.85589L3.28666 9.86902L3.31964 9.88151L3.35216 9.89336L3.3842 9.90458L3.41577 9.91514L3.44686 9.92505L3.47748 9.93432L3.50763 9.94293L3.53732 9.9509L3.56656 9.95823L3.59536 9.96493L3.62374 9.97101L3.65172 9.97647L3.67931 9.98134L3.70657 9.98561L3.73351 9.98931L3.76016 9.99244L3.78658 9.99501L3.81279 9.99703L3.83885 9.9985L3.8648 9.99944L3.89069 9.99985L3.91656 9.99973L3.94247 9.99908L3.96846 9.99789L3.99459 9.99616L4.02089 9.99389L4.04741 9.99107L4.07419 9.98768L4.10127 9.98372L4.12868 9.97917L4.15645 9.97403L4.18461 9.96829L4.21318 9.96192L4.24218 9.95494L4.27162 9.94731L4.30152 9.93905L4.33189 9.93013L4.36273 9.92057L4.39404 9.91036L4.42582 9.8995L4.45808 9.88799L4.49082 9.87584L4.52402 9.86306L4.55768 9.84965L4.59179 9.83563L4.62636 9.82101L4.66137 9.80582L4.69679 9.79006L4.73267 9.77376L4.76895 9.75693L4.80563 9.73962L4.84272 9.72182L4.88024 9.70356L4.91812 9.6849L4.9564 9.66584L4.9942 9.64684L4.99589 9.64599L5.03343 9.62699L5.03474 9.62633L5.27562 9.50309L5.31835 9.48133L5.36054 9.45996L5.40311 9.43856L5.44606 9.41716L5.4894 9.39579L5.53314 9.37449L5.57728 9.3533L5.62182 9.33226L5.66677 9.3114L5.71215 9.29076L5.75796 9.27038L5.8042 9.25029L5.85089 9.23054L5.89803 9.21116L5.94563 9.19219L5.99369 9.17368L6.04221 9.15566L6.09122 9.13818L6.1407 9.12128L6.19065 9.10499L6.24108 9.08937L6.29197 9.07444L6.34333 9.06026L6.39515 9.04687L6.4474 9.0343L6.50007 9.0226L6.55315 9.0118L6.6066 9.00194L6.6604 8.99306L6.71453 8.98519L6.76893 8.97835L6.82358 8.97258L6.87843 8.9679L6.93344 8.96432L6.98856 8.96186L7.04375 8.96053L7.09895 8.96033L7.15411 8.96126L7.2092 8.96332L7.26416 8.96649L7.31893 8.97077L7.3735 8.97614L7.4278 8.98256L7.4818 8.99002L7.53548 8.99849L7.58879 9.00793L7.64172 9.01832L7.69423 9.0296L7.74632 9.04176L7.79796 9.05474L7.84914 9.0685L7.89986 9.08302L7.95011 9.09824L7.99988 9.11412L8.04918 9.13063L8.098 9.14772L8.14635 9.16536L8.19424 9.1835L8.24166 9.2021L8.28862 9.22113L8.33514 9.24054L8.38122 9.2603L8.42686 9.28037L8.47208 9.30071L8.51688 9.32129L8.56126 9.34207L8.60525 9.36301L8.64883 9.38407L8.69202 9.40522L8.73483 9.42643L8.77725 9.44765L8.8193 9.46886L8.86097 9.49002L9.10323 9.61399L9.14231 9.63385L9.14377 9.63458L9.18101 9.65339L9.18285 9.65431L9.21933 9.67259L9.22154 9.67369L9.25727 9.69142L9.25986 9.6927L9.2963 9.71056L9.33362 9.72863L9.37057 9.74625L9.40713 9.7634L9.44326 9.78002L9.47897 9.79612L9.51423 9.81167L9.54907 9.82665L9.58346 9.84103L9.61741 9.85482L9.6509 9.868L9.68392 9.88054L9.71647 9.89244L9.74855 9.90371L9.78015 9.91432L9.81129 9.92429L9.84194 9.9336L9.87214 9.94227L9.90185 9.95029L9.93114 9.95767L9.95997 9.96442L9.98838 9.97055L10.0164 9.97606L10.044 9.98097L10.0713 9.98529L10.0983 9.98904L10.1249 9.99221L10.1514 9.99482L10.1776 9.99689L10.2037 9.99841L10.2296 9.99939L10.2555 9.99984L10.2814 9.99976L10.3073 9.99915L10.3333 9.998L10.3594 9.99632L10.3857 9.99409L10.4122 9.99131L10.4389 9.98797L10.466 9.98406L10.4934 9.97956L10.5211 9.97447L10.5492 9.96877L10.5778 9.96245L10.6067 9.95552L10.6361 9.94794L10.666 9.93973L10.6963 9.93087L10.7271 9.92136L10.7584 9.91119L10.7902 9.90038L10.8224 9.88893L10.8551 9.87683L10.8882 9.86409L10.9219 9.85074L10.9559 9.83677L10.9905 9.8222L11.0254 9.80706L11.0609 9.79133L11.0967 9.77507L11.1329 9.75829L11.1696 9.74101L11.2066 9.72325L11.2427 9.70574L11.2807 9.68702L11.2832 9.68579L11.3192 9.6679L11.3213 9.66685L11.358 9.64841L11.3597 9.64754L11.3972 9.62859L11.3985 9.6279L11.6806 9.48366L11.6819 9.48303L11.724 9.46166L11.7666 9.44026L11.8095 9.41886L11.8528 9.39749L11.8965 9.37618L11.9406 9.35499L11.9851 9.33393L12.0301 9.31306L12.0754 9.29239L12.1212 9.27199L12.1674 9.25188L12.214 9.2321L12.2611 9.21269L12.3087 9.19369L12.3567 9.17514L12.4052 9.15708L12.4542 9.13955L12.5036 9.1226L12.5535 9.10626L12.6039 9.09058L12.6548 9.0756L12.7061 9.06136L12.7579 9.0479L12.8101 9.03527L12.8627 9.0235L12.9158 9.01262L12.9692 9.00269L13.023 8.99373L13.0771 8.98578L13.1315 8.97886L13.1861 8.973L13.2409 8.96823L13.2959 8.96457L13.3511 8.96202L13.4062 8.96059L13.4614 8.96045Z");
			attr(path3, "d", "M10.2005 3.75842C10.4767 3.75842 10.7005 3.98228 10.7005 4.25842V14.4612C10.7005 14.7374 10.4767 14.9612 10.2005 14.9612C9.92437 14.9612 9.70052 14.7374 9.70052 14.4612L9.70052 4.25842C9.70052 3.98228 9.92437 3.75842 10.2005 3.75842Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (532:0) {#if name == 'plane' }
function create_if_block_15(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M16.4116 2.07871C16.3845 2.09721 16.3574 2.11565 16.3303 2.13411C16.1517 2.25559 15.9719 2.37791 15.7837 2.52296L15.7773 2.52789C14.8355 3.23007 13.6039 4.27066 12.2818 5.4955C12.1614 5.60703 11.994 5.65239 11.8338 5.61687L3.68598 3.81033C3.60396 3.80009 3.57101 3.79608 3.53891 3.79608C3.32198 3.79608 3.11893 3.92321 3.0302 4.12886C2.92673 4.39247 3.02138 4.67552 3.23628 4.81149L3.24111 4.81454L8.61434 8.30083C8.741 8.38301 8.82374 8.51802 8.83947 8.66819C8.8552 8.81836 8.80223 8.96759 8.69534 9.07423L8.66991 9.09961C7.38122 10.4798 6.31043 11.7361 5.58838 12.7137C5.47003 12.8747 5.36378 13.0195 5.27879 13.1514C5.16553 13.3272 4.95486 13.4139 4.75068 13.3689L2.19767 12.8052C2.11507 12.7948 2.08257 12.7908 2.05053 12.7908C1.83353 12.7908 1.6304 12.918 1.54169 13.1236C1.44423 13.3719 1.52255 13.6375 1.71155 13.7811L4.70992 14.8869C4.84334 14.9361 4.9495 15.0398 5.00183 15.172L6.23217 18.2805C6.33749 18.4229 6.50021 18.5 6.6743 18.5C6.68974 18.5 6.70318 18.4991 6.71409 18.4977C6.75433 18.4624 6.80008 18.4337 6.84965 18.4128C7.09772 18.3083 7.23368 18.0443 7.17792 17.7789L7.17755 17.7772L6.60833 15.2112C6.56292 15.0066 6.65004 14.7953 6.82652 14.6821C6.90797 14.6299 6.97089 14.584 7.04582 14.5293C7.10751 14.4844 7.17733 14.4334 7.27233 14.3682C8.25973 13.6492 9.5053 12.5837 10.8878 11.2987L10.9132 11.2733C11.0198 11.1669 11.1687 11.1143 11.3185 11.13C11.4683 11.1457 11.603 11.2281 11.6853 11.3542L15.1827 16.7203C15.2864 16.8837 15.4603 16.9728 15.6474 16.9728C15.7137 16.9728 15.7958 16.9563 15.866 16.9273C16.1134 16.8225 16.2489 16.5588 16.1933 16.294L14.3782 8.1444C14.3425 7.9844 14.3876 7.8171 14.4987 7.69663C15.7202 6.37288 16.7705 5.15757 17.4604 4.21249L17.4689 4.20111C17.614 4.01381 17.7363 3.83484 17.8578 3.65697C17.8763 3.6299 17.8948 3.60285 17.9133 3.5758C18.0978 3.29428 18.3328 2.929 18.4428 2.55475C18.5482 2.19592 18.5158 1.92451 18.2922 1.70148C18.1713 1.58082 17.9849 1.5 17.7692 1.5C17.4882 1.5 17.1061 1.62056 16.4116 2.07871ZM11.1716 12.3976C9.92929 13.5361 8.79171 14.4994 7.85517 15.1808L7.84395 15.1889C7.79752 15.2208 7.73884 15.2628 7.67606 15.308C7.66979 15.3125 7.66348 15.3171 7.65713 15.3216L8.15558 17.5686C8.30356 18.2625 7.96934 18.9767 7.32384 19.2951C7.10254 19.4742 6.82781 19.5 6.6743 19.5C6.16465 19.5 5.66279 19.2521 5.36533 18.7835C5.34846 18.7569 5.33414 18.7288 5.32255 18.6996L4.15425 15.7478L1.30743 14.6979C1.27444 14.6858 1.24282 14.6701 1.2131 14.6513C0.56351 14.2403 0.341328 13.4303 0.615189 12.7472L0.618547 12.7388C0.868584 12.1463 1.44556 11.7908 2.05053 11.7908C2.15024 11.7908 2.24946 11.8035 2.31873 11.8124C2.32791 11.8136 2.33656 11.8147 2.34462 11.8157C2.36005 11.8177 2.37537 11.8203 2.39055 11.8237L4.63775 12.3198C4.68444 12.255 4.73137 12.1912 4.77648 12.1298L4.78291 12.1211L4.78359 12.1202C5.46491 11.1976 6.42874 10.0567 7.57005 8.81531L2.69897 5.65488C2.05143 5.24337 1.8302 4.43467 2.1037 3.75248L2.10706 3.74411C2.35707 3.15168 2.93387 2.79608 3.53891 2.79608C3.63888 2.79608 3.73821 2.8088 3.80785 2.81773C3.81678 2.81887 3.82523 2.81996 3.83313 2.82094C3.8487 2.82288 3.86417 2.82556 3.87949 2.82895L11.795 4.58399C13.0596 3.4216 14.2446 2.42349 15.1764 1.72853C15.3888 1.56496 15.5937 1.42564 15.7706 1.30538C15.7981 1.28666 15.8249 1.26841 15.851 1.2506L15.8574 1.24625C16.5966 0.758201 17.1851 0.5 17.7692 0.5C18.2292 0.5 18.6761 0.671867 18.9985 0.99357C19.5773 1.57101 19.566 2.27912 19.4022 2.83663C19.2467 3.36596 18.9337 3.8433 18.7575 4.11215L18.7411 4.13711C18.7231 4.16341 18.7045 4.19042 18.6855 4.21819C18.5656 4.39374 18.4268 4.59704 18.2639 4.80777C17.5744 5.7516 16.563 6.92641 15.411 8.182L17.1709 16.0836C17.3254 16.8078 16.9545 17.5539 16.2531 17.8493L16.2509 17.8503C16.0679 17.9263 15.8552 17.9728 15.6474 17.9728C15.1387 17.9728 14.6379 17.7259 14.3402 17.2591L11.1716 12.3976Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (537:0) {#if name == 'plant' }
function create_if_block_14(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M15.9633 5.16568C16.1818 5.33464 16.2219 5.64867 16.0529 5.86709L11.2315 12.1C10.7573 12.7132 10.5 13.4664 10.5 14.2415L10.5 17.728C10.5 18.0041 10.2761 18.228 9.99998 18.228C9.72384 18.228 9.49998 18.0041 9.49998 17.728L9.49997 14.2415C9.49997 13.2449 9.8308 12.2765 10.4406 11.4882L15.2619 5.25525C15.4309 5.03683 15.7449 4.99673 15.9633 5.16568Z");
			attr(path1, "d", "M4.13656 9.11047C3.94637 9.31067 3.95448 9.62715 4.15469 9.81735L8.41061 13.8605C9.10616 14.5213 9.49997 15.4386 9.49997 16.398V19.5C9.49997 19.7761 9.72383 20 9.99997 20C10.2761 20 10.5 19.7761 10.5 19.5V16.398C10.5 15.1645 9.99364 13.9851 9.09936 13.1355L4.84344 9.09235C4.64324 8.90216 4.32676 8.91027 4.13656 9.11047Z");
			attr(path2, "d", "M18.3779 1.53927C18.4327 2.29021 18.4725 3.32703 18.4047 4.40738C18.3125 5.87411 18.0299 7.25745 17.4545 8.14562C16.7167 9.28439 15.6883 9.90008 14.7112 10.1459C13.6919 10.4023 12.8474 10.2333 12.4595 9.98203C11.6151 9.43502 10.6657 7.26257 12.1639 4.95007C12.7171 4.09609 13.9498 3.29603 15.4075 2.63437C16.4929 2.1417 17.5917 1.77412 18.3779 1.53927ZM18.7295 0.399095C19.0125 0.322287 19.2884 0.513872 19.3179 0.805582C19.4683 2.2906 19.735 6.46465 18.2937 8.68934C16.5205 11.4265 13.2903 11.7118 11.9158 10.8213C10.5413 9.93084 9.57124 7.11282 11.3246 4.40636C12.7665 2.18066 17.2 0.814295 18.7295 0.399095Z");
			attr(path2, "fill-rule", "evenodd");
			attr(path3, "d", "M1.16197 6.23639C1.24915 6.80305 1.38541 7.51404 1.5922 8.22877C1.89834 9.28691 2.31835 10.2055 2.84189 10.729C3.54804 11.4352 4.37904 11.7175 5.11404 11.7439C5.89258 11.7719 6.44282 11.5154 6.64245 11.3158C7.09947 10.8588 7.49486 9.18578 6.0474 7.73833C5.55144 7.24237 4.58274 6.85006 3.40831 6.58298C2.60103 6.3994 1.79173 6.29511 1.16197 6.23639ZM0.569611 5.18777C0.276949 5.16998 0.0467941 5.41364 0.080866 5.70486C0.226586 6.95034 0.719124 10.0205 2.13478 11.4362C3.93434 13.2357 6.44588 12.9266 7.34955 12.0229C8.25323 11.1193 8.53389 8.8106 6.75451 7.03122C5.33581 5.61253 1.90298 5.26882 0.569611 5.18777Z");
			attr(path3, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (545:0) {#if name == 'price_tag' }
function create_if_block_13(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M1.16154 11.8423L8.09186 18.829C8.28991 19.0287 8.61108 19.0284 8.80882 18.8285L18.839 8.68572C18.9337 8.58998 18.9868 8.46032 18.9868 8.32514V1.53212C18.9868 1.25006 18.76 1.02141 18.4802 1.02141L11.387 1.02147C11.2527 1.02147 11.1238 1.07529 11.0288 1.17108L1.16151 11.1201C0.963704 11.3195 0.963715 11.6428 1.16154 11.8423ZM20 1.53212C20 0.685947 19.3196 -6.58649e-06 18.4802 0L11.387 5.82026e-05C10.9839 6.15389e-05 10.5973 0.161509 10.3123 0.448879L0.445049 10.3979C-0.148378 10.9962 -0.148346 11.9662 0.445123 12.5645L7.37544 19.5513C7.96958 20.1502 8.9331 20.1495 9.52633 19.5496L19.5565 9.40686C19.8405 9.11967 20 8.73068 20 8.32514V1.53212Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M15.9028 8.22958C14.7801 9.36148 12.9597 9.36148 11.837 8.22958C10.7142 7.09769 10.7142 5.26253 11.837 4.13064C12.9597 2.99875 14.7801 2.99875 15.9028 4.13064C17.0256 5.26253 17.0256 7.09769 15.9028 8.22958ZM12.5534 7.50734C13.2805 8.24034 14.4593 8.24034 15.1864 7.50734C15.9135 6.77433 15.9135 5.58589 15.1864 4.85289C14.4593 4.11988 13.2805 4.11988 12.5534 4.85289C11.8263 5.58589 11.8263 6.77433 12.5534 7.50734Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (551:0) {#if name == 'question_mark' }
function create_if_block_12(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M9.56285 11.959C9.36021 11.959 9.19593 11.7947 9.19593 11.5921V11.4654C9.19266 10.9745 9.27959 10.5556 9.51194 10.162C9.73885 9.77751 10.0875 9.44653 10.5519 9.09905C10.9668 8.78804 11.2183 8.53255 11.3688 8.28844C11.5132 8.05415 11.577 7.80994 11.577 7.49433V7.48101C11.577 6.58737 10.9199 5.94963 10.0093 5.94963C9.14693 5.94963 8.48176 6.556 8.39691 7.55858C8.38999 7.64041 8.35581 7.71754 8.29986 7.77765L8.29366 7.78431C8.22548 7.85755 8.13034 7.89977 8.03028 7.90119L7.55903 7.90785C7.43278 7.90963 7.31449 7.84638 7.24586 7.7404C7.19061 7.65507 7.1738 7.55171 7.19715 7.45492C7.30916 5.93601 8.41577 4.74287 10.0217 4.74287C11.6246 4.74287 12.8131 5.91906 12.8131 7.46103V7.47435C12.8131 7.98614 12.6995 8.4388 12.4473 8.86135C12.199 9.27731 11.8283 9.64397 11.3455 10.0059L11.3431 10.0077C10.929 10.313 10.7058 10.5344 10.5791 10.746C10.4596 10.9455 10.4072 11.1677 10.4072 11.5174V11.5921C10.4072 11.7947 10.2429 11.959 10.0403 11.959H9.56285ZM10.7049 14.3815C10.7049 14.8554 10.3695 15.2613 9.86668 15.2613C9.36996 15.2613 9.02231 14.862 9.02231 14.3815C9.02231 13.9045 9.37305 13.5084 9.86668 13.5084C10.3665 13.5084 10.7049 13.911 10.7049 14.3815Z");
			attr(path1, "d", "M18.5 10C18.5 14.6944 14.6944 18.5 10 18.5C5.30558 18.5 1.5 14.6944 1.5 10C1.5 5.30558 5.30558 1.5 10 1.5C14.6944 1.5 18.5 5.30558 18.5 10ZM10 17.4967C14.1403 17.4967 17.4967 14.1403 17.4967 10C17.4967 5.85971 14.1403 2.50335 10 2.50335C5.85971 2.50335 2.50335 5.85971 2.50335 10C2.50335 14.1403 5.85971 17.4967 10 17.4967Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (557:0) {#if name == 'recycle' }
function create_if_block_11(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M10.7058 0.549946C11.0066 0.550342 11.3069 0.550737 11.5727 0.54775C12.6717 0.535401 13.4169 1.32825 13.7106 1.83393L15.3904 4.63773L16.1669 4.22927C16.3476 4.13421 16.5679 4.15856 16.7235 4.29078C16.879 4.42299 16.9386 4.63651 16.8739 4.83016L15.5307 8.85205C15.45 9.09376 15.2004 9.23609 14.9512 9.18246L10.5904 8.24369C10.3905 8.20066 10.2369 8.04021 10.2027 7.8386C10.1684 7.63698 10.2604 7.43484 10.4349 7.32822L11.3466 6.77121L10.491 5.35356L9.16947 7.63949C9.0331 7.87537 8.73297 7.95865 8.49456 7.82675L5.46517 6.15084C5.34568 6.08474 5.25843 5.97265 5.22367 5.8406C5.18892 5.70854 5.20968 5.56802 5.28114 5.45166C5.75753 4.67599 6.64634 3.14684 7.2264 2.14351C7.52092 1.63407 7.80943 1.26638 8.12347 1.01328C8.44922 0.750745 8.77858 0.630664 9.11576 0.579998C9.12637 0.578405 9.13702 0.577153 9.14771 0.576245C9.4761 0.548329 10.0919 0.549139 10.7058 0.549946ZM10.925 4.13746L12.4598 6.68024C12.6019 6.91575 12.5271 7.22186 12.2924 7.36528L12.0238 7.52936L14.724 8.11064L15.5313 5.69358L15.4374 5.74295C15.2026 5.8665 14.9121 5.78506 14.7757 5.55742L12.8469 2.33802C12.6459 1.99038 12.1756 1.54104 11.584 1.54769C11.2714 1.5512 10.9415 1.55066 10.6262 1.55014C10.059 1.54921 9.53863 1.54836 9.24893 1.5713C9.06973 1.60012 8.91602 1.65888 8.75098 1.79189C8.72575 1.81222 8.69986 1.83462 8.67329 1.85932C9.41082 2.17381 10.3422 2.86027 10.925 4.13746ZM8.06135 2.69724C7.58009 3.52944 6.89514 4.70818 6.40422 5.52752L8.5493 6.71421L9.91606 4.35001C9.36655 3.30179 8.53989 2.84656 8.06135 2.69724Z");
			attr(path1, "d", "M18.8984 16.3552C18.7447 16.6138 18.5913 16.872 18.4584 17.1022C17.909 18.0541 16.847 18.2912 16.2622 18.2861L12.9938 18.3026L12.9496 19.1788C12.9393 19.3827 12.806 19.5598 12.613 19.6263C12.4199 19.6928 12.2059 19.6352 12.0722 19.4809L9.29638 16.2755C9.12955 16.0828 9.1343 15.7955 9.30742 15.6085L12.3375 12.3349C12.4764 12.1848 12.6927 12.1345 12.8837 12.2078C13.0746 12.2811 13.2016 12.4632 13.2044 12.6677L13.219 13.736L14.8748 13.7223L13.5815 11.4203C13.4481 11.1827 13.5294 10.8821 13.7644 10.7442L16.7502 8.99179C16.8679 8.92267 17.0089 8.90473 17.1402 8.94212C17.2715 8.97951 17.3818 9.06899 17.4455 9.18978C17.8701 9.99496 18.7328 11.539 19.3005 12.5494C19.5887 13.0624 19.758 13.498 19.8157 13.8972C19.8756 14.3113 19.8111 14.6559 19.6828 14.9718C19.6788 14.9817 19.6745 14.9916 19.6698 15.0012C19.5264 15.298 19.2119 15.8274 18.8984 16.3552ZM15.7 14.7155L12.73 14.7401C12.455 14.7424 12.2297 14.522 12.2259 14.247L12.2216 13.9323L10.3454 15.9593L12.0136 17.8856L12.019 17.7797C12.0324 17.5147 12.2505 17.3063 12.5158 17.3049L16.2688 17.2861C16.6703 17.2904 17.2966 17.1147 17.5924 16.6023C17.7487 16.3315 17.9172 16.048 18.0784 15.7769C18.3682 15.2895 18.6342 14.8421 18.7621 14.5812C18.8286 14.4123 18.8564 14.2501 18.826 14.0403C18.8214 14.0083 18.8153 13.9746 18.8076 13.9391C18.1612 14.4134 17.0959 14.8649 15.7 14.7155ZM18.3985 12.9856C17.9278 12.1474 17.2627 10.9574 16.8079 10.1174L14.6937 11.3582L16.0313 13.7391C17.2132 13.8005 18.0262 13.3212 18.3985 12.9856Z");
			attr(path2, "d", "M1.15621 15.7354C1.00906 15.473 0.862139 15.2111 0.729208 14.9809C0.179617 14.0291 0.505229 12.9909 0.801973 12.487L2.42199 9.6482L1.68529 9.17176C1.51385 9.06089 1.42705 8.85692 1.466 8.65651C1.50496 8.4561 1.66185 8.2995 1.86233 8.26092L6.0262 7.45965C6.27645 7.4115 6.52288 7.55926 6.59829 7.80269L7.91826 12.0636C7.97877 12.259 7.91423 12.4715 7.7553 12.6002C7.59636 12.7289 7.37508 12.7478 7.1966 12.648L6.26413 12.1265L5.4481 13.5673L8.08835 13.5983C8.3608 13.6015 8.58054 13.8222 8.58248 14.0947L8.60717 17.5567C8.60815 17.6932 8.55323 17.8242 8.45518 17.9193C8.35714 18.0143 8.22448 18.0651 8.08803 18.0599C7.17842 18.025 5.4099 18.0001 4.25104 17.9865C3.66263 17.9796 3.20071 17.9084 2.82615 17.7588C2.43762 17.6036 2.17147 17.3755 1.96199 17.1064C1.9554 17.098 1.94909 17.0893 1.94306 17.0804C1.75771 16.8079 1.45648 16.2708 1.15621 15.7354ZM4.1754 13.7853L5.63906 11.201C5.77463 10.9616 6.07809 10.8767 6.31818 11.011L6.59287 11.1646L5.77555 8.52624L3.27316 9.00778L3.36221 9.06537C3.58504 9.20948 3.65648 9.50256 3.52495 9.73304L1.66481 12.9926C1.46034 13.3382 1.29934 13.9685 1.59519 14.4808C1.75154 14.7515 1.91278 15.0392 2.06695 15.3144C2.34421 15.8091 2.59863 16.2631 2.76066 16.5043C2.87365 16.6464 3.00022 16.7515 3.19707 16.8302C3.22716 16.8422 3.25937 16.8538 3.29393 16.8648C3.20641 16.0678 3.34805 14.9195 4.1754 13.7853ZM4.32426 16.9873C5.28553 16.9987 6.6487 17.0177 7.60349 17.0439L7.586 14.5925L4.85535 14.5605C4.2112 15.5533 4.21977 16.497 4.32426 16.9873Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (564:0) {#if name == 'return' }
function create_if_block_10(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M11.571 1.05882C11.571 0.750194 11.8198 0.5 12.1266 0.5H13.4572C17.0692 0.5 20 3.45304 20 7.08924C20 10.7255 17.0692 13.6785 13.4572 13.6785L1.89992 13.7105L1.30855 13.1197L1.89992 12.5484L13.4572 12.5608C16.4541 12.5608 18.8889 10.1096 18.8889 7.08924C18.8889 4.06891 16.4541 1.61765 13.4572 1.61765H12.1266C11.8198 1.61765 11.571 1.36745 11.571 1.05882Z");
			attr(path1, "d", "M6.00311 7.00677C6.22317 6.7917 6.57489 6.79679 6.78871 7.01815C7.00252 7.2395 6.99746 7.59329 6.7774 7.80836L6.00311 7.00677ZM1.30855 13.1197L6.73968 18.5463C6.9565 18.7647 6.95627 19.1185 6.73917 19.3366C6.52207 19.5547 6.17031 19.5544 5.9535 19.3361L0.162462 13.5034C0.0572388 13.3974 -0.00128425 13.2533 2.13868e-05 13.1036C0.00132703 12.9538 0.0623521 12.8108 0.169407 12.7067C0.3269 12.5535 1.78474 11.1291 3.20439 9.74186L6.00311 7.00677L6.7774 7.80836L3.97862 10.5435C2.95441 11.5444 1.8705 12.5709 1.30855 13.1197Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (570:0) {#if name == 'ruler' }
function create_if_block_9(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M18.9836 5.32852L14.6715 1.01638L1.01638 14.6715L5.32852 18.9836L18.9836 5.32852ZM15.3902 0.297691C14.9933 -0.0992303 14.3497 -0.0992303 13.9528 0.297691L0.297691 13.9528C-0.0992301 14.3497 -0.0992305 14.9932 0.297691 15.3902L4.60983 19.7023C5.00675 20.0992 5.65029 20.0992 6.04721 19.7023L19.7023 6.04721C20.0992 5.65029 20.0992 5.00675 19.7023 4.60983L15.3902 0.297691Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M11.7863 2.67056C11.9848 2.4721 12.3065 2.4721 12.505 2.67056L14.4237 4.58927C14.6222 4.78774 14.6222 5.1095 14.4237 5.30796C14.2252 5.50642 13.9035 5.50642 13.705 5.30796L11.7863 3.38925C11.5878 3.19079 11.5878 2.86902 11.7863 2.67056Z");
			attr(path2, "d", "M8.93891 5.36331C9.13737 5.16485 9.45914 5.16485 9.6576 5.36331L11.5763 7.28202C11.7748 7.48048 11.7748 7.80225 11.5763 8.00071C11.3779 8.19917 11.0561 8.19917 10.8576 8.00071L8.93891 6.082C8.74045 5.88354 8.74045 5.56177 8.93891 5.36331Z");
			attr(path3, "d", "M6.24307 8.20742C6.44153 8.00896 6.76329 8.00896 6.96175 8.20742L8.88047 10.1261C9.07893 10.3246 9.07893 10.6464 8.88047 10.8448C8.68201 11.0433 8.36024 11.0433 8.16178 10.8448L6.24307 8.92611C6.0446 8.72765 6.0446 8.40588 6.24307 8.20742Z");
			attr(path4, "d", "M3.37296 10.8776C3.57142 10.6791 3.89319 10.6791 4.09165 10.8776L6.01036 12.7963C6.20882 12.9948 6.20882 13.3165 6.01036 13.515C5.8119 13.7134 5.49013 13.7134 5.29167 13.515L3.37296 11.5963C3.1745 11.3978 3.1745 11.076 3.37296 10.8776Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (579:0) {#if name == 'serving_dish' }
function create_if_block_8(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M10 7.22864C5.83597 7.22864 2.44179 10.6819 2.44179 14.9649C2.44179 15.241 2.21794 15.4649 1.94179 15.4649C1.66565 15.4649 1.44179 15.241 1.44179 14.9649C1.44179 10.1503 5.2632 6.22864 10 6.22864C14.7369 6.22864 18.5583 10.1503 18.5583 14.9649C18.5583 15.241 18.3344 15.4649 18.0583 15.4649C17.7821 15.4649 17.5583 15.241 17.5583 14.9649C17.5583 10.6819 14.1641 7.22864 10 7.22864Z");
			attr(path1, "d", "M0.473022 14.9867C0.473022 14.7106 0.69688 14.4867 0.973022 14.4867H19.027C19.3032 14.4867 19.527 14.7106 19.527 14.9867C19.527 15.2628 19.3032 15.4867 19.027 15.4867H0.973022C0.69688 15.4867 0.473022 15.2628 0.473022 14.9867Z");
			attr(path2, "d", "M6.09332 9.9023C6.15244 10.0271 6.09921 10.1761 5.97443 10.2353C5.51339 10.4537 4.52514 11.2638 4.43389 12.6935C4.4251 12.8313 4.30627 12.9358 4.16847 12.927C4.03068 12.9183 3.92611 12.7994 3.93491 12.6616C4.04068 11.0045 5.18149 10.0577 5.76036 9.78341C5.88513 9.72429 6.03421 9.77752 6.09332 9.9023Z");
			attr(path3, "d", "M10.4906 5.04834H9.5095C8.95722 5.04834 8.5095 5.49605 8.5095 6.04834V6.1947H11.4906V6.04834C11.4906 5.49606 11.0429 5.04834 10.4906 5.04834ZM9.5095 4.04834C8.40493 4.04834 7.5095 4.94377 7.5095 6.04834V7.1947H12.4906V6.04834C12.4906 4.94377 11.5952 4.04834 10.4906 4.04834H9.5095Z");
			attr(path3, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (587:0) {#if name == 'shirt' }
function create_if_block_7(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M5.81971 2.09623C5.66962 2.09623 5.54176 2.15186 5.44395 2.25357L1.21145 6.65441C1.1088 6.76918 1.05429 6.90939 1.05429 7.05112C1.05429 7.20712 1.10783 7.34015 1.20568 7.44189L3.32991 9.65061C3.44515 9.76252 3.57826 9.81363 3.71113 9.81363C3.85775 9.81363 3.9834 9.76402 4.08701 9.65628L4.09094 9.6522L4.7024 9.02972C4.85658 8.87275 5.08721 8.82933 5.28453 8.92013C5.48186 9.01093 5.60604 9.21761 5.59798 9.44182L5.31373 17.3532C5.31817 17.6495 5.55481 17.8928 5.84081 17.8928H6.18836L14.1803 17.9038C14.4659 17.9035 14.7026 17.6607 14.7074 17.3648L14.4021 9.4433C14.3934 9.21885 14.5174 9.01164 14.7148 8.92044C14.9122 8.82925 15.1432 8.87254 15.2976 9.02968L15.9059 9.6489C16.0215 9.76199 16.1553 9.81363 16.2889 9.81363C16.4354 9.81363 16.561 9.76407 16.6646 9.65628L18.7886 7.44788C18.8912 7.33314 18.9457 7.19288 18.9457 7.05112C18.9457 6.89515 18.8922 6.76218 18.7943 6.66041L14.5618 2.25956C14.4515 2.15289 14.3167 2.09623 14.1803 2.09623H12.6411C12.5341 2.09623 12.3259 2.19376 12.1903 2.3422L12.181 2.35239C11.5962 2.9605 10.8184 3.29107 9.99479 3.29107C9.1624 3.29107 8.38522 2.95368 7.75232 2.28271L7.74644 2.27647C7.63884 2.1587 7.50017 2.09623 7.35906 2.09623H5.81971ZM4.69845 1.47842C5.00127 1.16356 5.40048 1 5.81971 1H7.35906C7.80667 1 8.21475 1.19917 8.50754 1.51779C8.94944 1.98502 9.45762 2.19485 9.99479 2.19485C10.5398 2.19485 11.0467 1.97904 11.4314 1.5813C11.6973 1.29312 12.1609 1 12.6411 1H14.1803C14.6114 1 15.0018 1.18292 15.2913 1.46809L15.3017 1.47828L19.5398 5.88527C19.8426 6.20007 20 6.61513 20 7.05112C20 7.49942 19.824 7.90545 19.5498 8.20642L19.54 8.21718L17.4101 10.4314C17.0921 10.7621 16.6905 10.9099 16.2889 10.9099C16.0115 10.9099 15.7438 10.8349 15.5054 10.6946L15.7613 17.3337C15.7616 17.341 15.7617 17.3483 15.7617 17.3557C15.7617 18.2613 15.0513 19 14.1803 19L6.18836 18.989H5.84081C4.96982 18.989 4.25938 18.2503 4.25938 17.3447C4.25938 17.3379 4.2595 17.331 4.25974 17.3242L4.49783 10.6977C4.25265 10.8427 3.98187 10.9099 3.71113 10.9099C3.29738 10.9099 2.90507 10.743 2.59955 10.4412L2.58975 10.4316L0.460183 8.21704C0.157401 7.90221 0 7.48707 0 7.05112C0 6.60279 0.176044 6.19683 0.450248 5.89588L0.460047 5.88513L4.69845 1.47842Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (592:0) {#if name == 'shoe' }
function create_if_block_6(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M12.8224 4.03182L12.8025 4.03174C12.542 4.03174 12.3153 4.21802 12.2775 4.47255C12.2579 4.61681 12.0795 5.67852 11.4659 6.79358C10.8407 7.92973 9.72533 9.1832 7.81577 9.49259C5.83649 9.81404 4.11637 10.1581 2.89249 10.7606C2.28904 11.0577 1.83597 11.4041 1.53332 11.8155C1.23568 12.22 1.06157 12.7168 1.06157 13.3581V13.4819V13.9977V15.4525C1.06157 15.7001 1.24601 15.9099 1.48733 15.958H18.4076C18.6983 15.958 18.9384 15.7247 18.9384 15.4421V13.9977C18.9442 13.796 18.945 13.667 18.9421 13.4819C18.9408 13.4368 18.9384 13.3932 18.9384 13.3478V5.22846C18.9384 4.97383 18.7359 4.75007 18.4718 4.71927L18.4692 4.71896L12.8322 4.03422L12.8224 4.03182ZM2.12314 16.9897V17H1.59236C0.715348 17 0 16.3048 0 15.4525V13.359C0 12.5199 0.233271 11.8087 0.669786 11.2154C1.10128 10.6289 1.70913 10.1867 2.41275 9.84032C3.80301 9.15585 5.68163 8.7932 7.64079 8.47502C9.10688 8.23755 9.99265 7.28323 10.5298 6.30706C10.7978 5.82005 10.9708 5.34056 11.0778 4.97162C11.1311 4.78784 11.1675 4.63343 11.191 4.5218C11.2027 4.46602 11.2111 4.42124 11.2167 4.38917C11.2223 4.35718 11.2248 4.33924 11.2248 4.33924L11.2258 4.3316C11.3376 3.55552 12.0233 3.00005 12.8025 3.00005C12.8025 3.00005 12.807 3.00004 12.8098 3.00003C12.8443 2.99989 12.926 2.99954 13.0186 3.01715L18.5982 3.69494L18.5997 3.6951C19.3964 3.78872 20 4.45187 20 5.22846V13.3478C20 13.3478 20 13.352 20 13.3543C20 13.3806 20.0001 13.4225 19.9941 13.4747C19.9944 13.4773 19.9948 13.48 19.9951 13.4826C19.9971 13.5007 20 13.53 20 13.5645V15.4421C20 16.2945 19.2846 16.9897 18.4076 16.9897H2.12314Z");
			attr(path1, "d", "M18.9384 13.9977H1.06157V13.4819H18.9421L18.9461 13.7315L18.9384 13.9977Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (598:0) {#if name == 'silhouette' }
function create_if_block_5(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M12.5 12.0391H7.5C4.46243 12.0391 2 14.5484 2 17.6437V18.481H18V17.6437C18 14.5484 15.5376 12.0391 12.5 12.0391ZM7.5 11.0201C3.91015 11.0201 1 13.9856 1 17.6437V19.5H19V17.6437C19 13.9856 16.0899 11.0201 12.5 11.0201H7.5Z");
			attr(path0, "fill-rule", "evenodd");
			attr(path1, "d", "M14.3596 5.08556C14.3596 7.6181 12.3448 9.67113 9.85956 9.67113C7.37428 9.67113 5.35956 7.6181 5.35956 5.08556C5.35956 2.55303 7.37428 0.5 9.85956 0.5C12.3448 0.5 14.3596 2.55303 14.3596 5.08556ZM9.85956 8.65211C11.7926 8.65211 13.3596 7.05532 13.3596 5.08556C13.3596 3.11581 11.7926 1.51901 9.85956 1.51901C7.92656 1.51901 6.35956 3.11581 6.35956 5.08556C6.35956 7.05532 7.92656 8.65211 9.85956 8.65211Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (604:0) {#if name == 'snowflake' }
function create_if_block_4(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M10 0.5C10.2761 0.5 10.5 0.723858 10.5 1V2.85676L12.3862 1.70941C12.6222 1.5659 12.9253 1.64343 13.0634 1.88258C13.2015 2.12173 13.1222 2.43193 12.8862 2.57544L10.6881 3.91254L10.5 4.20171V9.10567L14.7324 6.5025L14.7497 6.47255L14.9238 3.70441C14.9413 3.4261 15.1766 3.21512 15.4494 3.23315C15.7222 3.25118 15.9292 3.49141 15.9116 3.76971L15.7803 5.85797L17.4941 4.80383C17.7293 4.65916 18.0331 4.73508 18.1726 4.9734C18.3121 5.21172 18.2345 5.5222 17.9993 5.66687L16.1725 6.79045L18.1852 8.00596C18.4192 8.1473 18.4959 8.45767 18.3565 8.69919C18.217 8.9407 17.9143 9.02191 17.6802 8.88057L15.5078 7.56859L14.9656 7.53275L10.9676 9.99182L15.1203 12.4496H15.3615L17.7806 11.2234C18.0245 11.0998 18.3204 11.2032 18.4416 11.4544C18.5627 11.7056 18.4632 12.0094 18.2194 12.133L16.2618 13.1252L18.0691 14.1948C18.3067 14.3355 18.3895 14.6446 18.254 14.8852C18.1185 15.1258 17.816 15.2068 17.5784 15.0661L15.794 14.0101L15.7868 16.2668C15.7859 16.5457 15.5636 16.7717 15.2902 16.7717C15.0168 16.7717 14.7959 16.5457 14.7968 16.2668L14.8051 13.6677L14.6411 13.3278L10.5 10.8769V15.7983L10.6881 16.0875L12.8862 17.4246C13.1222 17.5681 13.2015 17.8783 13.0634 18.1174C12.9253 18.3566 12.6221 18.4341 12.3862 18.2906L10.5 17.1432V19C10.5 19.2761 10.2761 19.5 10 19.5C9.72386 19.5 9.5 19.2761 9.5 19V17.1236L7.69032 18.3603C7.46233 18.5161 7.15546 18.4548 7.00491 18.2233C6.85436 17.9918 6.91714 17.6778 7.14513 17.522L9.37855 15.9957L9.5 15.7853V10.8945L5.28087 13.4895L5.19492 13.6677L5.2032 16.2668C5.20409 16.5457 4.98319 16.7717 4.70981 16.7717C4.43643 16.7717 4.21409 16.5457 4.21321 16.2668L4.20646 14.1503L2.50589 15.1963C2.27067 15.341 1.96692 15.265 1.82743 15.0267C1.68794 14.7884 1.76553 14.4779 2.00075 14.3332L3.86241 13.1882L1.78063 12.133C1.53676 12.0094 1.43728 11.7056 1.55844 11.4544C1.67959 11.2032 1.9755 11.0998 2.21937 11.2234L4.63853 12.4496H5.06329L9.03246 10.0083L4.86806 7.54362L4.49224 7.56846L2.31982 8.88045C2.08578 9.02179 1.78302 8.94058 1.64358 8.69906C1.50414 8.45755 1.58083 8.14718 1.81486 8.00584L3.71259 6.85976L1.93081 5.80522C1.69317 5.66458 1.61038 5.35551 1.74589 5.11491C1.8814 4.8743 2.1839 4.79327 2.42154 4.93391L4.2289 6.00359L4.08836 3.76959C4.07085 3.49129 4.27779 3.25106 4.55057 3.23303C4.82336 3.21499 5.05868 3.42598 5.07619 3.70428L5.25034 6.47231L5.36945 6.67862L9.5 9.12326V4.21468L9.37855 4.00432L7.14513 2.47799C6.91714 2.32219 6.85436 2.00822 7.00491 1.77672C7.15546 1.54523 7.46233 1.48387 7.69032 1.63968L9.5 2.87642V1C9.5 0.723858 9.72386 0.5 10 0.5Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (609:0) {#if name == 'star' }
function create_if_block_3(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M10 2.62639L8.54072 7.33639C8.34848 7.95687 7.79714 8.37696 7.17504 8.37696H2.45272L6.27316 11.2879C6.77645 11.6714 6.98704 12.3511 6.7948 12.9716L5.33552 17.6816L9.15596 14.7706C9.65925 14.3872 10.3408 14.3872 10.844 14.7706L14.6645 17.6816L13.2052 12.9716C13.013 12.3511 13.2236 11.6714 13.7268 11.2879L17.5473 8.37696H12.825C12.2029 8.37696 11.6515 7.95687 11.4593 7.33639L10 2.62639ZM10.4552 0.846855C10.3119 0.384382 9.68806 0.384382 9.54477 0.846855L7.63027 7.02616C7.56619 7.23298 7.38241 7.37301 7.17504 7.37301H0.979572C0.515888 7.37301 0.323098 7.99527 0.698226 8.28109L5.71047 12.1001C5.87823 12.2279 5.94843 12.4545 5.88435 12.6613L3.96984 18.8406C3.82656 19.3031 4.33129 19.6877 4.70642 19.4019L9.71865 15.5828C9.88642 15.455 10.1136 15.455 10.2813 15.5828L15.2936 19.4019C15.6687 19.6877 16.1734 19.3031 16.0302 18.8406L14.1157 12.6613C14.0516 12.4545 14.1218 12.2279 14.2895 12.1001L19.3018 8.28109C19.6769 7.99527 19.4841 7.37301 19.0204 7.37301H12.825C12.6176 7.37301 12.4338 7.23298 12.3697 7.02616L10.4552 0.846855Z");
			attr(path, "fill-rule", "evenodd");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (614:0) {#if name == 'stopwatch' }
function create_if_block_2$1(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true, "fill-rule": true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			path4 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path4).forEach(detach);
			path5 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path5).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M18.7014 11.3962C18.7014 16.075 14.9085 19.8679 10.2297 19.8679C5.55095 19.8679 1.75806 16.075 1.75806 11.3962C1.75806 6.71746 5.55095 2.92457 10.2297 2.92457C14.9085 2.92457 18.7014 6.71746 18.7014 11.3962ZM10.2297 18.8679C14.3562 18.8679 17.7014 15.5227 17.7014 11.3962C17.7014 7.26974 14.3562 3.92457 10.2297 3.92457C6.10323 3.92457 2.75806 7.26974 2.75806 11.3962C2.75806 15.5227 6.10323 18.8679 10.2297 18.8679Z");
			attr(path1, "d", "M10.7203 1.7782H9.7392C9.18691 1.7782 8.7392 2.22591 8.7392 2.7782V2.92456H11.7203V2.7782C11.7203 2.22591 11.2726 1.7782 10.7203 1.7782ZM9.7392 0.778198C8.63463 0.778198 7.7392 1.67363 7.7392 2.7782V3.92456H12.7203V2.7782C12.7203 1.67363 11.8249 0.778198 10.7203 0.778198H9.7392Z");
			attr(path1, "fill-rule", "evenodd");
			attr(path2, "d", "M8.98448 11.3963C8.98448 10.7086 9.54201 10.1511 10.2298 10.1511C10.9175 10.1511 11.475 10.7086 11.475 11.3963C11.475 12.0841 10.9175 12.6416 10.2298 12.6416C9.54201 12.6416 8.98448 12.0841 8.98448 11.3963Z");
			attr(path3, "d", "M9.72974 11.3962C9.72974 11.1201 9.95359 10.8962 10.2297 10.8962H15.2108C15.487 10.8962 15.7108 11.1201 15.7108 11.3962C15.7108 11.6724 15.487 11.8962 15.2108 11.8962H10.2297C9.95359 11.8962 9.72974 11.6724 9.72974 11.3962Z");
			attr(path4, "d", "M10.2297 5.91517C10.5059 5.91517 10.7297 6.13902 10.7297 6.41517V8.90572C10.7297 9.18186 10.5059 9.40572 10.2297 9.40572C9.95359 9.40572 9.72974 9.18186 9.72974 8.90572V6.41517C9.72974 6.13902 9.95359 5.91517 10.2297 5.91517Z");
			attr(path5, "d", "M13.9544 7.30685C14.1497 7.50211 14.1497 7.8187 13.9544 8.01396L12.1934 9.77505C11.9981 9.97031 11.6815 9.97031 11.4862 9.77505C11.291 9.57978 11.291 9.2632 11.4862 9.06794L13.2473 7.30685C13.4426 7.11159 13.7592 7.11159 13.9544 7.30685Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
			append_hydration(svg, path4);
			append_hydration(svg, path5);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (624:0) {#if name == 'truck' }
function create_if_block_1$3(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			path2 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path2).forEach(detach);
			path3 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path3).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M0 3.75156C0 3.47454 0.224196 3.24997 0.500755 3.24997H10.647C10.9235 3.24997 11.1477 3.47454 11.1477 3.75156V5.07505V5.63362V6.10938V13.6616C10.9427 14.0067 10.8813 14.1101 10.5516 14.6648L7.22339 14.6646V13.6614H10.1462V4.25316H1.00151V13.6614H2.6842V14.6646H0.500755C0.224196 14.6646 0 14.44 0 14.163V3.75156Z");
			attr(path1, "d", "M18.9985 8.08376L11.1477 6.10938V5.07505L19.6212 7.20603C19.8439 7.26203 20 7.46255 20 7.69253V14.1631C20 14.4401 19.7758 14.6647 19.4992 14.6647H17.3071V13.6615H18.9985V8.08376ZM11.1477 13.6616L13.3442 13.6615L13.3443 14.6647L10.5516 14.6648L11.1477 13.6616Z");
			attr(path2, "d", "M7.71269 14.1854C7.71269 15.6018 6.56643 16.75 5.15245 16.75C3.73847 16.75 2.59221 15.6018 2.59221 14.1854C2.59221 12.7691 3.73847 11.6209 5.15245 11.6209C6.56643 11.6209 7.71269 12.7691 7.71269 14.1854ZM5.15245 15.7468C6.01331 15.7468 6.71118 15.0478 6.71118 14.1854C6.71118 13.3231 6.01331 12.6241 5.15245 12.6241C4.29159 12.6241 3.59372 13.3231 3.59372 14.1854C3.59372 15.0478 4.29159 15.7468 5.15245 15.7468Z");
			attr(path3, "d", "M17.5196 14.1854C17.5196 15.6018 16.3733 16.75 14.9593 16.75C13.5454 16.75 12.3991 15.6018 12.3991 14.1854C12.3991 12.7691 13.5454 11.6209 14.9593 11.6209C16.3733 11.6209 17.5196 12.7691 17.5196 14.1854ZM14.9593 15.7468C15.8202 15.7468 16.5181 15.0478 16.5181 14.1854C16.5181 13.3231 15.8202 12.6241 14.9593 12.6241C14.0985 12.6241 13.4006 13.3231 13.4006 14.1854C13.4006 15.0478 14.0985 15.7468 14.9593 15.7468Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
			append_hydration(svg, path2);
			append_hydration(svg, path3);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (632:0) {#if name == 'washing' }
function create_if_block$5(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", {
				class: true,
				width: true,
				"aria-hidden": true,
				focusable: true,
				role: true,
				xmlns: true,
				viewBox: true
			});

			var svg_nodes = children(svg);
			path0 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path0).forEach(detach);
			path1 = claim_svg_element(svg_nodes, "path", { d: true });
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M0.38191 4.26524C0.652327 4.19778 0.926646 4.36065 0.994619 4.62903L3.53292 14.6511C3.54914 14.7106 3.60034 14.7479 3.65788 14.7479H16.3422C16.3998 14.7479 16.451 14.7106 16.4672 14.651C16.4673 14.6506 16.4675 14.6502 16.4676 14.6498L19.0054 4.62904C19.0734 4.36066 19.3477 4.19778 19.6181 4.26523C19.8885 4.33269 20.0526 4.60494 19.9847 4.87332L17.4458 14.8982L17.4447 14.9023C17.3149 15.3972 16.867 15.75 16.3422 15.75H3.65788C3.13313 15.75 2.68527 15.3972 2.55542 14.9023L2.55434 14.8982L0.0153513 4.87333C-0.0526214 4.60495 0.111492 4.3327 0.38191 4.26524Z");
			attr(path1, "d", "M6.76169 7.36178C6.11228 7.20142 5.40174 7.36303 4.75389 7.71568L4.74572 7.72013L4.73738 7.72427C4.55194 7.81655 4.38964 7.91308 4.21117 8.01923C4.0989 8.08601 3.98022 8.1566 3.84536 8.23232C3.52401 8.41277 3.15453 8.59357 2.72811 8.67939L2.71955 8.68111C2.08915 8.79675 1.53984 8.55856 1.12774 8.33954L1.6044 7.45611C1.97602 7.65361 2.26006 7.74481 2.53197 7.69634C2.80109 7.64144 3.05982 7.52202 3.34815 7.36012C3.43695 7.31026 3.53611 7.25156 3.64095 7.1895C3.84288 7.06996 4.06587 6.93795 4.27647 6.83261C5.06232 6.40671 6.03295 6.1502 7.00242 6.38856C7.69625 6.55146 8.31122 6.91064 8.84283 7.22112C8.93772 7.27654 9.02996 7.33041 9.11951 7.38134C9.54269 7.61551 9.86129 7.74878 10.1516 7.70566C10.5743 7.61348 10.9584 7.3965 11.4176 7.12784C11.4329 7.11892 11.4482 7.10994 11.4636 7.1009C11.8908 6.85074 12.3909 6.55782 12.968 6.42066C13.9716 6.13864 15.01 6.39498 15.8247 6.85665C16.0106 6.953 16.2099 7.06983 16.3941 7.17778C16.5001 7.2399 16.6011 7.29909 16.6916 7.34975C16.9673 7.50401 17.2202 7.62511 17.4814 7.69408C17.6558 7.74014 17.8437 7.72276 18.0658 7.64569C18.2042 7.59767 18.3474 7.52933 18.4995 7.44684L18.9839 8.32612C18.8074 8.42189 18.6102 8.51838 18.399 8.59167C18.0548 8.71111 17.6518 8.77606 17.2218 8.6625C16.8378 8.56111 16.4976 8.39159 16.1957 8.22267C16.064 8.14895 15.9478 8.08055 15.8372 8.01544C15.6731 7.91888 15.5214 7.82959 15.3497 7.741L15.3404 7.73618L15.3312 7.73097C14.673 7.35597 13.9098 7.1946 13.2351 7.38713L13.2233 7.39052L13.2113 7.39332C12.7842 7.49304 12.3982 7.71742 11.9304 7.99113L11.9227 7.99562C11.4802 8.25451 10.9593 8.55926 10.35 8.68837L10.3384 8.69081L10.3268 8.69271C9.64242 8.8049 9.02791 8.47817 8.62508 8.2551L8.62016 8.25237C8.51051 8.19005 8.40451 8.12848 8.30111 8.06845C7.7661 7.75786 7.30134 7.48804 6.76778 7.36325L6.76169 7.36178Z");
			attr(svg, "class", "icon icon-accordion ");
			attr(svg, "width", /*width*/ ctx[1]);
			attr(svg, "aria-hidden", "true");
			attr(svg, "focusable", "false");
			attr(svg, "role", "presentation");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, path0);
			append_hydration(svg, path1);
		},
		p(ctx, dirty) {
			if (dirty & /*width*/ 2) {
				attr(svg, "width", /*width*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment$7(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let t13;
	let t14;
	let t15;
	let t16;
	let t17;
	let t18;
	let t19;
	let t20;
	let t21;
	let t22;
	let t23;
	let t24;
	let t25;
	let t26;
	let t27;
	let t28;
	let t29;
	let t30;
	let t31;
	let t32;
	let t33;
	let t34;
	let t35;
	let t36;
	let t37;
	let t38;
	let t39;
	let t40;
	let t41;
	let t42;
	let t43;
	let t44;
	let t45;
	let t46;
	let t47;
	let t48;
	let t49;
	let t50;
	let t51;
	let t52;
	let t53;
	let t54;
	let t55;
	let t56;
	let t57;
	let t58;
	let t59;
	let t60;
	let t61;
	let t62;
	let t63;
	let t64;
	let t65;
	let t66;
	let t67;
	let t68;
	let t69;
	let t70;
	let t71;
	let t72;
	let t73;
	let t74;
	let t75;
	let t76;
	let t77;
	let t78;
	let t79;
	let t80;
	let t81;
	let t82;
	let t83;
	let t84;
	let t85;
	let t86;
	let t87;
	let t88;
	let t89;
	let t90;
	let t91;
	let t92;
	let t93;
	let t94;
	let t95;
	let t96;
	let t97;
	let t98;
	let t99;
	let t100;
	let t101;
	let t102;
	let t103;
	let t104;
	let t105;
	let t106;
	let t107;
	let t108;
	let t109;
	let t110;
	let t111;
	let t112;
	let t113;
	let t114;
	let if_block115_anchor;
	let if_block0 = /*name*/ ctx[0] == 'icon-3d-model' && create_if_block_115(ctx);
	let if_block1 = /*name*/ ctx[0] == 'icon-accordion' && create_if_block_114();
	let if_block2 = /*name*/ ctx[0] == 'icon-account' && create_if_block_113(ctx);
	let if_block3 = /*name*/ ctx[0] == 'icon-amazon_payments' && create_if_block_112(ctx);
	let if_block4 = /*name*/ ctx[0] == 'icon-american_express' && create_if_block_111(ctx);
	let if_block5 = /*name*/ ctx[0] == 'icon-apple_pay' && create_if_block_110(ctx);
	let if_block6 = /*name*/ ctx[0] == 'icon-arrow-left' && create_if_block_109(ctx);
	let if_block7 = /*name*/ ctx[0] == 'icon-arrow-right' && create_if_block_108(ctx);
	let if_block8 = /*name*/ ctx[0] == 'icon-arrow' && create_if_block_107(ctx);
	let if_block9 = /*name*/ ctx[0] == 'icon-bitcoin' && create_if_block_106(ctx);
	let if_block10 = /*name*/ ctx[0] == 'icon-caret' && create_if_block_105(ctx);
	let if_block11 = /*name*/ ctx[0] == 'icon-cart-empty' && create_if_block_104(ctx);
	let if_block12 = /*name*/ ctx[0] == 'icon-cart' && create_if_block_103(ctx);
	let if_block13 = /*name*/ ctx[0] == 'icon-checkmark' && create_if_block_102(ctx);
	let if_block14 = /*name*/ ctx[0] == 'icon-chevron-down' && create_if_block_101(ctx);
	let if_block15 = /*name*/ ctx[0] == 'icon-chevron-left' && create_if_block_100(ctx);
	let if_block16 = /*name*/ ctx[0] == 'icon-chevron-right' && create_if_block_99(ctx);
	let if_block17 = /*name*/ ctx[0] == 'icon-chevron-up' && create_if_block_98(ctx);
	let if_block18 = /*name*/ ctx[0] == 'icon-cirrus' && create_if_block_97(ctx);
	let if_block19 = /*name*/ ctx[0] == 'icon-clipboard' && create_if_block_96(ctx);
	let if_block20 = /*name*/ ctx[0] == 'icon-close-small' && create_if_block_95(ctx);
	let if_block21 = /*name*/ ctx[0] == 'icon-close' && create_if_block_94(ctx);
	let if_block22 = /*name*/ ctx[0] == 'icon-dankort' && create_if_block_93(ctx);
	let if_block23 = /*name*/ ctx[0] == 'icon-diners_club' && create_if_block_92(ctx);
	let if_block24 = /*name*/ ctx[0] == 'icon-discount' && create_if_block_91(ctx);
	let if_block25 = /*name*/ ctx[0] == 'icon-discover' && create_if_block_90(ctx);
	let if_block26 = /*name*/ ctx[0] == 'icon-dogecoin' && create_if_block_89(ctx);
	let if_block27 = /*name*/ ctx[0] == 'icon-dwolla' && create_if_block_88(ctx);
	let if_block28 = /*name*/ ctx[0] == 'icon-error' && create_if_block_87(ctx);
	let if_block29 = /*name*/ ctx[0] == 'icon-facebook' && create_if_block_86(ctx);
	let if_block30 = /*name*/ ctx[0] == 'icon-filter' && create_if_block_85(ctx);
	let if_block31 = /*name*/ ctx[0] == 'icon-forbrugsforeningen' && create_if_block_84(ctx);
	let if_block32 = /*name*/ ctx[0] == 'icon-garbage' && create_if_block_83(ctx);
	let if_block33 = /*name*/ ctx[0] == 'icon-hamburger' && create_if_block_82(ctx);
	let if_block34 = /*name*/ ctx[0] == 'icon-instagram' && create_if_block_81(ctx);
	let if_block35 = /*name*/ ctx[0] == 'icon-interac' && create_if_block_80(ctx);
	let if_block36 = /*name*/ ctx[0] == 'icon-jcb' && create_if_block_79(ctx);
	let if_block37 = /*name*/ ctx[0] == 'icon-klarna' && create_if_block_78(ctx);
	let if_block38 = /*name*/ ctx[0] == 'icon-laser' && create_if_block_77(ctx);
	let if_block39 = /*name*/ ctx[0] == 'icon-litecoin' && create_if_block_76(ctx);
	let if_block40 = /*name*/ ctx[0] == 'icon-lock' && create_if_block_75(ctx);
	let if_block41 = /*name*/ ctx[0] == 'icon-login' && create_if_block_74(ctx);
	let if_block42 = /*name*/ ctx[0] == 'icon-maestro' && create_if_block_73(ctx);
	let if_block43 = /*name*/ ctx[0] == 'icon-master' && create_if_block_72(ctx);
	let if_block44 = /*name*/ ctx[0] == 'icon-minus' && create_if_block_71(ctx);
	let if_block45 = /*name*/ ctx[0] == 'icon-padlock' && create_if_block_70(ctx);
	let if_block46 = /*name*/ ctx[0] == 'icon-pause' && create_if_block_69(ctx);
	let if_block47 = /*name*/ ctx[0] == 'icon-paypal' && create_if_block_68(ctx);
	let if_block48 = /*name*/ ctx[0] == 'icon-pin' && create_if_block_67(ctx);
	let if_block49 = /*name*/ ctx[0] == 'icon-pinterest' && create_if_block_66(ctx);
	let if_block50 = /*name*/ ctx[0] == 'icon-play-video' && create_if_block_65(ctx);
	let if_block51 = /*name*/ ctx[0] == 'icon-play' && create_if_block_64(ctx);
	let if_block52 = /*name*/ ctx[0] == 'icon-plus' && create_if_block_63(ctx);
	let if_block53 = /*name*/ ctx[0] == 'icon-quote' && create_if_block_62(ctx);
	let if_block54 = /*name*/ ctx[0] == 'icon-remove' && create_if_block_61(ctx);
	let if_block55 = /*name*/ ctx[0] == 'icon-rss' && create_if_block_60(ctx);
	let if_block56 = /*name*/ ctx[0] == 'icon-search' && create_if_block_59(ctx);
	let if_block57 = /*name*/ ctx[0] == 'icon-share' && create_if_block_58(ctx);
	let if_block58 = /*name*/ ctx[0] == 'icon-shopify-logo' && create_if_block_57(ctx);
	let if_block59 = /*name*/ ctx[0] == 'icon-shopify_pay' && create_if_block_56(ctx);
	let if_block60 = /*name*/ ctx[0] == 'icon-snapchat' && create_if_block_55(ctx);
	let if_block61 = /*name*/ ctx[0] == 'icon-spinner' && create_if_block_54(ctx);
	let if_block62 = /*name*/ ctx[0] == 'icon-stripe' && create_if_block_53(ctx);
	let if_block63 = /*name*/ ctx[0] == 'icon-success' && create_if_block_52(ctx);
	let if_block64 = /*name*/ ctx[0] == 'icon-tick' && create_if_block_51(ctx);
	let if_block65 = /*name*/ ctx[0] == 'icon-tiktok' && create_if_block_50(ctx);
	let if_block66 = /*name*/ ctx[0] == 'icon-tumblr' && create_if_block_49(ctx);
	let if_block67 = /*name*/ ctx[0] == 'icon-twitter' && create_if_block_48(ctx);
	let if_block68 = /*name*/ ctx[0] == 'icon-unavailable' && create_if_block_47(ctx);
	let if_block69 = /*name*/ ctx[0] == 'icon-vimeo' && create_if_block_46(ctx);
	let if_block70 = /*name*/ ctx[0] == 'icon-visa' && create_if_block_45(ctx);
	let if_block71 = /*name*/ ctx[0] == 'icon-youtube' && create_if_block_44(ctx);
	let if_block72 = /*name*/ ctx[0] == 'icon-zoom' && create_if_block_43(ctx);
	let if_block73 = /*name*/ ctx[0] == 'apple' && create_if_block_42(ctx);
	let if_block74 = /*name*/ ctx[0] == 'banana' && create_if_block_41(ctx);
	let if_block75 = /*name*/ ctx[0] == 'bottle' && create_if_block_40(ctx);
	let if_block76 = /*name*/ ctx[0] == 'box' && create_if_block_39(ctx);
	let if_block77 = /*name*/ ctx[0] == 'carrot' && create_if_block_38(ctx);
	let if_block78 = /*name*/ ctx[0] == 'chat_bubble' && create_if_block_37(ctx);
	let if_block79 = /*name*/ ctx[0] == 'check_mark' && create_if_block_36(ctx);
	let if_block80 = /*name*/ ctx[0] == 'clipboard' && create_if_block_35(ctx);
	let if_block81 = /*name*/ ctx[0] == 'dairy' && create_if_block_34(ctx);
	let if_block82 = /*name*/ ctx[0] == 'dairy_free' && create_if_block_33(ctx);
	let if_block83 = /*name*/ ctx[0] == 'dryer' && create_if_block_32(ctx);
	let if_block84 = /*name*/ ctx[0] == 'eye' && create_if_block_31(ctx);
	let if_block85 = /*name*/ ctx[0] == 'fire' && create_if_block_30(ctx);
	let if_block86 = /*name*/ ctx[0] == 'gluten_free' && create_if_block_29(ctx);
	let if_block87 = /*name*/ ctx[0] == 'heart' && create_if_block_28(ctx);
	let if_block88 = /*name*/ ctx[0] == 'iron' && create_if_block_27(ctx);
	let if_block89 = /*name*/ ctx[0] == 'leaf' && create_if_block_26(ctx);
	let if_block90 = /*name*/ ctx[0] == 'leather' && create_if_block_25(ctx);
	let if_block91 = /*name*/ ctx[0] == 'lightning_bolt' && create_if_block_24(ctx);
	let if_block92 = /*name*/ ctx[0] == 'lipstick' && create_if_block_23(ctx);
	let if_block93 = /*name*/ ctx[0] == 'lock' && create_if_block_22(ctx);
	let if_block94 = /*name*/ ctx[0] == 'map_pin' && create_if_block_21(ctx);
	let if_block95 = /*name*/ ctx[0] == 'nut_free' && create_if_block_20(ctx);
	let if_block96 = /*name*/ ctx[0] == 'pants' && create_if_block_19(ctx);
	let if_block97 = /*name*/ ctx[0] == 'paw_print' && create_if_block_18(ctx);
	let if_block98 = /*name*/ ctx[0] == 'pepper' && create_if_block_17(ctx);
	let if_block99 = /*name*/ ctx[0] == 'perfume' && create_if_block_16(ctx);
	let if_block100 = /*name*/ ctx[0] == 'plane' && create_if_block_15(ctx);
	let if_block101 = /*name*/ ctx[0] == 'plant' && create_if_block_14(ctx);
	let if_block102 = /*name*/ ctx[0] == 'price_tag' && create_if_block_13(ctx);
	let if_block103 = /*name*/ ctx[0] == 'question_mark' && create_if_block_12(ctx);
	let if_block104 = /*name*/ ctx[0] == 'recycle' && create_if_block_11(ctx);
	let if_block105 = /*name*/ ctx[0] == 'return' && create_if_block_10(ctx);
	let if_block106 = /*name*/ ctx[0] == 'ruler' && create_if_block_9(ctx);
	let if_block107 = /*name*/ ctx[0] == 'serving_dish' && create_if_block_8(ctx);
	let if_block108 = /*name*/ ctx[0] == 'shirt' && create_if_block_7(ctx);
	let if_block109 = /*name*/ ctx[0] == 'shoe' && create_if_block_6(ctx);
	let if_block110 = /*name*/ ctx[0] == 'silhouette' && create_if_block_5(ctx);
	let if_block111 = /*name*/ ctx[0] == 'snowflake' && create_if_block_4(ctx);
	let if_block112 = /*name*/ ctx[0] == 'star' && create_if_block_3(ctx);
	let if_block113 = /*name*/ ctx[0] == 'stopwatch' && create_if_block_2$1(ctx);
	let if_block114 = /*name*/ ctx[0] == 'truck' && create_if_block_1$3(ctx);
	let if_block115 = /*name*/ ctx[0] == 'washing' && create_if_block$5(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			t5 = space();
			if (if_block6) if_block6.c();
			t6 = space();
			if (if_block7) if_block7.c();
			t7 = space();
			if (if_block8) if_block8.c();
			t8 = space();
			if (if_block9) if_block9.c();
			t9 = space();
			if (if_block10) if_block10.c();
			t10 = space();
			if (if_block11) if_block11.c();
			t11 = space();
			if (if_block12) if_block12.c();
			t12 = space();
			if (if_block13) if_block13.c();
			t13 = space();
			if (if_block14) if_block14.c();
			t14 = space();
			if (if_block15) if_block15.c();
			t15 = space();
			if (if_block16) if_block16.c();
			t16 = space();
			if (if_block17) if_block17.c();
			t17 = space();
			if (if_block18) if_block18.c();
			t18 = space();
			if (if_block19) if_block19.c();
			t19 = space();
			if (if_block20) if_block20.c();
			t20 = space();
			if (if_block21) if_block21.c();
			t21 = space();
			if (if_block22) if_block22.c();
			t22 = space();
			if (if_block23) if_block23.c();
			t23 = space();
			if (if_block24) if_block24.c();
			t24 = space();
			if (if_block25) if_block25.c();
			t25 = space();
			if (if_block26) if_block26.c();
			t26 = space();
			if (if_block27) if_block27.c();
			t27 = space();
			if (if_block28) if_block28.c();
			t28 = space();
			if (if_block29) if_block29.c();
			t29 = space();
			if (if_block30) if_block30.c();
			t30 = space();
			if (if_block31) if_block31.c();
			t31 = space();
			if (if_block32) if_block32.c();
			t32 = space();
			if (if_block33) if_block33.c();
			t33 = space();
			if (if_block34) if_block34.c();
			t34 = space();
			if (if_block35) if_block35.c();
			t35 = space();
			if (if_block36) if_block36.c();
			t36 = space();
			if (if_block37) if_block37.c();
			t37 = space();
			if (if_block38) if_block38.c();
			t38 = space();
			if (if_block39) if_block39.c();
			t39 = space();
			if (if_block40) if_block40.c();
			t40 = space();
			if (if_block41) if_block41.c();
			t41 = space();
			if (if_block42) if_block42.c();
			t42 = space();
			if (if_block43) if_block43.c();
			t43 = space();
			if (if_block44) if_block44.c();
			t44 = space();
			if (if_block45) if_block45.c();
			t45 = space();
			if (if_block46) if_block46.c();
			t46 = space();
			if (if_block47) if_block47.c();
			t47 = space();
			if (if_block48) if_block48.c();
			t48 = space();
			if (if_block49) if_block49.c();
			t49 = space();
			if (if_block50) if_block50.c();
			t50 = space();
			if (if_block51) if_block51.c();
			t51 = space();
			if (if_block52) if_block52.c();
			t52 = space();
			if (if_block53) if_block53.c();
			t53 = space();
			if (if_block54) if_block54.c();
			t54 = space();
			if (if_block55) if_block55.c();
			t55 = space();
			if (if_block56) if_block56.c();
			t56 = space();
			if (if_block57) if_block57.c();
			t57 = space();
			if (if_block58) if_block58.c();
			t58 = space();
			if (if_block59) if_block59.c();
			t59 = space();
			if (if_block60) if_block60.c();
			t60 = space();
			if (if_block61) if_block61.c();
			t61 = space();
			if (if_block62) if_block62.c();
			t62 = space();
			if (if_block63) if_block63.c();
			t63 = space();
			if (if_block64) if_block64.c();
			t64 = space();
			if (if_block65) if_block65.c();
			t65 = space();
			if (if_block66) if_block66.c();
			t66 = space();
			if (if_block67) if_block67.c();
			t67 = space();
			if (if_block68) if_block68.c();
			t68 = space();
			if (if_block69) if_block69.c();
			t69 = space();
			if (if_block70) if_block70.c();
			t70 = space();
			if (if_block71) if_block71.c();
			t71 = space();
			if (if_block72) if_block72.c();
			t72 = space();
			if (if_block73) if_block73.c();
			t73 = space();
			if (if_block74) if_block74.c();
			t74 = space();
			if (if_block75) if_block75.c();
			t75 = space();
			if (if_block76) if_block76.c();
			t76 = space();
			if (if_block77) if_block77.c();
			t77 = space();
			if (if_block78) if_block78.c();
			t78 = space();
			if (if_block79) if_block79.c();
			t79 = space();
			if (if_block80) if_block80.c();
			t80 = space();
			if (if_block81) if_block81.c();
			t81 = space();
			if (if_block82) if_block82.c();
			t82 = space();
			if (if_block83) if_block83.c();
			t83 = space();
			if (if_block84) if_block84.c();
			t84 = space();
			if (if_block85) if_block85.c();
			t85 = space();
			if (if_block86) if_block86.c();
			t86 = space();
			if (if_block87) if_block87.c();
			t87 = space();
			if (if_block88) if_block88.c();
			t88 = space();
			if (if_block89) if_block89.c();
			t89 = space();
			if (if_block90) if_block90.c();
			t90 = space();
			if (if_block91) if_block91.c();
			t91 = space();
			if (if_block92) if_block92.c();
			t92 = space();
			if (if_block93) if_block93.c();
			t93 = space();
			if (if_block94) if_block94.c();
			t94 = space();
			if (if_block95) if_block95.c();
			t95 = space();
			if (if_block96) if_block96.c();
			t96 = space();
			if (if_block97) if_block97.c();
			t97 = space();
			if (if_block98) if_block98.c();
			t98 = space();
			if (if_block99) if_block99.c();
			t99 = space();
			if (if_block100) if_block100.c();
			t100 = space();
			if (if_block101) if_block101.c();
			t101 = space();
			if (if_block102) if_block102.c();
			t102 = space();
			if (if_block103) if_block103.c();
			t103 = space();
			if (if_block104) if_block104.c();
			t104 = space();
			if (if_block105) if_block105.c();
			t105 = space();
			if (if_block106) if_block106.c();
			t106 = space();
			if (if_block107) if_block107.c();
			t107 = space();
			if (if_block108) if_block108.c();
			t108 = space();
			if (if_block109) if_block109.c();
			t109 = space();
			if (if_block110) if_block110.c();
			t110 = space();
			if (if_block111) if_block111.c();
			t111 = space();
			if (if_block112) if_block112.c();
			t112 = space();
			if (if_block113) if_block113.c();
			t113 = space();
			if (if_block114) if_block114.c();
			t114 = space();
			if (if_block115) if_block115.c();
			if_block115_anchor = empty();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t4 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t5 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			t6 = claim_space(nodes);
			if (if_block7) if_block7.l(nodes);
			t7 = claim_space(nodes);
			if (if_block8) if_block8.l(nodes);
			t8 = claim_space(nodes);
			if (if_block9) if_block9.l(nodes);
			t9 = claim_space(nodes);
			if (if_block10) if_block10.l(nodes);
			t10 = claim_space(nodes);
			if (if_block11) if_block11.l(nodes);
			t11 = claim_space(nodes);
			if (if_block12) if_block12.l(nodes);
			t12 = claim_space(nodes);
			if (if_block13) if_block13.l(nodes);
			t13 = claim_space(nodes);
			if (if_block14) if_block14.l(nodes);
			t14 = claim_space(nodes);
			if (if_block15) if_block15.l(nodes);
			t15 = claim_space(nodes);
			if (if_block16) if_block16.l(nodes);
			t16 = claim_space(nodes);
			if (if_block17) if_block17.l(nodes);
			t17 = claim_space(nodes);
			if (if_block18) if_block18.l(nodes);
			t18 = claim_space(nodes);
			if (if_block19) if_block19.l(nodes);
			t19 = claim_space(nodes);
			if (if_block20) if_block20.l(nodes);
			t20 = claim_space(nodes);
			if (if_block21) if_block21.l(nodes);
			t21 = claim_space(nodes);
			if (if_block22) if_block22.l(nodes);
			t22 = claim_space(nodes);
			if (if_block23) if_block23.l(nodes);
			t23 = claim_space(nodes);
			if (if_block24) if_block24.l(nodes);
			t24 = claim_space(nodes);
			if (if_block25) if_block25.l(nodes);
			t25 = claim_space(nodes);
			if (if_block26) if_block26.l(nodes);
			t26 = claim_space(nodes);
			if (if_block27) if_block27.l(nodes);
			t27 = claim_space(nodes);
			if (if_block28) if_block28.l(nodes);
			t28 = claim_space(nodes);
			if (if_block29) if_block29.l(nodes);
			t29 = claim_space(nodes);
			if (if_block30) if_block30.l(nodes);
			t30 = claim_space(nodes);
			if (if_block31) if_block31.l(nodes);
			t31 = claim_space(nodes);
			if (if_block32) if_block32.l(nodes);
			t32 = claim_space(nodes);
			if (if_block33) if_block33.l(nodes);
			t33 = claim_space(nodes);
			if (if_block34) if_block34.l(nodes);
			t34 = claim_space(nodes);
			if (if_block35) if_block35.l(nodes);
			t35 = claim_space(nodes);
			if (if_block36) if_block36.l(nodes);
			t36 = claim_space(nodes);
			if (if_block37) if_block37.l(nodes);
			t37 = claim_space(nodes);
			if (if_block38) if_block38.l(nodes);
			t38 = claim_space(nodes);
			if (if_block39) if_block39.l(nodes);
			t39 = claim_space(nodes);
			if (if_block40) if_block40.l(nodes);
			t40 = claim_space(nodes);
			if (if_block41) if_block41.l(nodes);
			t41 = claim_space(nodes);
			if (if_block42) if_block42.l(nodes);
			t42 = claim_space(nodes);
			if (if_block43) if_block43.l(nodes);
			t43 = claim_space(nodes);
			if (if_block44) if_block44.l(nodes);
			t44 = claim_space(nodes);
			if (if_block45) if_block45.l(nodes);
			t45 = claim_space(nodes);
			if (if_block46) if_block46.l(nodes);
			t46 = claim_space(nodes);
			if (if_block47) if_block47.l(nodes);
			t47 = claim_space(nodes);
			if (if_block48) if_block48.l(nodes);
			t48 = claim_space(nodes);
			if (if_block49) if_block49.l(nodes);
			t49 = claim_space(nodes);
			if (if_block50) if_block50.l(nodes);
			t50 = claim_space(nodes);
			if (if_block51) if_block51.l(nodes);
			t51 = claim_space(nodes);
			if (if_block52) if_block52.l(nodes);
			t52 = claim_space(nodes);
			if (if_block53) if_block53.l(nodes);
			t53 = claim_space(nodes);
			if (if_block54) if_block54.l(nodes);
			t54 = claim_space(nodes);
			if (if_block55) if_block55.l(nodes);
			t55 = claim_space(nodes);
			if (if_block56) if_block56.l(nodes);
			t56 = claim_space(nodes);
			if (if_block57) if_block57.l(nodes);
			t57 = claim_space(nodes);
			if (if_block58) if_block58.l(nodes);
			t58 = claim_space(nodes);
			if (if_block59) if_block59.l(nodes);
			t59 = claim_space(nodes);
			if (if_block60) if_block60.l(nodes);
			t60 = claim_space(nodes);
			if (if_block61) if_block61.l(nodes);
			t61 = claim_space(nodes);
			if (if_block62) if_block62.l(nodes);
			t62 = claim_space(nodes);
			if (if_block63) if_block63.l(nodes);
			t63 = claim_space(nodes);
			if (if_block64) if_block64.l(nodes);
			t64 = claim_space(nodes);
			if (if_block65) if_block65.l(nodes);
			t65 = claim_space(nodes);
			if (if_block66) if_block66.l(nodes);
			t66 = claim_space(nodes);
			if (if_block67) if_block67.l(nodes);
			t67 = claim_space(nodes);
			if (if_block68) if_block68.l(nodes);
			t68 = claim_space(nodes);
			if (if_block69) if_block69.l(nodes);
			t69 = claim_space(nodes);
			if (if_block70) if_block70.l(nodes);
			t70 = claim_space(nodes);
			if (if_block71) if_block71.l(nodes);
			t71 = claim_space(nodes);
			if (if_block72) if_block72.l(nodes);
			t72 = claim_space(nodes);
			if (if_block73) if_block73.l(nodes);
			t73 = claim_space(nodes);
			if (if_block74) if_block74.l(nodes);
			t74 = claim_space(nodes);
			if (if_block75) if_block75.l(nodes);
			t75 = claim_space(nodes);
			if (if_block76) if_block76.l(nodes);
			t76 = claim_space(nodes);
			if (if_block77) if_block77.l(nodes);
			t77 = claim_space(nodes);
			if (if_block78) if_block78.l(nodes);
			t78 = claim_space(nodes);
			if (if_block79) if_block79.l(nodes);
			t79 = claim_space(nodes);
			if (if_block80) if_block80.l(nodes);
			t80 = claim_space(nodes);
			if (if_block81) if_block81.l(nodes);
			t81 = claim_space(nodes);
			if (if_block82) if_block82.l(nodes);
			t82 = claim_space(nodes);
			if (if_block83) if_block83.l(nodes);
			t83 = claim_space(nodes);
			if (if_block84) if_block84.l(nodes);
			t84 = claim_space(nodes);
			if (if_block85) if_block85.l(nodes);
			t85 = claim_space(nodes);
			if (if_block86) if_block86.l(nodes);
			t86 = claim_space(nodes);
			if (if_block87) if_block87.l(nodes);
			t87 = claim_space(nodes);
			if (if_block88) if_block88.l(nodes);
			t88 = claim_space(nodes);
			if (if_block89) if_block89.l(nodes);
			t89 = claim_space(nodes);
			if (if_block90) if_block90.l(nodes);
			t90 = claim_space(nodes);
			if (if_block91) if_block91.l(nodes);
			t91 = claim_space(nodes);
			if (if_block92) if_block92.l(nodes);
			t92 = claim_space(nodes);
			if (if_block93) if_block93.l(nodes);
			t93 = claim_space(nodes);
			if (if_block94) if_block94.l(nodes);
			t94 = claim_space(nodes);
			if (if_block95) if_block95.l(nodes);
			t95 = claim_space(nodes);
			if (if_block96) if_block96.l(nodes);
			t96 = claim_space(nodes);
			if (if_block97) if_block97.l(nodes);
			t97 = claim_space(nodes);
			if (if_block98) if_block98.l(nodes);
			t98 = claim_space(nodes);
			if (if_block99) if_block99.l(nodes);
			t99 = claim_space(nodes);
			if (if_block100) if_block100.l(nodes);
			t100 = claim_space(nodes);
			if (if_block101) if_block101.l(nodes);
			t101 = claim_space(nodes);
			if (if_block102) if_block102.l(nodes);
			t102 = claim_space(nodes);
			if (if_block103) if_block103.l(nodes);
			t103 = claim_space(nodes);
			if (if_block104) if_block104.l(nodes);
			t104 = claim_space(nodes);
			if (if_block105) if_block105.l(nodes);
			t105 = claim_space(nodes);
			if (if_block106) if_block106.l(nodes);
			t106 = claim_space(nodes);
			if (if_block107) if_block107.l(nodes);
			t107 = claim_space(nodes);
			if (if_block108) if_block108.l(nodes);
			t108 = claim_space(nodes);
			if (if_block109) if_block109.l(nodes);
			t109 = claim_space(nodes);
			if (if_block110) if_block110.l(nodes);
			t110 = claim_space(nodes);
			if (if_block111) if_block111.l(nodes);
			t111 = claim_space(nodes);
			if (if_block112) if_block112.l(nodes);
			t112 = claim_space(nodes);
			if (if_block113) if_block113.l(nodes);
			t113 = claim_space(nodes);
			if (if_block114) if_block114.l(nodes);
			t114 = claim_space(nodes);
			if (if_block115) if_block115.l(nodes);
			if_block115_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, t6, anchor);
			if (if_block7) if_block7.m(target, anchor);
			insert_hydration(target, t7, anchor);
			if (if_block8) if_block8.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block9) if_block9.m(target, anchor);
			insert_hydration(target, t9, anchor);
			if (if_block10) if_block10.m(target, anchor);
			insert_hydration(target, t10, anchor);
			if (if_block11) if_block11.m(target, anchor);
			insert_hydration(target, t11, anchor);
			if (if_block12) if_block12.m(target, anchor);
			insert_hydration(target, t12, anchor);
			if (if_block13) if_block13.m(target, anchor);
			insert_hydration(target, t13, anchor);
			if (if_block14) if_block14.m(target, anchor);
			insert_hydration(target, t14, anchor);
			if (if_block15) if_block15.m(target, anchor);
			insert_hydration(target, t15, anchor);
			if (if_block16) if_block16.m(target, anchor);
			insert_hydration(target, t16, anchor);
			if (if_block17) if_block17.m(target, anchor);
			insert_hydration(target, t17, anchor);
			if (if_block18) if_block18.m(target, anchor);
			insert_hydration(target, t18, anchor);
			if (if_block19) if_block19.m(target, anchor);
			insert_hydration(target, t19, anchor);
			if (if_block20) if_block20.m(target, anchor);
			insert_hydration(target, t20, anchor);
			if (if_block21) if_block21.m(target, anchor);
			insert_hydration(target, t21, anchor);
			if (if_block22) if_block22.m(target, anchor);
			insert_hydration(target, t22, anchor);
			if (if_block23) if_block23.m(target, anchor);
			insert_hydration(target, t23, anchor);
			if (if_block24) if_block24.m(target, anchor);
			insert_hydration(target, t24, anchor);
			if (if_block25) if_block25.m(target, anchor);
			insert_hydration(target, t25, anchor);
			if (if_block26) if_block26.m(target, anchor);
			insert_hydration(target, t26, anchor);
			if (if_block27) if_block27.m(target, anchor);
			insert_hydration(target, t27, anchor);
			if (if_block28) if_block28.m(target, anchor);
			insert_hydration(target, t28, anchor);
			if (if_block29) if_block29.m(target, anchor);
			insert_hydration(target, t29, anchor);
			if (if_block30) if_block30.m(target, anchor);
			insert_hydration(target, t30, anchor);
			if (if_block31) if_block31.m(target, anchor);
			insert_hydration(target, t31, anchor);
			if (if_block32) if_block32.m(target, anchor);
			insert_hydration(target, t32, anchor);
			if (if_block33) if_block33.m(target, anchor);
			insert_hydration(target, t33, anchor);
			if (if_block34) if_block34.m(target, anchor);
			insert_hydration(target, t34, anchor);
			if (if_block35) if_block35.m(target, anchor);
			insert_hydration(target, t35, anchor);
			if (if_block36) if_block36.m(target, anchor);
			insert_hydration(target, t36, anchor);
			if (if_block37) if_block37.m(target, anchor);
			insert_hydration(target, t37, anchor);
			if (if_block38) if_block38.m(target, anchor);
			insert_hydration(target, t38, anchor);
			if (if_block39) if_block39.m(target, anchor);
			insert_hydration(target, t39, anchor);
			if (if_block40) if_block40.m(target, anchor);
			insert_hydration(target, t40, anchor);
			if (if_block41) if_block41.m(target, anchor);
			insert_hydration(target, t41, anchor);
			if (if_block42) if_block42.m(target, anchor);
			insert_hydration(target, t42, anchor);
			if (if_block43) if_block43.m(target, anchor);
			insert_hydration(target, t43, anchor);
			if (if_block44) if_block44.m(target, anchor);
			insert_hydration(target, t44, anchor);
			if (if_block45) if_block45.m(target, anchor);
			insert_hydration(target, t45, anchor);
			if (if_block46) if_block46.m(target, anchor);
			insert_hydration(target, t46, anchor);
			if (if_block47) if_block47.m(target, anchor);
			insert_hydration(target, t47, anchor);
			if (if_block48) if_block48.m(target, anchor);
			insert_hydration(target, t48, anchor);
			if (if_block49) if_block49.m(target, anchor);
			insert_hydration(target, t49, anchor);
			if (if_block50) if_block50.m(target, anchor);
			insert_hydration(target, t50, anchor);
			if (if_block51) if_block51.m(target, anchor);
			insert_hydration(target, t51, anchor);
			if (if_block52) if_block52.m(target, anchor);
			insert_hydration(target, t52, anchor);
			if (if_block53) if_block53.m(target, anchor);
			insert_hydration(target, t53, anchor);
			if (if_block54) if_block54.m(target, anchor);
			insert_hydration(target, t54, anchor);
			if (if_block55) if_block55.m(target, anchor);
			insert_hydration(target, t55, anchor);
			if (if_block56) if_block56.m(target, anchor);
			insert_hydration(target, t56, anchor);
			if (if_block57) if_block57.m(target, anchor);
			insert_hydration(target, t57, anchor);
			if (if_block58) if_block58.m(target, anchor);
			insert_hydration(target, t58, anchor);
			if (if_block59) if_block59.m(target, anchor);
			insert_hydration(target, t59, anchor);
			if (if_block60) if_block60.m(target, anchor);
			insert_hydration(target, t60, anchor);
			if (if_block61) if_block61.m(target, anchor);
			insert_hydration(target, t61, anchor);
			if (if_block62) if_block62.m(target, anchor);
			insert_hydration(target, t62, anchor);
			if (if_block63) if_block63.m(target, anchor);
			insert_hydration(target, t63, anchor);
			if (if_block64) if_block64.m(target, anchor);
			insert_hydration(target, t64, anchor);
			if (if_block65) if_block65.m(target, anchor);
			insert_hydration(target, t65, anchor);
			if (if_block66) if_block66.m(target, anchor);
			insert_hydration(target, t66, anchor);
			if (if_block67) if_block67.m(target, anchor);
			insert_hydration(target, t67, anchor);
			if (if_block68) if_block68.m(target, anchor);
			insert_hydration(target, t68, anchor);
			if (if_block69) if_block69.m(target, anchor);
			insert_hydration(target, t69, anchor);
			if (if_block70) if_block70.m(target, anchor);
			insert_hydration(target, t70, anchor);
			if (if_block71) if_block71.m(target, anchor);
			insert_hydration(target, t71, anchor);
			if (if_block72) if_block72.m(target, anchor);
			insert_hydration(target, t72, anchor);
			if (if_block73) if_block73.m(target, anchor);
			insert_hydration(target, t73, anchor);
			if (if_block74) if_block74.m(target, anchor);
			insert_hydration(target, t74, anchor);
			if (if_block75) if_block75.m(target, anchor);
			insert_hydration(target, t75, anchor);
			if (if_block76) if_block76.m(target, anchor);
			insert_hydration(target, t76, anchor);
			if (if_block77) if_block77.m(target, anchor);
			insert_hydration(target, t77, anchor);
			if (if_block78) if_block78.m(target, anchor);
			insert_hydration(target, t78, anchor);
			if (if_block79) if_block79.m(target, anchor);
			insert_hydration(target, t79, anchor);
			if (if_block80) if_block80.m(target, anchor);
			insert_hydration(target, t80, anchor);
			if (if_block81) if_block81.m(target, anchor);
			insert_hydration(target, t81, anchor);
			if (if_block82) if_block82.m(target, anchor);
			insert_hydration(target, t82, anchor);
			if (if_block83) if_block83.m(target, anchor);
			insert_hydration(target, t83, anchor);
			if (if_block84) if_block84.m(target, anchor);
			insert_hydration(target, t84, anchor);
			if (if_block85) if_block85.m(target, anchor);
			insert_hydration(target, t85, anchor);
			if (if_block86) if_block86.m(target, anchor);
			insert_hydration(target, t86, anchor);
			if (if_block87) if_block87.m(target, anchor);
			insert_hydration(target, t87, anchor);
			if (if_block88) if_block88.m(target, anchor);
			insert_hydration(target, t88, anchor);
			if (if_block89) if_block89.m(target, anchor);
			insert_hydration(target, t89, anchor);
			if (if_block90) if_block90.m(target, anchor);
			insert_hydration(target, t90, anchor);
			if (if_block91) if_block91.m(target, anchor);
			insert_hydration(target, t91, anchor);
			if (if_block92) if_block92.m(target, anchor);
			insert_hydration(target, t92, anchor);
			if (if_block93) if_block93.m(target, anchor);
			insert_hydration(target, t93, anchor);
			if (if_block94) if_block94.m(target, anchor);
			insert_hydration(target, t94, anchor);
			if (if_block95) if_block95.m(target, anchor);
			insert_hydration(target, t95, anchor);
			if (if_block96) if_block96.m(target, anchor);
			insert_hydration(target, t96, anchor);
			if (if_block97) if_block97.m(target, anchor);
			insert_hydration(target, t97, anchor);
			if (if_block98) if_block98.m(target, anchor);
			insert_hydration(target, t98, anchor);
			if (if_block99) if_block99.m(target, anchor);
			insert_hydration(target, t99, anchor);
			if (if_block100) if_block100.m(target, anchor);
			insert_hydration(target, t100, anchor);
			if (if_block101) if_block101.m(target, anchor);
			insert_hydration(target, t101, anchor);
			if (if_block102) if_block102.m(target, anchor);
			insert_hydration(target, t102, anchor);
			if (if_block103) if_block103.m(target, anchor);
			insert_hydration(target, t103, anchor);
			if (if_block104) if_block104.m(target, anchor);
			insert_hydration(target, t104, anchor);
			if (if_block105) if_block105.m(target, anchor);
			insert_hydration(target, t105, anchor);
			if (if_block106) if_block106.m(target, anchor);
			insert_hydration(target, t106, anchor);
			if (if_block107) if_block107.m(target, anchor);
			insert_hydration(target, t107, anchor);
			if (if_block108) if_block108.m(target, anchor);
			insert_hydration(target, t108, anchor);
			if (if_block109) if_block109.m(target, anchor);
			insert_hydration(target, t109, anchor);
			if (if_block110) if_block110.m(target, anchor);
			insert_hydration(target, t110, anchor);
			if (if_block111) if_block111.m(target, anchor);
			insert_hydration(target, t111, anchor);
			if (if_block112) if_block112.m(target, anchor);
			insert_hydration(target, t112, anchor);
			if (if_block113) if_block113.m(target, anchor);
			insert_hydration(target, t113, anchor);
			if (if_block114) if_block114.m(target, anchor);
			insert_hydration(target, t114, anchor);
			if (if_block115) if_block115.m(target, anchor);
			insert_hydration(target, if_block115_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*name*/ ctx[0] == 'icon-3d-model') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_115(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*name*/ ctx[0] == 'icon-accordion') {
				if (if_block1) ; else {
					if_block1 = create_if_block_114();
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*name*/ ctx[0] == 'icon-account') {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_113(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*name*/ ctx[0] == 'icon-amazon_payments') {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_112(ctx);
					if_block3.c();
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*name*/ ctx[0] == 'icon-american_express') {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_111(ctx);
					if_block4.c();
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*name*/ ctx[0] == 'icon-apple_pay') {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_110(ctx);
					if_block5.c();
					if_block5.m(t5.parentNode, t5);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*name*/ ctx[0] == 'icon-arrow-left') {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_109(ctx);
					if_block6.c();
					if_block6.m(t6.parentNode, t6);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (/*name*/ ctx[0] == 'icon-arrow-right') {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_108(ctx);
					if_block7.c();
					if_block7.m(t7.parentNode, t7);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (/*name*/ ctx[0] == 'icon-arrow') {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_107(ctx);
					if_block8.c();
					if_block8.m(t8.parentNode, t8);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (/*name*/ ctx[0] == 'icon-bitcoin') {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block_106(ctx);
					if_block9.c();
					if_block9.m(t9.parentNode, t9);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (/*name*/ ctx[0] == 'icon-caret') {
				if (if_block10) {
					if_block10.p(ctx, dirty);
				} else {
					if_block10 = create_if_block_105(ctx);
					if_block10.c();
					if_block10.m(t10.parentNode, t10);
				}
			} else if (if_block10) {
				if_block10.d(1);
				if_block10 = null;
			}

			if (/*name*/ ctx[0] == 'icon-cart-empty') {
				if (if_block11) {
					if_block11.p(ctx, dirty);
				} else {
					if_block11 = create_if_block_104(ctx);
					if_block11.c();
					if_block11.m(t11.parentNode, t11);
				}
			} else if (if_block11) {
				if_block11.d(1);
				if_block11 = null;
			}

			if (/*name*/ ctx[0] == 'icon-cart') {
				if (if_block12) {
					if_block12.p(ctx, dirty);
				} else {
					if_block12 = create_if_block_103(ctx);
					if_block12.c();
					if_block12.m(t12.parentNode, t12);
				}
			} else if (if_block12) {
				if_block12.d(1);
				if_block12 = null;
			}

			if (/*name*/ ctx[0] == 'icon-checkmark') {
				if (if_block13) {
					if_block13.p(ctx, dirty);
				} else {
					if_block13 = create_if_block_102(ctx);
					if_block13.c();
					if_block13.m(t13.parentNode, t13);
				}
			} else if (if_block13) {
				if_block13.d(1);
				if_block13 = null;
			}

			if (/*name*/ ctx[0] == 'icon-chevron-down') {
				if (if_block14) {
					if_block14.p(ctx, dirty);
				} else {
					if_block14 = create_if_block_101(ctx);
					if_block14.c();
					if_block14.m(t14.parentNode, t14);
				}
			} else if (if_block14) {
				if_block14.d(1);
				if_block14 = null;
			}

			if (/*name*/ ctx[0] == 'icon-chevron-left') {
				if (if_block15) {
					if_block15.p(ctx, dirty);
				} else {
					if_block15 = create_if_block_100(ctx);
					if_block15.c();
					if_block15.m(t15.parentNode, t15);
				}
			} else if (if_block15) {
				if_block15.d(1);
				if_block15 = null;
			}

			if (/*name*/ ctx[0] == 'icon-chevron-right') {
				if (if_block16) {
					if_block16.p(ctx, dirty);
				} else {
					if_block16 = create_if_block_99(ctx);
					if_block16.c();
					if_block16.m(t16.parentNode, t16);
				}
			} else if (if_block16) {
				if_block16.d(1);
				if_block16 = null;
			}

			if (/*name*/ ctx[0] == 'icon-chevron-up') {
				if (if_block17) {
					if_block17.p(ctx, dirty);
				} else {
					if_block17 = create_if_block_98(ctx);
					if_block17.c();
					if_block17.m(t17.parentNode, t17);
				}
			} else if (if_block17) {
				if_block17.d(1);
				if_block17 = null;
			}

			if (/*name*/ ctx[0] == 'icon-cirrus') {
				if (if_block18) {
					if_block18.p(ctx, dirty);
				} else {
					if_block18 = create_if_block_97(ctx);
					if_block18.c();
					if_block18.m(t18.parentNode, t18);
				}
			} else if (if_block18) {
				if_block18.d(1);
				if_block18 = null;
			}

			if (/*name*/ ctx[0] == 'icon-clipboard') {
				if (if_block19) {
					if_block19.p(ctx, dirty);
				} else {
					if_block19 = create_if_block_96(ctx);
					if_block19.c();
					if_block19.m(t19.parentNode, t19);
				}
			} else if (if_block19) {
				if_block19.d(1);
				if_block19 = null;
			}

			if (/*name*/ ctx[0] == 'icon-close-small') {
				if (if_block20) {
					if_block20.p(ctx, dirty);
				} else {
					if_block20 = create_if_block_95(ctx);
					if_block20.c();
					if_block20.m(t20.parentNode, t20);
				}
			} else if (if_block20) {
				if_block20.d(1);
				if_block20 = null;
			}

			if (/*name*/ ctx[0] == 'icon-close') {
				if (if_block21) {
					if_block21.p(ctx, dirty);
				} else {
					if_block21 = create_if_block_94(ctx);
					if_block21.c();
					if_block21.m(t21.parentNode, t21);
				}
			} else if (if_block21) {
				if_block21.d(1);
				if_block21 = null;
			}

			if (/*name*/ ctx[0] == 'icon-dankort') {
				if (if_block22) {
					if_block22.p(ctx, dirty);
				} else {
					if_block22 = create_if_block_93(ctx);
					if_block22.c();
					if_block22.m(t22.parentNode, t22);
				}
			} else if (if_block22) {
				if_block22.d(1);
				if_block22 = null;
			}

			if (/*name*/ ctx[0] == 'icon-diners_club') {
				if (if_block23) {
					if_block23.p(ctx, dirty);
				} else {
					if_block23 = create_if_block_92(ctx);
					if_block23.c();
					if_block23.m(t23.parentNode, t23);
				}
			} else if (if_block23) {
				if_block23.d(1);
				if_block23 = null;
			}

			if (/*name*/ ctx[0] == 'icon-discount') {
				if (if_block24) {
					if_block24.p(ctx, dirty);
				} else {
					if_block24 = create_if_block_91(ctx);
					if_block24.c();
					if_block24.m(t24.parentNode, t24);
				}
			} else if (if_block24) {
				if_block24.d(1);
				if_block24 = null;
			}

			if (/*name*/ ctx[0] == 'icon-discover') {
				if (if_block25) {
					if_block25.p(ctx, dirty);
				} else {
					if_block25 = create_if_block_90(ctx);
					if_block25.c();
					if_block25.m(t25.parentNode, t25);
				}
			} else if (if_block25) {
				if_block25.d(1);
				if_block25 = null;
			}

			if (/*name*/ ctx[0] == 'icon-dogecoin') {
				if (if_block26) {
					if_block26.p(ctx, dirty);
				} else {
					if_block26 = create_if_block_89(ctx);
					if_block26.c();
					if_block26.m(t26.parentNode, t26);
				}
			} else if (if_block26) {
				if_block26.d(1);
				if_block26 = null;
			}

			if (/*name*/ ctx[0] == 'icon-dwolla') {
				if (if_block27) {
					if_block27.p(ctx, dirty);
				} else {
					if_block27 = create_if_block_88(ctx);
					if_block27.c();
					if_block27.m(t27.parentNode, t27);
				}
			} else if (if_block27) {
				if_block27.d(1);
				if_block27 = null;
			}

			if (/*name*/ ctx[0] == 'icon-error') {
				if (if_block28) {
					if_block28.p(ctx, dirty);
				} else {
					if_block28 = create_if_block_87(ctx);
					if_block28.c();
					if_block28.m(t28.parentNode, t28);
				}
			} else if (if_block28) {
				if_block28.d(1);
				if_block28 = null;
			}

			if (/*name*/ ctx[0] == 'icon-facebook') {
				if (if_block29) {
					if_block29.p(ctx, dirty);
				} else {
					if_block29 = create_if_block_86(ctx);
					if_block29.c();
					if_block29.m(t29.parentNode, t29);
				}
			} else if (if_block29) {
				if_block29.d(1);
				if_block29 = null;
			}

			if (/*name*/ ctx[0] == 'icon-filter') {
				if (if_block30) {
					if_block30.p(ctx, dirty);
				} else {
					if_block30 = create_if_block_85(ctx);
					if_block30.c();
					if_block30.m(t30.parentNode, t30);
				}
			} else if (if_block30) {
				if_block30.d(1);
				if_block30 = null;
			}

			if (/*name*/ ctx[0] == 'icon-forbrugsforeningen') {
				if (if_block31) {
					if_block31.p(ctx, dirty);
				} else {
					if_block31 = create_if_block_84(ctx);
					if_block31.c();
					if_block31.m(t31.parentNode, t31);
				}
			} else if (if_block31) {
				if_block31.d(1);
				if_block31 = null;
			}

			if (/*name*/ ctx[0] == 'icon-garbage') {
				if (if_block32) {
					if_block32.p(ctx, dirty);
				} else {
					if_block32 = create_if_block_83(ctx);
					if_block32.c();
					if_block32.m(t32.parentNode, t32);
				}
			} else if (if_block32) {
				if_block32.d(1);
				if_block32 = null;
			}

			if (/*name*/ ctx[0] == 'icon-hamburger') {
				if (if_block33) {
					if_block33.p(ctx, dirty);
				} else {
					if_block33 = create_if_block_82(ctx);
					if_block33.c();
					if_block33.m(t33.parentNode, t33);
				}
			} else if (if_block33) {
				if_block33.d(1);
				if_block33 = null;
			}

			if (/*name*/ ctx[0] == 'icon-instagram') {
				if (if_block34) {
					if_block34.p(ctx, dirty);
				} else {
					if_block34 = create_if_block_81(ctx);
					if_block34.c();
					if_block34.m(t34.parentNode, t34);
				}
			} else if (if_block34) {
				if_block34.d(1);
				if_block34 = null;
			}

			if (/*name*/ ctx[0] == 'icon-interac') {
				if (if_block35) {
					if_block35.p(ctx, dirty);
				} else {
					if_block35 = create_if_block_80(ctx);
					if_block35.c();
					if_block35.m(t35.parentNode, t35);
				}
			} else if (if_block35) {
				if_block35.d(1);
				if_block35 = null;
			}

			if (/*name*/ ctx[0] == 'icon-jcb') {
				if (if_block36) {
					if_block36.p(ctx, dirty);
				} else {
					if_block36 = create_if_block_79(ctx);
					if_block36.c();
					if_block36.m(t36.parentNode, t36);
				}
			} else if (if_block36) {
				if_block36.d(1);
				if_block36 = null;
			}

			if (/*name*/ ctx[0] == 'icon-klarna') {
				if (if_block37) {
					if_block37.p(ctx, dirty);
				} else {
					if_block37 = create_if_block_78(ctx);
					if_block37.c();
					if_block37.m(t37.parentNode, t37);
				}
			} else if (if_block37) {
				if_block37.d(1);
				if_block37 = null;
			}

			if (/*name*/ ctx[0] == 'icon-laser') {
				if (if_block38) {
					if_block38.p(ctx, dirty);
				} else {
					if_block38 = create_if_block_77(ctx);
					if_block38.c();
					if_block38.m(t38.parentNode, t38);
				}
			} else if (if_block38) {
				if_block38.d(1);
				if_block38 = null;
			}

			if (/*name*/ ctx[0] == 'icon-litecoin') {
				if (if_block39) {
					if_block39.p(ctx, dirty);
				} else {
					if_block39 = create_if_block_76(ctx);
					if_block39.c();
					if_block39.m(t39.parentNode, t39);
				}
			} else if (if_block39) {
				if_block39.d(1);
				if_block39 = null;
			}

			if (/*name*/ ctx[0] == 'icon-lock') {
				if (if_block40) {
					if_block40.p(ctx, dirty);
				} else {
					if_block40 = create_if_block_75(ctx);
					if_block40.c();
					if_block40.m(t40.parentNode, t40);
				}
			} else if (if_block40) {
				if_block40.d(1);
				if_block40 = null;
			}

			if (/*name*/ ctx[0] == 'icon-login') {
				if (if_block41) {
					if_block41.p(ctx, dirty);
				} else {
					if_block41 = create_if_block_74(ctx);
					if_block41.c();
					if_block41.m(t41.parentNode, t41);
				}
			} else if (if_block41) {
				if_block41.d(1);
				if_block41 = null;
			}

			if (/*name*/ ctx[0] == 'icon-maestro') {
				if (if_block42) {
					if_block42.p(ctx, dirty);
				} else {
					if_block42 = create_if_block_73(ctx);
					if_block42.c();
					if_block42.m(t42.parentNode, t42);
				}
			} else if (if_block42) {
				if_block42.d(1);
				if_block42 = null;
			}

			if (/*name*/ ctx[0] == 'icon-master') {
				if (if_block43) {
					if_block43.p(ctx, dirty);
				} else {
					if_block43 = create_if_block_72(ctx);
					if_block43.c();
					if_block43.m(t43.parentNode, t43);
				}
			} else if (if_block43) {
				if_block43.d(1);
				if_block43 = null;
			}

			if (/*name*/ ctx[0] == 'icon-minus') {
				if (if_block44) {
					if_block44.p(ctx, dirty);
				} else {
					if_block44 = create_if_block_71(ctx);
					if_block44.c();
					if_block44.m(t44.parentNode, t44);
				}
			} else if (if_block44) {
				if_block44.d(1);
				if_block44 = null;
			}

			if (/*name*/ ctx[0] == 'icon-padlock') {
				if (if_block45) {
					if_block45.p(ctx, dirty);
				} else {
					if_block45 = create_if_block_70(ctx);
					if_block45.c();
					if_block45.m(t45.parentNode, t45);
				}
			} else if (if_block45) {
				if_block45.d(1);
				if_block45 = null;
			}

			if (/*name*/ ctx[0] == 'icon-pause') {
				if (if_block46) {
					if_block46.p(ctx, dirty);
				} else {
					if_block46 = create_if_block_69(ctx);
					if_block46.c();
					if_block46.m(t46.parentNode, t46);
				}
			} else if (if_block46) {
				if_block46.d(1);
				if_block46 = null;
			}

			if (/*name*/ ctx[0] == 'icon-paypal') {
				if (if_block47) {
					if_block47.p(ctx, dirty);
				} else {
					if_block47 = create_if_block_68(ctx);
					if_block47.c();
					if_block47.m(t47.parentNode, t47);
				}
			} else if (if_block47) {
				if_block47.d(1);
				if_block47 = null;
			}

			if (/*name*/ ctx[0] == 'icon-pin') {
				if (if_block48) {
					if_block48.p(ctx, dirty);
				} else {
					if_block48 = create_if_block_67(ctx);
					if_block48.c();
					if_block48.m(t48.parentNode, t48);
				}
			} else if (if_block48) {
				if_block48.d(1);
				if_block48 = null;
			}

			if (/*name*/ ctx[0] == 'icon-pinterest') {
				if (if_block49) {
					if_block49.p(ctx, dirty);
				} else {
					if_block49 = create_if_block_66(ctx);
					if_block49.c();
					if_block49.m(t49.parentNode, t49);
				}
			} else if (if_block49) {
				if_block49.d(1);
				if_block49 = null;
			}

			if (/*name*/ ctx[0] == 'icon-play-video') {
				if (if_block50) {
					if_block50.p(ctx, dirty);
				} else {
					if_block50 = create_if_block_65(ctx);
					if_block50.c();
					if_block50.m(t50.parentNode, t50);
				}
			} else if (if_block50) {
				if_block50.d(1);
				if_block50 = null;
			}

			if (/*name*/ ctx[0] == 'icon-play') {
				if (if_block51) {
					if_block51.p(ctx, dirty);
				} else {
					if_block51 = create_if_block_64(ctx);
					if_block51.c();
					if_block51.m(t51.parentNode, t51);
				}
			} else if (if_block51) {
				if_block51.d(1);
				if_block51 = null;
			}

			if (/*name*/ ctx[0] == 'icon-plus') {
				if (if_block52) {
					if_block52.p(ctx, dirty);
				} else {
					if_block52 = create_if_block_63(ctx);
					if_block52.c();
					if_block52.m(t52.parentNode, t52);
				}
			} else if (if_block52) {
				if_block52.d(1);
				if_block52 = null;
			}

			if (/*name*/ ctx[0] == 'icon-quote') {
				if (if_block53) {
					if_block53.p(ctx, dirty);
				} else {
					if_block53 = create_if_block_62(ctx);
					if_block53.c();
					if_block53.m(t53.parentNode, t53);
				}
			} else if (if_block53) {
				if_block53.d(1);
				if_block53 = null;
			}

			if (/*name*/ ctx[0] == 'icon-remove') {
				if (if_block54) {
					if_block54.p(ctx, dirty);
				} else {
					if_block54 = create_if_block_61(ctx);
					if_block54.c();
					if_block54.m(t54.parentNode, t54);
				}
			} else if (if_block54) {
				if_block54.d(1);
				if_block54 = null;
			}

			if (/*name*/ ctx[0] == 'icon-rss') {
				if (if_block55) {
					if_block55.p(ctx, dirty);
				} else {
					if_block55 = create_if_block_60(ctx);
					if_block55.c();
					if_block55.m(t55.parentNode, t55);
				}
			} else if (if_block55) {
				if_block55.d(1);
				if_block55 = null;
			}

			if (/*name*/ ctx[0] == 'icon-search') {
				if (if_block56) {
					if_block56.p(ctx, dirty);
				} else {
					if_block56 = create_if_block_59(ctx);
					if_block56.c();
					if_block56.m(t56.parentNode, t56);
				}
			} else if (if_block56) {
				if_block56.d(1);
				if_block56 = null;
			}

			if (/*name*/ ctx[0] == 'icon-share') {
				if (if_block57) {
					if_block57.p(ctx, dirty);
				} else {
					if_block57 = create_if_block_58(ctx);
					if_block57.c();
					if_block57.m(t57.parentNode, t57);
				}
			} else if (if_block57) {
				if_block57.d(1);
				if_block57 = null;
			}

			if (/*name*/ ctx[0] == 'icon-shopify-logo') {
				if (if_block58) {
					if_block58.p(ctx, dirty);
				} else {
					if_block58 = create_if_block_57(ctx);
					if_block58.c();
					if_block58.m(t58.parentNode, t58);
				}
			} else if (if_block58) {
				if_block58.d(1);
				if_block58 = null;
			}

			if (/*name*/ ctx[0] == 'icon-shopify_pay') {
				if (if_block59) {
					if_block59.p(ctx, dirty);
				} else {
					if_block59 = create_if_block_56(ctx);
					if_block59.c();
					if_block59.m(t59.parentNode, t59);
				}
			} else if (if_block59) {
				if_block59.d(1);
				if_block59 = null;
			}

			if (/*name*/ ctx[0] == 'icon-snapchat') {
				if (if_block60) {
					if_block60.p(ctx, dirty);
				} else {
					if_block60 = create_if_block_55(ctx);
					if_block60.c();
					if_block60.m(t60.parentNode, t60);
				}
			} else if (if_block60) {
				if_block60.d(1);
				if_block60 = null;
			}

			if (/*name*/ ctx[0] == 'icon-spinner') {
				if (if_block61) {
					if_block61.p(ctx, dirty);
				} else {
					if_block61 = create_if_block_54(ctx);
					if_block61.c();
					if_block61.m(t61.parentNode, t61);
				}
			} else if (if_block61) {
				if_block61.d(1);
				if_block61 = null;
			}

			if (/*name*/ ctx[0] == 'icon-stripe') {
				if (if_block62) {
					if_block62.p(ctx, dirty);
				} else {
					if_block62 = create_if_block_53(ctx);
					if_block62.c();
					if_block62.m(t62.parentNode, t62);
				}
			} else if (if_block62) {
				if_block62.d(1);
				if_block62 = null;
			}

			if (/*name*/ ctx[0] == 'icon-success') {
				if (if_block63) {
					if_block63.p(ctx, dirty);
				} else {
					if_block63 = create_if_block_52(ctx);
					if_block63.c();
					if_block63.m(t63.parentNode, t63);
				}
			} else if (if_block63) {
				if_block63.d(1);
				if_block63 = null;
			}

			if (/*name*/ ctx[0] == 'icon-tick') {
				if (if_block64) {
					if_block64.p(ctx, dirty);
				} else {
					if_block64 = create_if_block_51(ctx);
					if_block64.c();
					if_block64.m(t64.parentNode, t64);
				}
			} else if (if_block64) {
				if_block64.d(1);
				if_block64 = null;
			}

			if (/*name*/ ctx[0] == 'icon-tiktok') {
				if (if_block65) {
					if_block65.p(ctx, dirty);
				} else {
					if_block65 = create_if_block_50(ctx);
					if_block65.c();
					if_block65.m(t65.parentNode, t65);
				}
			} else if (if_block65) {
				if_block65.d(1);
				if_block65 = null;
			}

			if (/*name*/ ctx[0] == 'icon-tumblr') {
				if (if_block66) {
					if_block66.p(ctx, dirty);
				} else {
					if_block66 = create_if_block_49(ctx);
					if_block66.c();
					if_block66.m(t66.parentNode, t66);
				}
			} else if (if_block66) {
				if_block66.d(1);
				if_block66 = null;
			}

			if (/*name*/ ctx[0] == 'icon-twitter') {
				if (if_block67) {
					if_block67.p(ctx, dirty);
				} else {
					if_block67 = create_if_block_48(ctx);
					if_block67.c();
					if_block67.m(t67.parentNode, t67);
				}
			} else if (if_block67) {
				if_block67.d(1);
				if_block67 = null;
			}

			if (/*name*/ ctx[0] == 'icon-unavailable') {
				if (if_block68) {
					if_block68.p(ctx, dirty);
				} else {
					if_block68 = create_if_block_47(ctx);
					if_block68.c();
					if_block68.m(t68.parentNode, t68);
				}
			} else if (if_block68) {
				if_block68.d(1);
				if_block68 = null;
			}

			if (/*name*/ ctx[0] == 'icon-vimeo') {
				if (if_block69) {
					if_block69.p(ctx, dirty);
				} else {
					if_block69 = create_if_block_46(ctx);
					if_block69.c();
					if_block69.m(t69.parentNode, t69);
				}
			} else if (if_block69) {
				if_block69.d(1);
				if_block69 = null;
			}

			if (/*name*/ ctx[0] == 'icon-visa') {
				if (if_block70) {
					if_block70.p(ctx, dirty);
				} else {
					if_block70 = create_if_block_45(ctx);
					if_block70.c();
					if_block70.m(t70.parentNode, t70);
				}
			} else if (if_block70) {
				if_block70.d(1);
				if_block70 = null;
			}

			if (/*name*/ ctx[0] == 'icon-youtube') {
				if (if_block71) {
					if_block71.p(ctx, dirty);
				} else {
					if_block71 = create_if_block_44(ctx);
					if_block71.c();
					if_block71.m(t71.parentNode, t71);
				}
			} else if (if_block71) {
				if_block71.d(1);
				if_block71 = null;
			}

			if (/*name*/ ctx[0] == 'icon-zoom') {
				if (if_block72) {
					if_block72.p(ctx, dirty);
				} else {
					if_block72 = create_if_block_43(ctx);
					if_block72.c();
					if_block72.m(t72.parentNode, t72);
				}
			} else if (if_block72) {
				if_block72.d(1);
				if_block72 = null;
			}

			if (/*name*/ ctx[0] == 'apple') {
				if (if_block73) {
					if_block73.p(ctx, dirty);
				} else {
					if_block73 = create_if_block_42(ctx);
					if_block73.c();
					if_block73.m(t73.parentNode, t73);
				}
			} else if (if_block73) {
				if_block73.d(1);
				if_block73 = null;
			}

			if (/*name*/ ctx[0] == 'banana') {
				if (if_block74) {
					if_block74.p(ctx, dirty);
				} else {
					if_block74 = create_if_block_41(ctx);
					if_block74.c();
					if_block74.m(t74.parentNode, t74);
				}
			} else if (if_block74) {
				if_block74.d(1);
				if_block74 = null;
			}

			if (/*name*/ ctx[0] == 'bottle') {
				if (if_block75) {
					if_block75.p(ctx, dirty);
				} else {
					if_block75 = create_if_block_40(ctx);
					if_block75.c();
					if_block75.m(t75.parentNode, t75);
				}
			} else if (if_block75) {
				if_block75.d(1);
				if_block75 = null;
			}

			if (/*name*/ ctx[0] == 'box') {
				if (if_block76) {
					if_block76.p(ctx, dirty);
				} else {
					if_block76 = create_if_block_39(ctx);
					if_block76.c();
					if_block76.m(t76.parentNode, t76);
				}
			} else if (if_block76) {
				if_block76.d(1);
				if_block76 = null;
			}

			if (/*name*/ ctx[0] == 'carrot') {
				if (if_block77) {
					if_block77.p(ctx, dirty);
				} else {
					if_block77 = create_if_block_38(ctx);
					if_block77.c();
					if_block77.m(t77.parentNode, t77);
				}
			} else if (if_block77) {
				if_block77.d(1);
				if_block77 = null;
			}

			if (/*name*/ ctx[0] == 'chat_bubble') {
				if (if_block78) {
					if_block78.p(ctx, dirty);
				} else {
					if_block78 = create_if_block_37(ctx);
					if_block78.c();
					if_block78.m(t78.parentNode, t78);
				}
			} else if (if_block78) {
				if_block78.d(1);
				if_block78 = null;
			}

			if (/*name*/ ctx[0] == 'check_mark') {
				if (if_block79) {
					if_block79.p(ctx, dirty);
				} else {
					if_block79 = create_if_block_36(ctx);
					if_block79.c();
					if_block79.m(t79.parentNode, t79);
				}
			} else if (if_block79) {
				if_block79.d(1);
				if_block79 = null;
			}

			if (/*name*/ ctx[0] == 'clipboard') {
				if (if_block80) {
					if_block80.p(ctx, dirty);
				} else {
					if_block80 = create_if_block_35(ctx);
					if_block80.c();
					if_block80.m(t80.parentNode, t80);
				}
			} else if (if_block80) {
				if_block80.d(1);
				if_block80 = null;
			}

			if (/*name*/ ctx[0] == 'dairy') {
				if (if_block81) {
					if_block81.p(ctx, dirty);
				} else {
					if_block81 = create_if_block_34(ctx);
					if_block81.c();
					if_block81.m(t81.parentNode, t81);
				}
			} else if (if_block81) {
				if_block81.d(1);
				if_block81 = null;
			}

			if (/*name*/ ctx[0] == 'dairy_free') {
				if (if_block82) {
					if_block82.p(ctx, dirty);
				} else {
					if_block82 = create_if_block_33(ctx);
					if_block82.c();
					if_block82.m(t82.parentNode, t82);
				}
			} else if (if_block82) {
				if_block82.d(1);
				if_block82 = null;
			}

			if (/*name*/ ctx[0] == 'dryer') {
				if (if_block83) {
					if_block83.p(ctx, dirty);
				} else {
					if_block83 = create_if_block_32(ctx);
					if_block83.c();
					if_block83.m(t83.parentNode, t83);
				}
			} else if (if_block83) {
				if_block83.d(1);
				if_block83 = null;
			}

			if (/*name*/ ctx[0] == 'eye') {
				if (if_block84) {
					if_block84.p(ctx, dirty);
				} else {
					if_block84 = create_if_block_31(ctx);
					if_block84.c();
					if_block84.m(t84.parentNode, t84);
				}
			} else if (if_block84) {
				if_block84.d(1);
				if_block84 = null;
			}

			if (/*name*/ ctx[0] == 'fire') {
				if (if_block85) {
					if_block85.p(ctx, dirty);
				} else {
					if_block85 = create_if_block_30(ctx);
					if_block85.c();
					if_block85.m(t85.parentNode, t85);
				}
			} else if (if_block85) {
				if_block85.d(1);
				if_block85 = null;
			}

			if (/*name*/ ctx[0] == 'gluten_free') {
				if (if_block86) {
					if_block86.p(ctx, dirty);
				} else {
					if_block86 = create_if_block_29(ctx);
					if_block86.c();
					if_block86.m(t86.parentNode, t86);
				}
			} else if (if_block86) {
				if_block86.d(1);
				if_block86 = null;
			}

			if (/*name*/ ctx[0] == 'heart') {
				if (if_block87) {
					if_block87.p(ctx, dirty);
				} else {
					if_block87 = create_if_block_28(ctx);
					if_block87.c();
					if_block87.m(t87.parentNode, t87);
				}
			} else if (if_block87) {
				if_block87.d(1);
				if_block87 = null;
			}

			if (/*name*/ ctx[0] == 'iron') {
				if (if_block88) {
					if_block88.p(ctx, dirty);
				} else {
					if_block88 = create_if_block_27(ctx);
					if_block88.c();
					if_block88.m(t88.parentNode, t88);
				}
			} else if (if_block88) {
				if_block88.d(1);
				if_block88 = null;
			}

			if (/*name*/ ctx[0] == 'leaf') {
				if (if_block89) {
					if_block89.p(ctx, dirty);
				} else {
					if_block89 = create_if_block_26(ctx);
					if_block89.c();
					if_block89.m(t89.parentNode, t89);
				}
			} else if (if_block89) {
				if_block89.d(1);
				if_block89 = null;
			}

			if (/*name*/ ctx[0] == 'leather') {
				if (if_block90) {
					if_block90.p(ctx, dirty);
				} else {
					if_block90 = create_if_block_25(ctx);
					if_block90.c();
					if_block90.m(t90.parentNode, t90);
				}
			} else if (if_block90) {
				if_block90.d(1);
				if_block90 = null;
			}

			if (/*name*/ ctx[0] == 'lightning_bolt') {
				if (if_block91) {
					if_block91.p(ctx, dirty);
				} else {
					if_block91 = create_if_block_24(ctx);
					if_block91.c();
					if_block91.m(t91.parentNode, t91);
				}
			} else if (if_block91) {
				if_block91.d(1);
				if_block91 = null;
			}

			if (/*name*/ ctx[0] == 'lipstick') {
				if (if_block92) {
					if_block92.p(ctx, dirty);
				} else {
					if_block92 = create_if_block_23(ctx);
					if_block92.c();
					if_block92.m(t92.parentNode, t92);
				}
			} else if (if_block92) {
				if_block92.d(1);
				if_block92 = null;
			}

			if (/*name*/ ctx[0] == 'lock') {
				if (if_block93) {
					if_block93.p(ctx, dirty);
				} else {
					if_block93 = create_if_block_22(ctx);
					if_block93.c();
					if_block93.m(t93.parentNode, t93);
				}
			} else if (if_block93) {
				if_block93.d(1);
				if_block93 = null;
			}

			if (/*name*/ ctx[0] == 'map_pin') {
				if (if_block94) {
					if_block94.p(ctx, dirty);
				} else {
					if_block94 = create_if_block_21(ctx);
					if_block94.c();
					if_block94.m(t94.parentNode, t94);
				}
			} else if (if_block94) {
				if_block94.d(1);
				if_block94 = null;
			}

			if (/*name*/ ctx[0] == 'nut_free') {
				if (if_block95) {
					if_block95.p(ctx, dirty);
				} else {
					if_block95 = create_if_block_20(ctx);
					if_block95.c();
					if_block95.m(t95.parentNode, t95);
				}
			} else if (if_block95) {
				if_block95.d(1);
				if_block95 = null;
			}

			if (/*name*/ ctx[0] == 'pants') {
				if (if_block96) {
					if_block96.p(ctx, dirty);
				} else {
					if_block96 = create_if_block_19(ctx);
					if_block96.c();
					if_block96.m(t96.parentNode, t96);
				}
			} else if (if_block96) {
				if_block96.d(1);
				if_block96 = null;
			}

			if (/*name*/ ctx[0] == 'paw_print') {
				if (if_block97) {
					if_block97.p(ctx, dirty);
				} else {
					if_block97 = create_if_block_18(ctx);
					if_block97.c();
					if_block97.m(t97.parentNode, t97);
				}
			} else if (if_block97) {
				if_block97.d(1);
				if_block97 = null;
			}

			if (/*name*/ ctx[0] == 'pepper') {
				if (if_block98) {
					if_block98.p(ctx, dirty);
				} else {
					if_block98 = create_if_block_17(ctx);
					if_block98.c();
					if_block98.m(t98.parentNode, t98);
				}
			} else if (if_block98) {
				if_block98.d(1);
				if_block98 = null;
			}

			if (/*name*/ ctx[0] == 'perfume') {
				if (if_block99) {
					if_block99.p(ctx, dirty);
				} else {
					if_block99 = create_if_block_16(ctx);
					if_block99.c();
					if_block99.m(t99.parentNode, t99);
				}
			} else if (if_block99) {
				if_block99.d(1);
				if_block99 = null;
			}

			if (/*name*/ ctx[0] == 'plane') {
				if (if_block100) {
					if_block100.p(ctx, dirty);
				} else {
					if_block100 = create_if_block_15(ctx);
					if_block100.c();
					if_block100.m(t100.parentNode, t100);
				}
			} else if (if_block100) {
				if_block100.d(1);
				if_block100 = null;
			}

			if (/*name*/ ctx[0] == 'plant') {
				if (if_block101) {
					if_block101.p(ctx, dirty);
				} else {
					if_block101 = create_if_block_14(ctx);
					if_block101.c();
					if_block101.m(t101.parentNode, t101);
				}
			} else if (if_block101) {
				if_block101.d(1);
				if_block101 = null;
			}

			if (/*name*/ ctx[0] == 'price_tag') {
				if (if_block102) {
					if_block102.p(ctx, dirty);
				} else {
					if_block102 = create_if_block_13(ctx);
					if_block102.c();
					if_block102.m(t102.parentNode, t102);
				}
			} else if (if_block102) {
				if_block102.d(1);
				if_block102 = null;
			}

			if (/*name*/ ctx[0] == 'question_mark') {
				if (if_block103) {
					if_block103.p(ctx, dirty);
				} else {
					if_block103 = create_if_block_12(ctx);
					if_block103.c();
					if_block103.m(t103.parentNode, t103);
				}
			} else if (if_block103) {
				if_block103.d(1);
				if_block103 = null;
			}

			if (/*name*/ ctx[0] == 'recycle') {
				if (if_block104) {
					if_block104.p(ctx, dirty);
				} else {
					if_block104 = create_if_block_11(ctx);
					if_block104.c();
					if_block104.m(t104.parentNode, t104);
				}
			} else if (if_block104) {
				if_block104.d(1);
				if_block104 = null;
			}

			if (/*name*/ ctx[0] == 'return') {
				if (if_block105) {
					if_block105.p(ctx, dirty);
				} else {
					if_block105 = create_if_block_10(ctx);
					if_block105.c();
					if_block105.m(t105.parentNode, t105);
				}
			} else if (if_block105) {
				if_block105.d(1);
				if_block105 = null;
			}

			if (/*name*/ ctx[0] == 'ruler') {
				if (if_block106) {
					if_block106.p(ctx, dirty);
				} else {
					if_block106 = create_if_block_9(ctx);
					if_block106.c();
					if_block106.m(t106.parentNode, t106);
				}
			} else if (if_block106) {
				if_block106.d(1);
				if_block106 = null;
			}

			if (/*name*/ ctx[0] == 'serving_dish') {
				if (if_block107) {
					if_block107.p(ctx, dirty);
				} else {
					if_block107 = create_if_block_8(ctx);
					if_block107.c();
					if_block107.m(t107.parentNode, t107);
				}
			} else if (if_block107) {
				if_block107.d(1);
				if_block107 = null;
			}

			if (/*name*/ ctx[0] == 'shirt') {
				if (if_block108) {
					if_block108.p(ctx, dirty);
				} else {
					if_block108 = create_if_block_7(ctx);
					if_block108.c();
					if_block108.m(t108.parentNode, t108);
				}
			} else if (if_block108) {
				if_block108.d(1);
				if_block108 = null;
			}

			if (/*name*/ ctx[0] == 'shoe') {
				if (if_block109) {
					if_block109.p(ctx, dirty);
				} else {
					if_block109 = create_if_block_6(ctx);
					if_block109.c();
					if_block109.m(t109.parentNode, t109);
				}
			} else if (if_block109) {
				if_block109.d(1);
				if_block109 = null;
			}

			if (/*name*/ ctx[0] == 'silhouette') {
				if (if_block110) {
					if_block110.p(ctx, dirty);
				} else {
					if_block110 = create_if_block_5(ctx);
					if_block110.c();
					if_block110.m(t110.parentNode, t110);
				}
			} else if (if_block110) {
				if_block110.d(1);
				if_block110 = null;
			}

			if (/*name*/ ctx[0] == 'snowflake') {
				if (if_block111) {
					if_block111.p(ctx, dirty);
				} else {
					if_block111 = create_if_block_4(ctx);
					if_block111.c();
					if_block111.m(t111.parentNode, t111);
				}
			} else if (if_block111) {
				if_block111.d(1);
				if_block111 = null;
			}

			if (/*name*/ ctx[0] == 'star') {
				if (if_block112) {
					if_block112.p(ctx, dirty);
				} else {
					if_block112 = create_if_block_3(ctx);
					if_block112.c();
					if_block112.m(t112.parentNode, t112);
				}
			} else if (if_block112) {
				if_block112.d(1);
				if_block112 = null;
			}

			if (/*name*/ ctx[0] == 'stopwatch') {
				if (if_block113) {
					if_block113.p(ctx, dirty);
				} else {
					if_block113 = create_if_block_2$1(ctx);
					if_block113.c();
					if_block113.m(t113.parentNode, t113);
				}
			} else if (if_block113) {
				if_block113.d(1);
				if_block113 = null;
			}

			if (/*name*/ ctx[0] == 'truck') {
				if (if_block114) {
					if_block114.p(ctx, dirty);
				} else {
					if_block114 = create_if_block_1$3(ctx);
					if_block114.c();
					if_block114.m(t114.parentNode, t114);
				}
			} else if (if_block114) {
				if_block114.d(1);
				if_block114 = null;
			}

			if (/*name*/ ctx[0] == 'washing') {
				if (if_block115) {
					if_block115.p(ctx, dirty);
				} else {
					if_block115 = create_if_block$5(ctx);
					if_block115.c();
					if_block115.m(if_block115_anchor.parentNode, if_block115_anchor);
				}
			} else if (if_block115) {
				if_block115.d(1);
				if_block115 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t5);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(t6);
			if (if_block7) if_block7.d(detaching);
			if (detaching) detach(t7);
			if (if_block8) if_block8.d(detaching);
			if (detaching) detach(t8);
			if (if_block9) if_block9.d(detaching);
			if (detaching) detach(t9);
			if (if_block10) if_block10.d(detaching);
			if (detaching) detach(t10);
			if (if_block11) if_block11.d(detaching);
			if (detaching) detach(t11);
			if (if_block12) if_block12.d(detaching);
			if (detaching) detach(t12);
			if (if_block13) if_block13.d(detaching);
			if (detaching) detach(t13);
			if (if_block14) if_block14.d(detaching);
			if (detaching) detach(t14);
			if (if_block15) if_block15.d(detaching);
			if (detaching) detach(t15);
			if (if_block16) if_block16.d(detaching);
			if (detaching) detach(t16);
			if (if_block17) if_block17.d(detaching);
			if (detaching) detach(t17);
			if (if_block18) if_block18.d(detaching);
			if (detaching) detach(t18);
			if (if_block19) if_block19.d(detaching);
			if (detaching) detach(t19);
			if (if_block20) if_block20.d(detaching);
			if (detaching) detach(t20);
			if (if_block21) if_block21.d(detaching);
			if (detaching) detach(t21);
			if (if_block22) if_block22.d(detaching);
			if (detaching) detach(t22);
			if (if_block23) if_block23.d(detaching);
			if (detaching) detach(t23);
			if (if_block24) if_block24.d(detaching);
			if (detaching) detach(t24);
			if (if_block25) if_block25.d(detaching);
			if (detaching) detach(t25);
			if (if_block26) if_block26.d(detaching);
			if (detaching) detach(t26);
			if (if_block27) if_block27.d(detaching);
			if (detaching) detach(t27);
			if (if_block28) if_block28.d(detaching);
			if (detaching) detach(t28);
			if (if_block29) if_block29.d(detaching);
			if (detaching) detach(t29);
			if (if_block30) if_block30.d(detaching);
			if (detaching) detach(t30);
			if (if_block31) if_block31.d(detaching);
			if (detaching) detach(t31);
			if (if_block32) if_block32.d(detaching);
			if (detaching) detach(t32);
			if (if_block33) if_block33.d(detaching);
			if (detaching) detach(t33);
			if (if_block34) if_block34.d(detaching);
			if (detaching) detach(t34);
			if (if_block35) if_block35.d(detaching);
			if (detaching) detach(t35);
			if (if_block36) if_block36.d(detaching);
			if (detaching) detach(t36);
			if (if_block37) if_block37.d(detaching);
			if (detaching) detach(t37);
			if (if_block38) if_block38.d(detaching);
			if (detaching) detach(t38);
			if (if_block39) if_block39.d(detaching);
			if (detaching) detach(t39);
			if (if_block40) if_block40.d(detaching);
			if (detaching) detach(t40);
			if (if_block41) if_block41.d(detaching);
			if (detaching) detach(t41);
			if (if_block42) if_block42.d(detaching);
			if (detaching) detach(t42);
			if (if_block43) if_block43.d(detaching);
			if (detaching) detach(t43);
			if (if_block44) if_block44.d(detaching);
			if (detaching) detach(t44);
			if (if_block45) if_block45.d(detaching);
			if (detaching) detach(t45);
			if (if_block46) if_block46.d(detaching);
			if (detaching) detach(t46);
			if (if_block47) if_block47.d(detaching);
			if (detaching) detach(t47);
			if (if_block48) if_block48.d(detaching);
			if (detaching) detach(t48);
			if (if_block49) if_block49.d(detaching);
			if (detaching) detach(t49);
			if (if_block50) if_block50.d(detaching);
			if (detaching) detach(t50);
			if (if_block51) if_block51.d(detaching);
			if (detaching) detach(t51);
			if (if_block52) if_block52.d(detaching);
			if (detaching) detach(t52);
			if (if_block53) if_block53.d(detaching);
			if (detaching) detach(t53);
			if (if_block54) if_block54.d(detaching);
			if (detaching) detach(t54);
			if (if_block55) if_block55.d(detaching);
			if (detaching) detach(t55);
			if (if_block56) if_block56.d(detaching);
			if (detaching) detach(t56);
			if (if_block57) if_block57.d(detaching);
			if (detaching) detach(t57);
			if (if_block58) if_block58.d(detaching);
			if (detaching) detach(t58);
			if (if_block59) if_block59.d(detaching);
			if (detaching) detach(t59);
			if (if_block60) if_block60.d(detaching);
			if (detaching) detach(t60);
			if (if_block61) if_block61.d(detaching);
			if (detaching) detach(t61);
			if (if_block62) if_block62.d(detaching);
			if (detaching) detach(t62);
			if (if_block63) if_block63.d(detaching);
			if (detaching) detach(t63);
			if (if_block64) if_block64.d(detaching);
			if (detaching) detach(t64);
			if (if_block65) if_block65.d(detaching);
			if (detaching) detach(t65);
			if (if_block66) if_block66.d(detaching);
			if (detaching) detach(t66);
			if (if_block67) if_block67.d(detaching);
			if (detaching) detach(t67);
			if (if_block68) if_block68.d(detaching);
			if (detaching) detach(t68);
			if (if_block69) if_block69.d(detaching);
			if (detaching) detach(t69);
			if (if_block70) if_block70.d(detaching);
			if (detaching) detach(t70);
			if (if_block71) if_block71.d(detaching);
			if (detaching) detach(t71);
			if (if_block72) if_block72.d(detaching);
			if (detaching) detach(t72);
			if (if_block73) if_block73.d(detaching);
			if (detaching) detach(t73);
			if (if_block74) if_block74.d(detaching);
			if (detaching) detach(t74);
			if (if_block75) if_block75.d(detaching);
			if (detaching) detach(t75);
			if (if_block76) if_block76.d(detaching);
			if (detaching) detach(t76);
			if (if_block77) if_block77.d(detaching);
			if (detaching) detach(t77);
			if (if_block78) if_block78.d(detaching);
			if (detaching) detach(t78);
			if (if_block79) if_block79.d(detaching);
			if (detaching) detach(t79);
			if (if_block80) if_block80.d(detaching);
			if (detaching) detach(t80);
			if (if_block81) if_block81.d(detaching);
			if (detaching) detach(t81);
			if (if_block82) if_block82.d(detaching);
			if (detaching) detach(t82);
			if (if_block83) if_block83.d(detaching);
			if (detaching) detach(t83);
			if (if_block84) if_block84.d(detaching);
			if (detaching) detach(t84);
			if (if_block85) if_block85.d(detaching);
			if (detaching) detach(t85);
			if (if_block86) if_block86.d(detaching);
			if (detaching) detach(t86);
			if (if_block87) if_block87.d(detaching);
			if (detaching) detach(t87);
			if (if_block88) if_block88.d(detaching);
			if (detaching) detach(t88);
			if (if_block89) if_block89.d(detaching);
			if (detaching) detach(t89);
			if (if_block90) if_block90.d(detaching);
			if (detaching) detach(t90);
			if (if_block91) if_block91.d(detaching);
			if (detaching) detach(t91);
			if (if_block92) if_block92.d(detaching);
			if (detaching) detach(t92);
			if (if_block93) if_block93.d(detaching);
			if (detaching) detach(t93);
			if (if_block94) if_block94.d(detaching);
			if (detaching) detach(t94);
			if (if_block95) if_block95.d(detaching);
			if (detaching) detach(t95);
			if (if_block96) if_block96.d(detaching);
			if (detaching) detach(t96);
			if (if_block97) if_block97.d(detaching);
			if (detaching) detach(t97);
			if (if_block98) if_block98.d(detaching);
			if (detaching) detach(t98);
			if (if_block99) if_block99.d(detaching);
			if (detaching) detach(t99);
			if (if_block100) if_block100.d(detaching);
			if (detaching) detach(t100);
			if (if_block101) if_block101.d(detaching);
			if (detaching) detach(t101);
			if (if_block102) if_block102.d(detaching);
			if (detaching) detach(t102);
			if (if_block103) if_block103.d(detaching);
			if (detaching) detach(t103);
			if (if_block104) if_block104.d(detaching);
			if (detaching) detach(t104);
			if (if_block105) if_block105.d(detaching);
			if (detaching) detach(t105);
			if (if_block106) if_block106.d(detaching);
			if (detaching) detach(t106);
			if (if_block107) if_block107.d(detaching);
			if (detaching) detach(t107);
			if (if_block108) if_block108.d(detaching);
			if (detaching) detach(t108);
			if (if_block109) if_block109.d(detaching);
			if (detaching) detach(t109);
			if (if_block110) if_block110.d(detaching);
			if (detaching) detach(t110);
			if (if_block111) if_block111.d(detaching);
			if (detaching) detach(t111);
			if (if_block112) if_block112.d(detaching);
			if (detaching) detach(t112);
			if (if_block113) if_block113.d(detaching);
			if (detaching) detach(t113);
			if (if_block114) if_block114.d(detaching);
			if (detaching) detach(t114);
			if (if_block115) if_block115.d(detaching);
			if (detaching) detach(if_block115_anchor);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(5, cicR = cicR + 1) } = $$props;
	inc_cic();
	const liquid = cachedLiquid(lec);
	let { name } = $$props;
	let { width = 20 } = $$props;
	let { color = 'var(--f7-theme-color)' } = $$props;
	let { classes } = $$props;

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(5, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(6, inc_cic = $$props.inc_cic);
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
		if ('width' in $$props) $$invalidate(1, width = $$props.width);
		if ('color' in $$props) $$invalidate(2, color = $$props.color);
		if ('classes' in $$props) $$invalidate(3, classes = $$props.classes);
	};

	return [name, width, color, classes, liquid, cicR, inc_cic];
}

class Icon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			cicR: 5,
			inc_cic: 6,
			name: 0,
			width: 1,
			color: 2,
			classes: 3
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/loadable.liquivelte generated by Svelte v3.50.0 */

function create_else_block$2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (32:4) {#if loading_ }
function create_if_block$4(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: {
				name: "icon-spinner",
				width: /*width*/ ctx[4],
				inc_cic: /*inc_cic*/ ctx[2],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		l(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*width*/ 16) icon_changes.width = /*width*/ ctx[4];
			if (dirty & /*inc_cic*/ 4) icon_changes.inc_cic = /*inc_cic*/ ctx[2];
			if (dirty & /*cicR*/ 1) icon_changes.cicR = /*cicR*/ ctx[0];
			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

function create_fragment$6(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$4, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*loading_*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if_block.l(div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "relative ");
			toggle_class(div0, "flex", /*centered*/ ctx[5]);
			toggle_class(div0, "justify-center", /*centered*/ ctx[5]);
			toggle_class(div0, "align-center", /*centered*/ ctx[5]);
			attr(div1, "class", /*classes*/ ctx[3]);
		},
		m(target, anchor) {
			insert_hydration(target, div1, anchor);
			append_hydration(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			if (!current || dirty & /*centered*/ 32) {
				toggle_class(div0, "flex", /*centered*/ ctx[5]);
			}

			if (!current || dirty & /*centered*/ 32) {
				toggle_class(div0, "justify-center", /*centered*/ ctx[5]);
			}

			if (!current || dirty & /*centered*/ 32) {
				toggle_class(div0, "align-center", /*centered*/ ctx[5]);
			}

			if (!current || dirty & /*classes*/ 8) {
				attr(div1, "class", /*classes*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	getContext('svelteProps') || {};
	getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(0, cicR = cicR + 1) } = $$props;
	inc_cic();
	let { classes } = $$props;
	let { width = 30 } = $$props;
	let { loading_ = false } = $$props;
	let { centered = false } = $$props;
	loading.subscribe(state => $$invalidate(1, loading_ = state));
	let { wrap = undefined } = $$props;

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(0, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(2, inc_cic = $$props.inc_cic);
		if ('classes' in $$props) $$invalidate(3, classes = $$props.classes);
		if ('width' in $$props) $$invalidate(4, width = $$props.width);
		if ('loading_' in $$props) $$invalidate(1, loading_ = $$props.loading_);
		if ('centered' in $$props) $$invalidate(5, centered = $$props.centered);
		if ('wrap' in $$props) $$invalidate(6, wrap = $$props.wrap);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [cicR, loading_, inc_cic, classes, width, centered, wrap, $$scope, slots];
}

class Loadable extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			cicR: 0,
			inc_cic: 2,
			classes: 3,
			width: 4,
			loading_: 1,
			centered: 5,
			wrap: 6
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/header/components/navigation.liquivelte generated by Svelte v3.50.0 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	child_ctx[11] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[11] === 0,
		index: /*index*/ child_ctx[11] + 1,
		index0: /*index*/ child_ctx[11],
		last: /*index*/ child_ctx[11] === /*links*/ child_ctx[2].length - 1,
		rindex: /*links*/ child_ctx[2].length - /*index*/ child_ctx[11],
		rindex0: /*links*/ child_ctx[2].length - /*index*/ child_ctx[11] - 1,
		length: /*links*/ child_ctx[2].length
	};

	child_ctx[9] = constants_0;
	return child_ctx;
}

// (49:4) {:else}
function create_else_block$1(ctx) {
	let listitem;
	let current;

	listitem = new List_item({
			props: {
				accordionItem: false,
				title: /*lnk*/ ctx[8].title,
				view: /*mainview*/ ctx[3],
				link: /*lnk*/ ctx[8].url,
				main: true,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(listitem.$$.fragment);
		},
		l(nodes) {
			claim_component(listitem.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listitem_changes = {};
			if (dirty & /*links*/ 4) listitem_changes.title = /*lnk*/ ctx[8].title;
			if (dirty & /*mainview*/ 8) listitem_changes.view = /*mainview*/ ctx[3];
			if (dirty & /*links*/ 4) listitem_changes.link = /*lnk*/ ctx[8].url;
			if (dirty & /*inc_cic*/ 2) listitem_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) listitem_changes.cicR = /*cicR*/ ctx[0];
			listitem.$set(listitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listitem, detaching);
		}
	};
}

// (41:4) {#if lnk.links && lnk.links.length }
function create_if_block$3(ctx) {
	let listitem;
	let current;

	listitem = new List_item({
			props: {
				accordionItem: true,
				title: /*lnk*/ ctx[8].title,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listitem.$$.fragment);
		},
		l(nodes) {
			claim_component(listitem.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listitem_changes = {};
			if (dirty & /*links*/ 4) listitem_changes.title = /*lnk*/ ctx[8].title;
			if (dirty & /*inc_cic*/ 2) listitem_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) listitem_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, links*/ 4103) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listitem, detaching);
		}
	};
}

// (43:6) {#if lnk.links && lnk.links.length }
function create_if_block_1$2(ctx) {
	let accordioncontent;
	let current;

	accordioncontent = new Accordion_content({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(accordioncontent.$$.fragment);
		},
		l(nodes) {
			claim_component(accordioncontent.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(accordioncontent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const accordioncontent_changes = {};
			if (dirty & /*inc_cic*/ 2) accordioncontent_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) accordioncontent_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, links*/ 4100) {
				accordioncontent_changes.$$scope = { dirty, ctx };
			}

			accordioncontent.$set(accordioncontent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(accordioncontent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(accordioncontent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(accordioncontent, detaching);
		}
	};
}

// (44:6) <AccordionContent  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_2$2(ctx) {
	let navigation;
	let current;
	navigation = new Navigation({ props: { links: /*lnk*/ ctx[8].links } });

	return {
		c() {
			create_component(navigation.$$.fragment);
		},
		l(nodes) {
			claim_component(navigation.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(navigation, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const navigation_changes = {};
			if (dirty & /*links*/ 4) navigation_changes.links = /*lnk*/ ctx[8].links;
			navigation.$set(navigation_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navigation.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navigation.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navigation, detaching);
		}
	};
}

// (42:4) <ListItem  accordionItem title="{ lnk.title }"  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_1$2(ctx) {
	let t;
	let current;
	let if_block = /*lnk*/ ctx[8].links && /*lnk*/ ctx[8].links.length && create_if_block_1$2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			t = claim_space(nodes);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*lnk*/ ctx[8].links && /*lnk*/ ctx[8].links.length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*links*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (31:2) {#each  links as lnk, index   }
function create_each_block$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$3, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*lnk*/ ctx[8].links && /*lnk*/ ctx[8].links.length) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (30:0) <List  accordionList inc_cic={inc_cic} cicR={cicR} >
function create_default_slot$2(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*links*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*links, inc_cic, cicR, mainview*/ 15) {
				each_value = /*links*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment$5(ctx) {
	let list;
	let current;

	list = new List({
			props: {
				accordionList: true,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(list.$$.fragment);
		},
		l(nodes) {
			claim_component(list.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(list, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const list_changes = {};
			if (dirty & /*inc_cic*/ 2) list_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) list_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, links, inc_cic, cicR, mainview*/ 4111) {
				list_changes.$$scope = { dirty, ctx };
			}

			list.$set(list_changes);
		},
		i(local) {
			if (current) return;
			transition_in(list.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(list.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(list, detaching);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let mainview;
	getContext('svelteProps') || {};
	getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(0, cicR = cicR + 1) } = $$props;
	inc_cic();
	let { links } = $$props;

	// $: console.log('mainview ', mainview);
	onMount(() => {
		f7ready(f7 => {
			window.f7 = f7;
			$$invalidate(3, mainview = f7.views.main);
		});
	});

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(0, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(1, inc_cic = $$props.inc_cic);
		if ('links' in $$props) $$invalidate(2, links = $$props.links);
	};

	$$invalidate(3, mainview = f7?.views?.main);
	return [cicR, inc_cic, links, mainview];
}

class Navigation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { cicR: 0, inc_cic: 1, links: 2 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/quantity-box.liquivelte generated by Svelte v3.50.0 */

function create_fragment$4(ctx) {
	let div2;
	let div0;
	let t0;
	let t1;
	let input;
	let t2;
	let div1;
	let t3;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text("-");
			t1 = space();
			input = element("input");
			t2 = space();
			div1 = element("div");
			t3 = text("+");
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "-");
			div0_nodes.forEach(detach);
			t1 = claim_space(div2_nodes);

			input = claim_element(div2_nodes, "INPUT", {
				class: true,
				name: true,
				type: true,
				min: true,
				"data-quantity-input": true,
				style: true
			});

			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, "+");
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "minus-icon cursor-pointer");
			toggle_class(div0, "disabled", /*quantity*/ ctx[0] <= /*minimum*/ ctx[1]);
			attr(input, "class", "quantity text-base");
			attr(input, "name", "quantity");
			attr(input, "type", "number");
			attr(input, "min", "0");
			attr(input, "data-quantity-input", "");
			set_style(input, "width", /*inputWidth*/ ctx[2]);
			attr(div1, "class", "plus-icon cursor-pointer");
			attr(div2, "class", "quantity-box");
		},
		m(target, anchor) {
			insert_hydration(target, div2, anchor);
			append_hydration(div2, div0);
			append_hydration(div0, t0);
			append_hydration(div2, t1);
			append_hydration(div2, input);
			set_input_value(input, /*quantity*/ ctx[0]);
			append_hydration(div2, t2);
			append_hydration(div2, div1);
			append_hydration(div1, t3);

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler*/ ctx[6]),
					listen(input, "input", /*input_input_handler*/ ctx[7]),
					listen(div1, "click", /*click_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*quantity, minimum*/ 3) {
				toggle_class(div0, "disabled", /*quantity*/ ctx[0] <= /*minimum*/ ctx[1]);
			}

			if (dirty & /*inputWidth*/ 4) {
				set_style(input, "width", /*inputWidth*/ ctx[2]);
			}

			if (dirty & /*quantity*/ 1 && to_number(input.value) !== /*quantity*/ ctx[0]) {
				set_input_value(input, /*quantity*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			run_all(dispose);
		}
	};
}
let boxSize = 16;

function instance$4($$self, $$props, $$invalidate) {
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(4, cicR = cicR + 1) } = $$props;
	inc_cic();
	const cic = cicR;
	let inputWidth = (themeImports['inputWidth'].find(entry => entry.component_index == cic) || themeImports['inputWidth'][0]).value;
	let { quantity = 1 } = $$props;
	let { minimum = 0 } = $$props;
	const dispatch = createEventDispatcher();

	const qtyChange = change => {
		// console.log('Qty change');
		$$invalidate(0, quantity = quantity + change);

		dispatch('qtychange', { quantity });
	};

	const click_handler = () => qtyChange(-1);

	function input_input_handler() {
		quantity = to_number(this.value);
		$$invalidate(0, quantity);
	}

	const click_handler_1 = () => qtyChange(1);

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(4, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(5, inc_cic = $$props.inc_cic);
		if ('quantity' in $$props) $$invalidate(0, quantity = $$props.quantity);
		if ('minimum' in $$props) $$invalidate(1, minimum = $$props.minimum);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*quantity*/ 1) {
			$$invalidate(0, quantity = quantity == null ? 0 : quantity);
		}

		if ($$self.$$.dirty & /*quantity*/ 1) {
			$$invalidate(2, inputWidth = boxSize + boxSize * (quantity.toString().length - 1) * .3);
		}
	};

	return [
		quantity,
		minimum,
		inputWidth,
		qtyChange,
		cicR,
		inc_cic,
		click_handler,
		input_input_handler,
		click_handler_1
	];
}

class Quantity_box extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			cicR: 4,
			inc_cic: 5,
			quantity: 0,
			minimum: 1
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/header/components/cart-drawer.liquivelte generated by Svelte v3.50.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	child_ctx[14] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[14] === 0,
		index: /*index*/ child_ctx[14] + 1,
		index0: /*index*/ child_ctx[14],
		last: /*index*/ child_ctx[14] === /*cart*/ child_ctx[2].items.length - 1,
		rindex: /*cart*/ child_ctx[2].items.length - /*index*/ child_ctx[14],
		rindex0: /*cart*/ child_ctx[2].items.length - /*index*/ child_ctx[14] - 1,
		length: /*cart*/ child_ctx[2].items.length
	};

	child_ctx[12] = constants_0;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[14] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[14] === 0,
		index: /*index*/ child_ctx[14] + 1,
		index0: /*index*/ child_ctx[14],
		last: /*index*/ child_ctx[14] === /*item*/ child_ctx[11].variant_options.length - 1,
		rindex: /*item*/ child_ctx[11].variant_options.length - /*index*/ child_ctx[14],
		rindex0: /*item*/ child_ctx[11].variant_options.length - /*index*/ child_ctx[14] - 1,
		length: /*item*/ child_ctx[11].variant_options.length
	};

	child_ctx[12] = constants_0;
	return child_ctx;
}

// (39:1) {#if initialized }
function create_if_block$2(ctx) {
	let view;
	let current;

	view = new View({
			props: {
				classes: "cart-drawer",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(view.$$.fragment);
		},
		l(nodes) {
			claim_component(view.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(view, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const view_changes = {};
			if (dirty & /*inc_cic*/ 2) view_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) view_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, cart*/ 131079) {
				view_changes.$$scope = { dirty, ctx };
			}

			view.$set(view_changes);
		},
		i(local) {
			if (current) return;
			transition_in(view.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(view.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(view, detaching);
		}
	};
}

// (43:4) <BlockTitle  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_6$1(ctx) {
	let t;

	return {
		c() {
			t = text("Cart");
		},
		l(nodes) {
			t = claim_text(nodes, "Cart");
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (42:3) <Block  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_5$1(ctx) {
	let blocktitle;
	let current;

	blocktitle = new Block_title({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_6$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(blocktitle.$$.fragment);
		},
		l(nodes) {
			claim_component(blocktitle.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(blocktitle, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const blocktitle_changes = {};
			if (dirty & /*inc_cic*/ 2) blocktitle_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) blocktitle_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope*/ 131072) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);
		},
		i(local) {
			if (current) return;
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(blocktitle, detaching);
		}
	};
}

// (59:6) 
function create_header_slot(ctx) {
	let div;
	let t_value = /*item*/ ctx[11].product_title + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { slot: true, class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "slot", "header");
			attr(div, "class", "text-xl mb-4");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4 && t_value !== (t_value = /*item*/ ctx[11].product_title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (60:6) 
function create_after_slot(ctx) {
	let div;
	let t0_value = /*liquid*/ ctx[4].money(/*item*/ ctx[11].price) + "";
	let t0;
	let t1;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { slot: true, class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "slot", "after");
			attr(div, "class", "ml-2");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4 && t0_value !== (t0_value = /*liquid*/ ctx[4].money(/*item*/ ctx[11].price) + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (62:7) {#each  item.variant_options as option, index   }
function create_each_block_1(ctx) {
	let span;
	let t0_value = /*option*/ ctx[15] + "";
	let t0;
	let t1;
	let br;

	return {
		c() {
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			br = element("br");
			this.h();
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach);
			t1 = claim_space(nodes);
			br = claim_element(nodes, "BR", {});
			this.h();
		},
		h() {
			attr(span, "class", "text-gray-500k text-base line-item-option");
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t0);
			insert_hydration(target, t1, anchor);
			insert_hydration(target, br, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4 && t0_value !== (t0_value = /*option*/ ctx[15] + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			if (detaching) detach(br);
		}
	};
}

// (61:6) 
function create_text_slot(ctx) {
	let div;
	let t;
	let each_value_1 = /*item*/ ctx[11].variant_options;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { slot: true, class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "slot", "text");
			attr(div, "class", "cart-item-options");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4) {
				each_value_1 = /*item*/ ctx[11].variant_options;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (76:7) {#if item.image }
function create_if_block_1$1(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true, width: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[4].image_url(/*item*/ ctx[11].image, { "width": "120" }))) attr(img, "src", img_src_value);
			attr(img, "width", "80");
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[4].image_url(/*item*/ ctx[11].image, { "width": "120" }))) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (75:6) 
function create_media_slot(ctx) {
	let div;
	let t;
	let if_block = /*item*/ ctx[11].image && create_if_block_1$1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "slot", "media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (/*item*/ ctx[11].image) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

// (81:7) <Loadable   inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_4$1(ctx) {
	let stepper;
	let current;

	stepper = new Stepper({
			props: {
				raised: true,
				onChange: /*quantityChange*/ ctx[5].bind(/*item*/ ctx[11]),
				value: /*item*/ ctx[11].quantity,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(stepper.$$.fragment);
		},
		l(nodes) {
			claim_component(stepper.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(stepper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const stepper_changes = {};
			if (dirty & /*cart*/ 4) stepper_changes.onChange = /*quantityChange*/ ctx[5].bind(/*item*/ ctx[11]);
			if (dirty & /*cart*/ 4) stepper_changes.value = /*item*/ ctx[11].quantity;
			if (dirty & /*inc_cic*/ 2) stepper_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) stepper_changes.cicR = /*cicR*/ ctx[0];
			stepper.$set(stepper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(stepper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(stepper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(stepper, detaching);
		}
	};
}

// (80:6) 
function create_footer_slot(ctx) {
	let div;
	let loadable;
	let t;
	let current;

	loadable = new Loadable({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_4$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component(loadable.$$.fragment);
			t = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { slot: true, class: true });
			var div_nodes = children(div);
			claim_component(loadable.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "slot", "footer");
			attr(div, "class", "ml-2");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			mount_component(loadable, div, null);
			append_hydration(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const loadable_changes = {};
			if (dirty & /*inc_cic*/ 2) loadable_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) loadable_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, cart, inc_cic, cicR*/ 131079) {
				loadable_changes.$$scope = { dirty, ctx };
			}

			loadable.$set(loadable_changes);
		},
		i(local) {
			if (current) return;
			transition_in(loadable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loadable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(loadable);
		}
	};
}

// (48:4) {#each  cart.items as item, index  (item.id) }
function create_each_block(key_1, ctx) {
	let first;
	let listitem;
	let current;

	listitem = new List_item({
			props: {
				classes: "h-[120px]",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: {
					footer: [create_footer_slot],
					media: [create_media_slot],
					text: [create_text_slot],
					after: [create_after_slot],
					header: [create_header_slot]
				},
				$$scope: { ctx }
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listitem.$$.fragment);
			this.h();
		},
		l(nodes) {
			first = empty();
			claim_component(listitem.$$.fragment, nodes);
			this.h();
		},
		h() {
			this.first = first;
		},
		m(target, anchor) {
			insert_hydration(target, first, anchor);
			mount_component(listitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listitem_changes = {};
			if (dirty & /*inc_cic*/ 2) listitem_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) listitem_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, cart*/ 131079) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listitem, detaching);
		}
	};
}

// (47:3) <List   inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_3$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*cart*/ ctx[2].items;
	const get_key = ctx => /*item*/ ctx[11].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*inc_cic, cicR, quantityChange, cart, liquid*/ 55) {
				each_value = /*cart*/ ctx[2].items;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (91:3) <Block  classes="cart-drawer-bottom" inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_2$1(ctx) {
	let div0;
	let span0;
	let t0_value = /*liquid*/ ctx[4].t('general.cart.subtotal') + "";
	let t0;
	let t1;
	let span1;
	let t2_value = /*liquid*/ ctx[4].money(/*cart*/ ctx[2].items_subtotal_price) + "";
	let t2;
	let t3;
	let div1;
	let t4;
	let t5;
	let button;
	let t6;
	let t7;
	let a;
	let t8;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			t4 = text("Taxes and shipping calculated at checkout");
			t5 = space();
			button = element("button");
			t6 = text("Checkout");
			t7 = space();
			a = element("a");
			t8 = text("View Cart");
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span0 = claim_element(div0_nodes, "SPAN", { class: true, "data-t": true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, t0_value);
			span0_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);

			span1 = claim_element(div0_nodes, "SPAN", {
				"cart-drawer-subtotal-text": true,
				class: true
			});

			var span1_nodes = children(span1);
			t2 = claim_text(span1_nodes, t2_value);
			span1_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t3 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t4 = claim_text(div1_nodes, "Taxes and shipping calculated at checkout");
			div1_nodes.forEach(detach);
			t5 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Checkout");
			button_nodes.forEach(detach);
			t7 = claim_space(nodes);
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t8 = claim_text(a_nodes, "View Cart");
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span0, "class", "text-gray text-base float-left");
			attr(span0, "data-t", /*liquid*/ ctx[4].t('general.cart.subtotal'));
			attr(span1, "cart-drawer-subtotal-text", "");
			attr(span1, "class", "float-right text-black text-lg ");
			attr(div0, "class", "cart-drawer-subtotal svelte-2fnp2n");
			attr(div1, "class", "cart-drawer-taxes-notice text-base text-black float-left svelte-2fnp2n");
			attr(button, "class", "mt-10 w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500");
			attr(a, "class", "mt-10 w-full bg-gray-300 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-black hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500");
			attr(a, "href", "/cart");
		},
		m(target, anchor) {
			insert_hydration(target, div0, anchor);
			append_hydration(div0, span0);
			append_hydration(span0, t0);
			append_hydration(div0, t1);
			append_hydration(div0, span1);
			append_hydration(span1, t2);
			insert_hydration(target, t3, anchor);
			insert_hydration(target, div1, anchor);
			append_hydration(div1, t4);
			insert_hydration(target, t5, anchor);
			insert_hydration(target, button, anchor);
			append_hydration(button, t6);
			insert_hydration(target, t7, anchor);
			insert_hydration(target, a, anchor);
			append_hydration(a, t8);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4 && t2_value !== (t2_value = /*liquid*/ ctx[4].money(/*cart*/ ctx[2].items_subtotal_price) + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t3);
			if (detaching) detach(div1);
			if (detaching) detach(t5);
			if (detaching) detach(button);
			if (detaching) detach(t7);
			if (detaching) detach(a);
			mounted = false;
			dispose();
		}
	};
}

// (41:4) <Page  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_1$1(ctx) {
	let block0;
	let t0;
	let list;
	let t1;
	let block1;
	let current;

	block0 = new Block({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_5$1] },
				$$scope: { ctx }
			}
		});

	list = new List({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	block1 = new Block({
			props: {
				classes: "cart-drawer-bottom",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block0.$$.fragment);
			t0 = space();
			create_component(list.$$.fragment);
			t1 = space();
			create_component(block1.$$.fragment);
		},
		l(nodes) {
			claim_component(block0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(list.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(block1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(block0, target, anchor);
			insert_hydration(target, t0, anchor);
			mount_component(list, target, anchor);
			insert_hydration(target, t1, anchor);
			mount_component(block1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block0_changes = {};
			if (dirty & /*inc_cic*/ 2) block0_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) block0_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR*/ 131075) {
				block0_changes.$$scope = { dirty, ctx };
			}

			block0.$set(block0_changes);
			const list_changes = {};
			if (dirty & /*inc_cic*/ 2) list_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) list_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, cart, inc_cic, cicR*/ 131079) {
				list_changes.$$scope = { dirty, ctx };
			}

			list.$set(list_changes);
			const block1_changes = {};
			if (dirty & /*inc_cic*/ 2) block1_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) block1_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, cart*/ 131076) {
				block1_changes.$$scope = { dirty, ctx };
			}

			block1.$set(block1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block0.$$.fragment, local);
			transition_in(list.$$.fragment, local);
			transition_in(block1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block0.$$.fragment, local);
			transition_out(list.$$.fragment, local);
			transition_out(block1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block0, detaching);
			if (detaching) detach(t0);
			destroy_component(list, detaching);
			if (detaching) detach(t1);
			destroy_component(block1, detaching);
		}
	};
}

// (40:2) <View  classes="cart-drawer" inc_cic={inc_cic} cicR={cicR} >
function create_default_slot$1(ctx) {
	let page;
	let current;

	page = new Page({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(page.$$.fragment);
		},
		l(nodes) {
			claim_component(page.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(page, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const page_changes = {};
			if (dirty & /*inc_cic*/ 2) page_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) page_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, cart*/ 131079) {
				page_changes.$$scope = { dirty, ctx };
			}

			page.$set(page_changes);
		},
		i(local) {
			if (current) return;
			transition_in(page.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(page.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(page, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*initialized*/ ctx[3] && create_if_block$2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*initialized*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*initialized*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let themeImports = getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(0, cicR = cicR + 1) } = $$props;
	inc_cic();
	const cic = cicR;
	const liquid = cachedLiquid(lec);
	let cart = (themeImports['cart'].find(entry => entry.component_index == cic) || themeImports['cart'][0]).value;
	let initialized = false;
	(themeImports['min_amounts'].find(entry => entry.component_index == cic) || themeImports['min_amounts'][0]).value;

	// const min_amounts_data = JSON.parse(min_amounts);
	function quantityChange(event) {
		cartStore.setQuantity(this.id, +event.target.value);
	}

	onMount(() => {
		cartStore.set(cart);

		cartStore.subscribe(payload => {
			$$invalidate(2, cart = payload);
		});

		$$invalidate(3, initialized = true);
	});

	const click_handler = () => submit();

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(0, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(1, inc_cic = $$props.inc_cic);
	};

	return [cicR, inc_cic, cart, initialized, liquid, quantityChange, click_handler];
}

class Cart_drawer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { cicR: 0, inc_cic: 1 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/image.liquivelte generated by Svelte v3.50.0 */

function create_fragment$2(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let img_width_value;
	let img_height_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", {
				srcset: true,
				sizes: true,
				class: true,
				src: true,
				alt: true,
				width: true,
				height: true
			});

			this.h();
		},
		h() {
			attr(img, "srcset", /*srcset*/ ctx[4]);
			attr(img, "sizes", /*srcset_sizes*/ ctx[5]);
			attr(img, "class", /*classes*/ ctx[0]);
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[2].image_url(/*source*/ ctx[1], { "width": "2500" }))) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*liquid*/ ctx[2].escape(/*source*/ ctx[1].alt));
			attr(img, "width", img_width_value = /*source*/ ctx[1].width);
			attr(img, "height", img_height_value = /*liquid*/ ctx[2].ceil(/*liquid*/ ctx[2].divided_by(/*source*/ ctx[1].width, /*aspect_ratio*/ ctx[3])));
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*classes*/ 1) {
				attr(img, "class", /*classes*/ ctx[0]);
			}

			if (dirty & /*source*/ 2 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[2].image_url(/*source*/ ctx[1], { "width": "2500" }))) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*source*/ 2 && img_alt_value !== (img_alt_value = /*liquid*/ ctx[2].escape(/*source*/ ctx[1].alt))) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*source*/ 2 && img_width_value !== (img_width_value = /*source*/ ctx[1].width)) {
				attr(img, "width", img_width_value);
			}

			if (dirty & /*source*/ 2 && img_height_value !== (img_height_value = /*liquid*/ ctx[2].ceil(/*liquid*/ ctx[2].divided_by(/*source*/ ctx[1].width, /*aspect_ratio*/ ctx[3])))) {
				attr(img, "height", img_height_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let themeImports = getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(6, cicR = cicR + 1) } = $$props;
	inc_cic();
	const cic = cicR;
	const liquid = cachedLiquid(lec);
	let { src } = $$props;
	let { classes } = $$props;
	let aspect_ratio = (themeImports['aspect_ratio'].find(entry => entry.component_index == cic) || themeImports['aspect_ratio'][0]).value;
	(themeImports['sizes'].find(entry => entry.component_index == cic) || themeImports['sizes'][0]).value;
	let srcset = (themeImports['srcset'].find(entry => entry.component_index == cic) || themeImports['srcset'][0]).value;
	let srcset_sizes = (themeImports['srcset_sizes'].find(entry => entry.component_index == cic) || themeImports['srcset_sizes'][0]).value;
	let source = (themeImports['source'].find(entry => entry.component_index == cic) || themeImports['source'][0]).value;
	source = { src: source };
	source.width = (themeImports['sourceƒƒwidth'].find(entry => entry.component_index == cic) || themeImports['sourceƒƒwidth'][0]).value;
	source.aspect_ratio = (themeImports['sourceƒƒaspect_ratio'].find(entry => entry.component_index == cic) || themeImports['sourceƒƒaspect_ratio'][0]).value;
	source.alt = (themeImports['sourceƒƒalt'].find(entry => entry.component_index == cic) || themeImports['sourceƒƒalt'][0]).value;

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(6, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(7, inc_cic = $$props.inc_cic);
		if ('src' in $$props) $$invalidate(8, src = $$props.src);
		if ('classes' in $$props) $$invalidate(0, classes = $$props.classes);
	};

	return [
		classes,
		source,
		liquid,
		aspect_ratio,
		srcset,
		srcset_sizes,
		cicR,
		inc_cic,
		src
	];
}

class Image extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { cicR: 6, inc_cic: 7, src: 8, classes: 0 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/header/components/logo.liquivelte generated by Svelte v3.50.0 */

function create_else_block(ctx) {
	let span;
	let t_value = /*shop*/ ctx[3].name + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "h2");
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*shop*/ 8 && t_value !== (t_value = /*shop*/ ctx[3].name + "")) set_data(t, t_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (26:0) {#if section.settings.logo != undefined }
function create_if_block$1(ctx) {
	let image;
	let t0;
	let span;
	let t1_value = /*shop*/ ctx[3].name + "";
	let t1;
	let current;

	image = new Image({
			props: {
				classes: "header__heading-logo",
				source: /*section*/ ctx[2].settings.logo,
				sizes: "50@fixed",
				width: /*logo_width*/ ctx[5],
				height: /*logo_height*/ ctx[4],
				alt: /*logo_alt*/ ctx[6],
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(image.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			this.h();
		},
		l(nodes) {
			claim_component(image.$$.fragment, nodes);
			t0 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "class", "h2 text-white");
		},
		m(target, anchor) {
			mount_component(image, target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, span, anchor);
			append_hydration(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			const image_changes = {};
			if (dirty & /*section*/ 4) image_changes.source = /*section*/ ctx[2].settings.logo;
			if (dirty & /*inc_cic*/ 2) image_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) image_changes.cicR = /*cicR*/ ctx[0];
			image.$set(image_changes);
			if ((!current || dirty & /*shop*/ 8) && t1_value !== (t1_value = /*shop*/ ctx[3].name + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(image, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(span);
		}
	};
}

function create_fragment$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*section*/ ctx[2].settings.logo != undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(0, cicR = cicR + 1) } = $$props;
	inc_cic();
	const cic = cicR;
	const section = {};
	const shop = {};
	section.settings = (themeImports['sectionƒƒsettings'].find(entry => entry.component_index == cic) || themeImports['sectionƒƒsettings'][0]).value;
	shop.name = (themeImports['shopƒƒname'].find(entry => entry.component_index == cic) || themeImports['shopƒƒname'][0]).value;
	let logo_height = (themeImports['logo_height'].find(entry => entry.component_index == cic) || themeImports['logo_height'][0]).value;
	let logo_width = (themeImports['logo_width'].find(entry => entry.component_index == cic) || themeImports['logo_width'][0]).value;
	let logo_alt = (themeImports['logo_alt'].find(entry => entry.component_index == cic) || themeImports['logo_alt'][0]).value;

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(0, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(1, inc_cic = $$props.inc_cic);
	};

	return [cicR, inc_cic, section, shop, logo_height, logo_width, logo_alt];
}

class Logo extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { cicR: 0, inc_cic: 1 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/header/index.liquivelte generated by Svelte v3.50.0 */

function create_default_slot_8(ctx) {
	let navigation;
	let current;

	navigation = new Navigation({
			props: {
				links: /*section*/ ctx[3].settings.menu.links,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(navigation.$$.fragment);
		},
		l(nodes) {
			claim_component(navigation.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(navigation, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const navigation_changes = {};
			if (dirty & /*section*/ 8) navigation_changes.links = /*section*/ ctx[3].settings.menu.links;
			if (dirty & /*inc_cic*/ 2) navigation_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) navigation_changes.cicR = /*cicR*/ ctx[0];
			navigation.$set(navigation_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navigation.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navigation.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navigation, detaching);
		}
	};
}

// (65:2) <Panel  resizable left reveal swipe swipeOnlyClose="{true}"   inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_7(ctx) {
	let page;
	let current;

	page = new Page({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(page.$$.fragment);
		},
		l(nodes) {
			claim_component(page.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(page, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const page_changes = {};
			if (dirty & /*inc_cic*/ 2) page_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) page_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, section, inc_cic, cicR*/ 524299) {
				page_changes.$$scope = { dirty, ctx };
			}

			page.$set(page_changes);
		},
		i(local) {
			if (current) return;
			transition_in(page.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(page.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(page, detaching);
		}
	};
}

// (72:6) <Page  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_6(ctx) {
	let cartdrawer;
	let current;

	cartdrawer = new Cart_drawer({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(cartdrawer.$$.fragment);
		},
		l(nodes) {
			claim_component(cartdrawer.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(cartdrawer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const cartdrawer_changes = {};
			if (dirty & /*inc_cic*/ 2) cartdrawer_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) cartdrawer_changes.cicR = /*cicR*/ ctx[0];
			cartdrawer.$set(cartdrawer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(cartdrawer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(cartdrawer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(cartdrawer, detaching);
		}
	};
}

// (71:4) <View  name="cart" inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_5(ctx) {
	let page;
	let current;

	page = new Page({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(page.$$.fragment);
		},
		l(nodes) {
			claim_component(page.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(page, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const page_changes = {};
			if (dirty & /*inc_cic*/ 2) page_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) page_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR*/ 524291) {
				page_changes.$$scope = { dirty, ctx };
			}

			page.$set(page_changes);
		},
		i(local) {
			if (current) return;
			transition_in(page.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(page.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(page, detaching);
		}
	};
}

// (70:2) <Panel  classes="cart-popup" resizable right reveal swipe swipeOnlyClose="{true}"   inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_4(ctx) {
	let view;
	let current;

	view = new View({
			props: {
				name: "cart",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(view.$$.fragment);
		},
		l(nodes) {
			claim_component(view.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(view, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const view_changes = {};
			if (dirty & /*inc_cic*/ 2) view_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) view_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR*/ 524291) {
				view_changes.$$scope = { dirty, ctx };
			}

			view.$set(view_changes);
		},
		i(local) {
			if (current) return;
			transition_in(view.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(view.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(view, detaching);
		}
	};
}

// (80:8) <Button  small panelToggle="left" classes="display-flex"  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_3(ctx) {
	let icon;
	let current;

	icon = new Icon({
			props: {
				name: "icon-hamburger",
				width: "25",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		l(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*inc_cic*/ 2) icon_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) icon_changes.cicR = /*cicR*/ ctx[0];
			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

// (91:12) {#if cart.items }
function create_if_block_2(ctx) {
	let badge;
	let current;

	badge = new Badge({
			props: {
				color: "green",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge.$$.fragment);
		},
		l(nodes) {
			claim_component(badge.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_changes = {};
			if (dirty & /*inc_cic*/ 2) badge_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) badge_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, cart*/ 524292) {
				badge_changes.$$scope = { dirty, ctx };
			}

			badge.$set(badge_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge, detaching);
		}
	};
}

// (92:14) <Badge  color="green" inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_2(ctx) {
	let t_value = /*cart*/ ctx[2].items.length + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*cart*/ 4 && t_value !== (t_value = /*cart*/ ctx[2].items.length + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (88:8) <Link  small panelToggle="right" classes="display-flex"  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot_1(ctx) {
	let div;
	let icon;
	let t;
	let current;

	icon = new Icon({
			props: {
				name: "icon-cart",
				width: "30",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	let if_block = /*cart*/ ctx[2].items && create_if_block_2(ctx);

	return {
		c() {
			div = element("div");
			create_component(icon.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(icon.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "icon relative");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			mount_component(icon, div, null);
			append_hydration(div, t);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*inc_cic*/ 2) icon_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) icon_changes.cicR = /*cicR*/ ctx[0];
			icon.$set(icon_changes);

			if (/*cart*/ ctx[2].items) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*cart*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(icon);
			if (if_block) if_block.d();
		}
	};
}

// (78:4) <Appbar  inc_cic={inc_cic} cicR={cicR} >
function create_default_slot(ctx) {
	let div0;
	let button;
	let t0;
	let div1;
	let logo;
	let t1;
	let div2;
	let link;
	let current;

	button = new Button({
			props: {
				small: true,
				panelToggle: "left",
				classes: "display-flex",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	logo = new Logo({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0]
			}
		});

	link = new Link({
			props: {
				small: true,
				panelToggle: "right",
				classes: "display-flex",
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div0 = element("div");
			create_component(button.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(logo.$$.fragment);
			t1 = space();
			div2 = element("div");
			create_component(link.$$.fragment);
			this.h();
		},
		l(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(button.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(logo.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach);
			t1 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(link.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "left pt-[10px] pl-[10px]");
			attr(div1, "class", "center");
			attr(div2, "class", "right pt-[10px] pr-[10px]");
		},
		m(target, anchor) {
			insert_hydration(target, div0, anchor);
			mount_component(button, div0, null);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div1, anchor);
			mount_component(logo, div1, null);
			insert_hydration(target, t1, anchor);
			insert_hydration(target, div2, anchor);
			mount_component(link, div2, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*inc_cic*/ 2) button_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) button_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR*/ 524291) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const logo_changes = {};
			if (dirty & /*inc_cic*/ 2) logo_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) logo_changes.cicR = /*cicR*/ ctx[0];
			logo.$set(logo_changes);
			const link_changes = {};
			if (dirty & /*inc_cic*/ 2) link_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) link_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, cart*/ 524295) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(logo.$$.fragment, local);
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(logo.$$.fragment, local);
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_component(button);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			destroy_component(logo);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			destroy_component(link);
		}
	};
}

// (100:0) {#if settings.cart_type == "notification" }
function create_if_block_1(ctx) {
	let html_tag;
	let raw_value = /*rawinclude_679e0e24*/ ctx[4][0] + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTagHydration(false);
			html_anchor = empty();
			this.h();
		},
		l(nodes) {
			html_tag = claim_html_tag(nodes, false);
			html_anchor = empty();
			this.h();
		},
		h() {
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_hydration(target, html_anchor, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (106:0) {#if request.page_type == 'index' }
function create_if_block(ctx) {
	let html_tag;
	let raw_value = /*rawinclude_602baf9d*/ ctx[6][0] + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTagHydration(false);
			html_anchor = empty();
			this.h();
		},
		l(nodes) {
			html_tag = claim_html_tag(nodes, false);
			html_anchor = empty();
			this.h();
		},
		h() {
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_hydration(target, html_anchor, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

function create_fragment(ctx) {
	let svg;
	let symbol0;
	let path0;
	let symbol1;
	let path1;
	let t0;
	let panel0;
	let t1;
	let panel1;
	let t2;
	let header;
	let appbar;
	let t3;
	let t4;
	let html_tag;
	let raw_value = /*rawinclude_3be65912*/ ctx[5][0] + "";
	let t5;
	let if_block1_anchor;
	let current;

	panel0 = new Panel({
			props: {
				resizable: true,
				left: true,
				reveal: true,
				swipe: true,
				swipeOnlyClose: true,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	panel1 = new Panel({
			props: {
				classes: "cart-popup",
				resizable: true,
				right: true,
				reveal: true,
				swipe: true,
				swipeOnlyClose: true,
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	appbar = new Appbar({
			props: {
				inc_cic: /*inc_cic*/ ctx[1],
				cicR: /*cicR*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	let if_block0 = /*settings*/ ctx[7].cart_type == "notification" && create_if_block_1(ctx);
	let if_block1 = /*request*/ ctx[8].page_type == 'index' && create_if_block(ctx);

	return {
		c() {
			svg = svg_element("svg");
			symbol0 = svg_element("symbol");
			path0 = svg_element("path");
			symbol1 = svg_element("symbol");
			path1 = svg_element("path");
			t0 = space();
			create_component(panel0.$$.fragment);
			t1 = space();
			create_component(panel1.$$.fragment);
			t2 = space();
			header = element("header");
			create_component(appbar.$$.fragment);
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			html_tag = new HtmlTagHydration(false);
			t5 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},
		l(nodes) {
			svg = claim_svg_element(nodes, "svg", { xmlns: true, class: true });
			var svg_nodes = children(svg);
			symbol0 = claim_svg_element(svg_nodes, "symbol", { id: true, viewBox: true, fill: true });
			var symbol0_nodes = children(symbol0);

			path0 = claim_svg_element(symbol0_nodes, "path", {
				"fill-rule": true,
				"clip-rule": true,
				d: true,
				fill: true
			});

			children(path0).forEach(detach);
			symbol0_nodes.forEach(detach);

			symbol1 = claim_svg_element(svg_nodes, "symbol", {
				id: true,
				class: true,
				fill: true,
				viewBox: true
			});

			var symbol1_nodes = children(symbol1);
			path1 = claim_svg_element(symbol1_nodes, "path", { d: true, fill: true });
			var path1_nodes = children(path1);
			path1_nodes.forEach(detach);
			symbol1_nodes.forEach(detach);
			svg_nodes.forEach(detach);
			t0 = claim_space(nodes);
			claim_component(panel0.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(panel1.$$.fragment, nodes);
			t2 = claim_space(nodes);
			header = claim_element(nodes, "HEADER", {});
			var header_nodes = children(header);
			claim_component(appbar.$$.fragment, header_nodes);
			header_nodes.forEach(detach);
			t3 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t4 = claim_space(nodes);
			html_tag = claim_html_tag(nodes, false);
			t5 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},
		h() {
			attr(path0, "fill-rule", "evenodd");
			attr(path0, "clip-rule", "evenodd");
			attr(path0, "d", "M11.03 11.68A5.784 5.784 0 112.85 3.5a5.784 5.784 0 018.18 8.18zm.26 1.12a6.78 6.78 0 11.72-.7l5.4 5.4a.5.5 0 11-.71.7l-5.41-5.4z");
			attr(path0, "fill", "currentColor");
			attr(symbol0, "id", "icon-search");
			attr(symbol0, "viewBox", "0 0 18 19");
			attr(symbol0, "fill", "none");
			attr(path1, "d", "M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z");
			attr(path1, "fill", "currentColor");
			attr(symbol1, "id", "icon-close");
			attr(symbol1, "class", "icon icon-close");
			attr(symbol1, "fill", "none");
			attr(symbol1, "viewBox", "0 0 18 17");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "hidden");
			html_tag.a = t5;
		},
		m(target, anchor) {
			insert_hydration(target, svg, anchor);
			append_hydration(svg, symbol0);
			append_hydration(symbol0, path0);
			append_hydration(svg, symbol1);
			append_hydration(symbol1, path1);
			insert_hydration(target, t0, anchor);
			mount_component(panel0, target, anchor);
			insert_hydration(target, t1, anchor);
			mount_component(panel1, target, anchor);
			insert_hydration(target, t2, anchor);
			insert_hydration(target, header, anchor);
			mount_component(appbar, header, null);
			insert_hydration(target, t3, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t4, anchor);
			html_tag.m(raw_value, target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const panel0_changes = {};
			if (dirty & /*inc_cic*/ 2) panel0_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) panel0_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, section*/ 524299) {
				panel0_changes.$$scope = { dirty, ctx };
			}

			panel0.$set(panel0_changes);
			const panel1_changes = {};
			if (dirty & /*inc_cic*/ 2) panel1_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) panel1_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR*/ 524291) {
				panel1_changes.$$scope = { dirty, ctx };
			}

			panel1.$set(panel1_changes);
			const appbar_changes = {};
			if (dirty & /*inc_cic*/ 2) appbar_changes.inc_cic = /*inc_cic*/ ctx[1];
			if (dirty & /*cicR*/ 1) appbar_changes.cicR = /*cicR*/ ctx[0];

			if (dirty & /*$$scope, inc_cic, cicR, cart*/ 524295) {
				appbar_changes.$$scope = { dirty, ctx };
			}

			appbar.$set(appbar_changes);
			if (/*settings*/ ctx[7].cart_type == "notification") if_block0.p(ctx, dirty);
			if (/*request*/ ctx[8].page_type == 'index') if_block1.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(panel0.$$.fragment, local);
			transition_in(panel1.$$.fragment, local);
			transition_in(appbar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(panel0.$$.fragment, local);
			transition_out(panel1.$$.fragment, local);
			transition_out(appbar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (detaching) detach(t0);
			destroy_component(panel0, detaching);
			if (detaching) detach(t1);
			destroy_component(panel1, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(header);
			destroy_component(appbar);
			if (detaching) detach(t3);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t4);
			if (detaching) html_tag.d();
			if (detaching) detach(t5);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	let { cicR } = $$props;
	let { inc_cic = () => $$invalidate(0, cicR = cicR + 1) } = $$props;
	inc_cic();
	const cic = cicR;
	let rawinclude_679e0e24 = themeImports['rawinclude_679e0e24'];
	let rawinclude_3be65912 = themeImports['rawinclude_3be65912'];
	let rawinclude_602baf9d = themeImports['rawinclude_602baf9d'];
	let cart = (themeImports['cart'].find(entry => entry.component_index == cic) || themeImports['cart'][0]).value;
	let shop = (themeImports['shop'].find(entry => entry.component_index == cic) || themeImports['shop'][0]).value;
	shop.name = (themeImports['shopƒƒname'].find(entry => entry.component_index == cic) || themeImports['shopƒƒname'][0]).value;
	const section = {};
	section.settings = (themeImports['sectionƒƒsettings'].find(entry => entry.component_index == cic) || themeImports['sectionƒƒsettings'][0]).value;
	let menu_json = (themeImports['menu_json'].find(entry => entry.component_index == cic) || themeImports['menu_json'][0]).value;
	section.settings.menu = JSON.parse(menu_json);
	let settings = (themeImports['settings'].find(entry => entry.component_index == cic) || themeImports['settings'][0]).value;
	(themeImports['logo_html'].find(entry => entry.component_index == cic) || themeImports['logo_html'][0]).value;
	console.log('settings ', settings);
	(themeImports['routes'].find(entry => entry.component_index == cic) || themeImports['routes'][0]).value;
	let request = (themeImports['request'].find(entry => entry.component_index == cic) || themeImports['request'][0]).value;
	(themeImports['account_url'].find(entry => entry.component_index == cic) || themeImports['account_url'][0]).value;
	(themeImports['account_text'].find(entry => entry.component_index == cic) || themeImports['account_text'][0]).value;

	// console.log('section header ', section);
	// console.log('section.settings.menu ', section.settings.menu);
	cartStore.subscribe(state => {
		if (state) {
			$$invalidate(2, cart = state);
		}
	});

	$$self.$$set = $$props => {
		if ('cicR' in $$props) $$invalidate(0, cicR = $$props.cicR);
		if ('inc_cic' in $$props) $$invalidate(1, inc_cic = $$props.inc_cic);
	};

	return [
		cicR,
		inc_cic,
		cart,
		section,
		rawinclude_679e0e24,
		rawinclude_3be65912,
		rawinclude_602baf9d,
		settings,
		request
	];
}

class Header extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { cicR: 0, inc_cic: 1 });
	}
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: Header
});

export { Header, Icon, Image, Loadable, Quantity_box, index };
