import { SvelteComponent, init, safe_not_equal, element, claim_element, children, detach, src_url_equal, attr, insert_hydration, append_hydration, noop, getContext, space, create_component, HtmlTagHydration, empty, claim_space, claim_component, claim_html_tag, mount_component, transition_in, transition_out, destroy_component, group_outros, check_outros, destroy_each, binding_callbacks } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import './framework7-liquivelte-hsa0091f48.liquivelte.js';
import { Swiper_slide } from './framework7-liquivelte-swiper-slide-hs8daa1a0c.liquivelte.js';
import { Swiper_1 } from './framework7-liquivelte-swiper-hs8daa1a0c.liquivelte.js';
import { freeMode, Mousewheel } from './framework7-liquivelte-get-params-hs6b273664.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-popup-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-view-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-router-context-provider-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-login-screen-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-sheet-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-popover-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-panel-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-mount-swiper-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-utils-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-get-changed-params-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-params-list-hs8daa1a0c.liquivelte.js';
import './framework7-liquivelte-update-swiper-hs8daa1a0c.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/slider-general/blocks/slider-image.liquivelte generated by Svelte v3.50.0 */

function create_fragment$1(ctx) {
	let div;
	let img;
	let img_src_value;

	return {
		c() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true });
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*liquid*/ ctx[1].image_url(/*block*/ ctx[0].settings.image, { "width": "2500" }))) attr(img, "src", img_src_value);
			attr(div, "class", "image");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, img);
		},
		p(ctx, [dirty]) {
			if (dirty & /*block*/ 1 && !src_url_equal(img.src, img_src_value = /*liquid*/ ctx[1].image_url(/*block*/ ctx[0].settings.image, { "width": "2500" }))) {
				attr(img, "src", img_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	getContext('svelteProps') || {};
	let lec = getContext('lec') || {};
	const liquid = cachedLiquid(lec);
	let { block } = $$props;
	let { sizes } = $$props;

	$$self.$$set = $$props => {
		if ('block' in $$props) $$invalidate(0, block = $$props.block);
		if ('sizes' in $$props) $$invalidate(2, sizes = $$props.sizes);
	};

	return [block, liquid, sizes];
}

class Slider_image extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { block: 0, sizes: 2 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/slider-general/index.liquivelte generated by Svelte v3.50.0 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[10] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[10] === 0,
		index: /*index*/ child_ctx[10] + 1,
		index0: /*index*/ child_ctx[10],
		last: /*index*/ child_ctx[10] === /*section*/ child_ctx[0].blocks.length - 1,
		rindex: /*section*/ child_ctx[0].blocks.length - /*index*/ child_ctx[10],
		rindex0: /*section*/ child_ctx[0].blocks.length - /*index*/ child_ctx[10] - 1,
		length: /*section*/ child_ctx[0].blocks.length
	};

	child_ctx[8] = constants_0;
	return child_ctx;
}

// (25:2) {#if section.settings.flush_with_header }
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "flush-shadow");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (41:4) {#if block.type == 'image' }
function create_if_block(ctx) {
	let swiperslide;
	let current;

	swiperslide = new Swiper_slide({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(swiperslide.$$.fragment);
		},
		l(nodes) {
			claim_component(swiperslide.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(swiperslide, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const swiperslide_changes = {};

			if (dirty & /*$$scope, section*/ 2049) {
				swiperslide_changes.$$scope = { dirty, ctx };
			}

			swiperslide.$set(swiperslide_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swiperslide.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiperslide.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(swiperslide, detaching);
		}
	};
}

// (42:8) <SwiperSlide   >
function create_default_slot_1(ctx) {
	let sliderimage;
	let t;
	let current;
	sliderimage = new Slider_image({ props: { block: /*block*/ ctx[7] } });

	return {
		c() {
			create_component(sliderimage.$$.fragment);
			t = space();
		},
		l(nodes) {
			claim_component(sliderimage.$$.fragment, nodes);
			t = claim_space(nodes);
		},
		m(target, anchor) {
			mount_component(sliderimage, target, anchor);
			insert_hydration(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const sliderimage_changes = {};
			if (dirty & /*section*/ 1) sliderimage_changes.block = /*block*/ ctx[7];
			sliderimage.$set(sliderimage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sliderimage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sliderimage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(sliderimage, detaching);
			if (detaching) detach(t);
		}
	};
}

// (31:4) {#each  section.blocks as block, index   }
function create_each_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*block*/ ctx[7].type == 'image' && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*block*/ ctx[7].type == 'image') {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*section*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (28:2) <Swiper  freemode="{ { enabled: true, sticky: true } }"            mousewheel="{ { forceToAxis: true, sensitivity: 1.5 } }"           modules="{[FreeMode, Mousewheel]}"  >
function create_default_slot(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*section*/ ctx[0].blocks;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*section*/ 1) {
				each_value = /*section*/ ctx[0].blocks;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let swiper;
	let t1;
	let html_tag;
	let raw_value = /*rawinclude_673107d4*/ ctx[2][0] + "";
	let html_anchor;
	let current;
	let if_block = /*section*/ ctx[0].settings.flush_with_header && create_if_block_1();

	swiper = new Swiper_1({
			props: {
				freemode: { enabled: true, sticky: true },
				mousewheel: { forceToAxis: true, sensitivity: 1.5 },
				modules: [freeMode, Mousewheel],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			create_component(swiper.$$.fragment);
			t1 = space();
			html_tag = new HtmlTagHydration(false);
			html_anchor = empty();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(swiper.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			t1 = claim_space(nodes);
			html_tag = claim_html_tag(nodes, false);
			html_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "relative");
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t0);
			mount_component(swiper, div, null);
			/*div_binding*/ ctx[3](div);
			insert_hydration(target, t1, anchor);
			html_tag.m(raw_value, target, anchor);
			insert_hydration(target, html_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*section*/ ctx[0].settings.flush_with_header) {
				if (if_block) ; else {
					if_block = create_if_block_1();
					if_block.c();
					if_block.m(div, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const swiper_changes = {};

			if (dirty & /*$$scope, section*/ 2049) {
				swiper_changes.$$scope = { dirty, ctx };
			}

			swiper.$set(swiper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(swiper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(swiper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			destroy_component(swiper);
			/*div_binding*/ ctx[3](null);
			if (detaching) detach(t1);
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let themeImports = getContext('svelteProps') || {};
	getContext('lec') || {};
	let rawinclude_673107d4 = themeImports['rawinclude_673107d4'];
	const section = {};
	section.settings = themeImports['sectionƒƒsettings'];
	section.blocks = themeImports['sectionƒƒblocks'];
	let container;
	console.log('general slider section ', section);
	console.log('general slider section.blocks ', section.blocks);

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	return [section, container, rawinclude_673107d4, div_binding];
}

class Slider_general extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Slider_general as default };
