import { SvelteComponent, init, safe_not_equal, empty, insert_hydration, group_outros, transition_out, check_outros, transition_in, detach, compute_rest_props, createEventDispatcher, assign, exclude_internal_props, binding_callbacks, element, claim_element, children, set_attributes, toggle_class, action_destroyer, listen, get_spread_update, is_function, run_all, create_slot, space, claim_space, update_slot_base, get_all_dirty_from_scope, get_slot_changes, create_component, claim_component, mount_component, append_hydration, destroy_component, text, claim_text, set_data } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import { createEmitter, extend, routerAttrs, isStringProp, restProps, actionsAttrs, classNames, colorClasses, routerClasses, actionsClasses, useIcon, useRouteProps, useTooltip } from './framework7-liquivelte-hs5d6b599e.liquivelte.js';
import { Use_icon } from './framework7-liquivelte-use-icon-hs8daa1a0c.liquivelte.js';
import { Preloader } from './framework7-liquivelte-preloader-hs8daa1a0c.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/button.liquivelte generated by Svelte v3.50.0 */

function create_else_block_1(ctx) {
	let a;
	let current_block_type_index;
	let if_block;
	let a_class_value;
	let useRouteProps_action;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_6, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*preloader*/ ctx[32]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let a_levels = [
		{
			class: a_class_value = "button " + /*classes*/ ctx[1] + " " + /*computedClasses*/ ctx[36]
		},
		/*attrs*/ ctx[40]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if_block.c();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { class: true });
			var a_nodes = children(a);
			if_block.l(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(a, a_data);
			toggle_class(a, "button-round", /*round*/ ctx[3]);
			toggle_class(a, "button-round-ios", /*roundIos*/ ctx[5]);
			toggle_class(a, "button-round-aurora", /*roundAurora*/ ctx[6]);
			toggle_class(a, "button-round-md", /*roundMd*/ ctx[4]);
			toggle_class(a, "button-fill", /*fill*/ ctx[7]);
			toggle_class(a, "button-fill-ios", /*fillIos*/ ctx[9]);
			toggle_class(a, "button-fill-aurora", /*fillAurora*/ ctx[10]);
			toggle_class(a, "button-fill-md", /*fillMd*/ ctx[8]);
			toggle_class(a, "button-large", /*large*/ ctx[11]);
			toggle_class(a, "button-large-ios", /*largeIos*/ ctx[13]);
			toggle_class(a, "button-large-aurora", /*largeAurora*/ ctx[14]);
			toggle_class(a, "button-large-md", /*largeMd*/ ctx[12]);
			toggle_class(a, "button-small", /*small*/ ctx[15]);
			toggle_class(a, "button-small-ios", /*smallIos*/ ctx[17]);
			toggle_class(a, "button-small-aurora", /*smallAurora*/ ctx[18]);
			toggle_class(a, "button-small-md", /*smallMd*/ ctx[16]);
			toggle_class(a, "button-raised", /*raised*/ ctx[19]);
			toggle_class(a, "button-raised-ios", /*raisedIos*/ ctx[21]);
			toggle_class(a, "button-raised-aurora", /*raisedAurora*/ ctx[22]);
			toggle_class(a, "button-raised-md", /*raisedMd*/ ctx[20]);
			toggle_class(a, "button-active", /*active*/ ctx[27]);
			toggle_class(a, "button-outline", /*outline*/ ctx[23]);
			toggle_class(a, "button-outline-ios", /*outlineIos*/ ctx[25]);
			toggle_class(a, "button-outline-aurora", /*outlineAurora*/ ctx[26]);
			toggle_class(a, "button-outline-md", /*outlineMd*/ ctx[24]);
			toggle_class(a, "button-preloader", /*preloader*/ ctx[32]);
			toggle_class(a, "button-loading", /*loading*/ ctx[35]);
			toggle_class(a, "disabled", /*disabled*/ ctx[28]);
		},
		m(target, anchor) {
			insert_hydration(target, a, anchor);
			if_blocks[current_block_type_index].m(a, null);
			/*a_binding*/ ctx[51](a);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useRouteProps_action = useRouteProps.call(null, a, /*routeProps*/ ctx[31])),
					listen(a, "click", /*onClick*/ ctx[41]),
					action_destroyer(useTooltip_action = useTooltip.call(null, a, {
						tooltip: /*tooltip*/ ctx[29],
						tooltipTrigger: /*tooltipTrigger*/ ctx[30]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(a, null);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty[0] & /*classes*/ 2 | dirty[1] & /*computedClasses*/ 32 && a_class_value !== (a_class_value = "button " + /*classes*/ ctx[1] + " " + /*computedClasses*/ ctx[36])) && { class: a_class_value },
				dirty[1] & /*attrs*/ 512 && /*attrs*/ ctx[40]
			]));

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty[1] & /*routeProps*/ 1) useRouteProps_action.update.call(null, /*routeProps*/ ctx[31]);

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 1610612736) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[29],
				tooltipTrigger: /*tooltipTrigger*/ ctx[30]
			});

			toggle_class(a, "button-round", /*round*/ ctx[3]);
			toggle_class(a, "button-round-ios", /*roundIos*/ ctx[5]);
			toggle_class(a, "button-round-aurora", /*roundAurora*/ ctx[6]);
			toggle_class(a, "button-round-md", /*roundMd*/ ctx[4]);
			toggle_class(a, "button-fill", /*fill*/ ctx[7]);
			toggle_class(a, "button-fill-ios", /*fillIos*/ ctx[9]);
			toggle_class(a, "button-fill-aurora", /*fillAurora*/ ctx[10]);
			toggle_class(a, "button-fill-md", /*fillMd*/ ctx[8]);
			toggle_class(a, "button-large", /*large*/ ctx[11]);
			toggle_class(a, "button-large-ios", /*largeIos*/ ctx[13]);
			toggle_class(a, "button-large-aurora", /*largeAurora*/ ctx[14]);
			toggle_class(a, "button-large-md", /*largeMd*/ ctx[12]);
			toggle_class(a, "button-small", /*small*/ ctx[15]);
			toggle_class(a, "button-small-ios", /*smallIos*/ ctx[17]);
			toggle_class(a, "button-small-aurora", /*smallAurora*/ ctx[18]);
			toggle_class(a, "button-small-md", /*smallMd*/ ctx[16]);
			toggle_class(a, "button-raised", /*raised*/ ctx[19]);
			toggle_class(a, "button-raised-ios", /*raisedIos*/ ctx[21]);
			toggle_class(a, "button-raised-aurora", /*raisedAurora*/ ctx[22]);
			toggle_class(a, "button-raised-md", /*raisedMd*/ ctx[20]);
			toggle_class(a, "button-active", /*active*/ ctx[27]);
			toggle_class(a, "button-outline", /*outline*/ ctx[23]);
			toggle_class(a, "button-outline-ios", /*outlineIos*/ ctx[25]);
			toggle_class(a, "button-outline-aurora", /*outlineAurora*/ ctx[26]);
			toggle_class(a, "button-outline-md", /*outlineMd*/ ctx[24]);
			toggle_class(a, "button-preloader", /*preloader*/ ctx[32]);
			toggle_class(a, "button-loading", /*loading*/ ctx[35]);
			toggle_class(a, "disabled", /*disabled*/ ctx[28]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if_blocks[current_block_type_index].d();
			/*a_binding*/ ctx[51](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (106:0) {#if tagName == 'button' }
function create_if_block(ctx) {
	let button;
	let current_block_type_index;
	let if_block;
	let button_class_value;
	let useRouteProps_action;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*preloader*/ ctx[32]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let button_levels = [
		{
			class: button_class_value = "button " + /*classes*/ ctx[1] + " " + /*computedClasses*/ ctx[36]
		},
		/*attrs*/ ctx[40]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if_block.c();
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			if_block.l(button_nodes);
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(button, button_data);
			toggle_class(button, "button-round", /*round*/ ctx[3]);
			toggle_class(button, "button-round-ios", /*roundIos*/ ctx[5]);
			toggle_class(button, "button-round-aurora", /*roundAurora*/ ctx[6]);
			toggle_class(button, "button-round-md", /*roundMd*/ ctx[4]);
			toggle_class(button, "button-fill", /*fill*/ ctx[7]);
			toggle_class(button, "button-fill-ios", /*fillIos*/ ctx[9]);
			toggle_class(button, "button-fill-aurora", /*fillAurora*/ ctx[10]);
			toggle_class(button, "button-fill-md", /*fillMd*/ ctx[8]);
			toggle_class(button, "button-large", /*large*/ ctx[11]);
			toggle_class(button, "button-large-ios", /*largeIos*/ ctx[13]);
			toggle_class(button, "button-large-aurora", /*largeAurora*/ ctx[14]);
			toggle_class(button, "button-large-md", /*largeMd*/ ctx[12]);
			toggle_class(button, "button-small", /*small*/ ctx[15]);
			toggle_class(button, "button-small-ios", /*smallIos*/ ctx[17]);
			toggle_class(button, "button-small-aurora", /*smallAurora*/ ctx[18]);
			toggle_class(button, "button-small-md", /*smallMd*/ ctx[16]);
			toggle_class(button, "button-raised", /*raised*/ ctx[19]);
			toggle_class(button, "button-raised-ios", /*raisedIos*/ ctx[21]);
			toggle_class(button, "button-raised-aurora", /*raisedAurora*/ ctx[22]);
			toggle_class(button, "button-raised-md", /*raisedMd*/ ctx[20]);
			toggle_class(button, "button-active", /*active*/ ctx[27]);
			toggle_class(button, "button-outline", /*outline*/ ctx[23]);
			toggle_class(button, "button-outline-ios", /*outlineIos*/ ctx[25]);
			toggle_class(button, "button-outline-aurora", /*outlineAurora*/ ctx[26]);
			toggle_class(button, "button-outline-md", /*outlineMd*/ ctx[24]);
			toggle_class(button, "button-preloader", /*preloader*/ ctx[32]);
			toggle_class(button, "button-loading", /*loading*/ ctx[35]);
			toggle_class(button, "disabled", /*disabled*/ ctx[28]);
		},
		m(target, anchor) {
			insert_hydration(target, button, anchor);
			if_blocks[current_block_type_index].m(button, null);
			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[50](button);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useRouteProps_action = useRouteProps.call(null, button, /*routeProps*/ ctx[31])),
					listen(button, "click", /*onClick*/ ctx[41]),
					action_destroyer(useTooltip_action = useTooltip.call(null, button, {
						tooltip: /*tooltip*/ ctx[29],
						tooltipTrigger: /*tooltipTrigger*/ ctx[30]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(button, null);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty[0] & /*classes*/ 2 | dirty[1] & /*computedClasses*/ 32 && button_class_value !== (button_class_value = "button " + /*classes*/ ctx[1] + " " + /*computedClasses*/ ctx[36])) && { class: button_class_value },
				dirty[1] & /*attrs*/ 512 && /*attrs*/ ctx[40]
			]));

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty[1] & /*routeProps*/ 1) useRouteProps_action.update.call(null, /*routeProps*/ ctx[31]);

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 1610612736) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[29],
				tooltipTrigger: /*tooltipTrigger*/ ctx[30]
			});

			toggle_class(button, "button-round", /*round*/ ctx[3]);
			toggle_class(button, "button-round-ios", /*roundIos*/ ctx[5]);
			toggle_class(button, "button-round-aurora", /*roundAurora*/ ctx[6]);
			toggle_class(button, "button-round-md", /*roundMd*/ ctx[4]);
			toggle_class(button, "button-fill", /*fill*/ ctx[7]);
			toggle_class(button, "button-fill-ios", /*fillIos*/ ctx[9]);
			toggle_class(button, "button-fill-aurora", /*fillAurora*/ ctx[10]);
			toggle_class(button, "button-fill-md", /*fillMd*/ ctx[8]);
			toggle_class(button, "button-large", /*large*/ ctx[11]);
			toggle_class(button, "button-large-ios", /*largeIos*/ ctx[13]);
			toggle_class(button, "button-large-aurora", /*largeAurora*/ ctx[14]);
			toggle_class(button, "button-large-md", /*largeMd*/ ctx[12]);
			toggle_class(button, "button-small", /*small*/ ctx[15]);
			toggle_class(button, "button-small-ios", /*smallIos*/ ctx[17]);
			toggle_class(button, "button-small-aurora", /*smallAurora*/ ctx[18]);
			toggle_class(button, "button-small-md", /*smallMd*/ ctx[16]);
			toggle_class(button, "button-raised", /*raised*/ ctx[19]);
			toggle_class(button, "button-raised-ios", /*raisedIos*/ ctx[21]);
			toggle_class(button, "button-raised-aurora", /*raisedAurora*/ ctx[22]);
			toggle_class(button, "button-raised-md", /*raisedMd*/ ctx[20]);
			toggle_class(button, "button-active", /*active*/ ctx[27]);
			toggle_class(button, "button-outline", /*outline*/ ctx[23]);
			toggle_class(button, "button-outline-ios", /*outlineIos*/ ctx[25]);
			toggle_class(button, "button-outline-aurora", /*outlineAurora*/ ctx[26]);
			toggle_class(button, "button-outline-md", /*outlineMd*/ ctx[24]);
			toggle_class(button, "button-preloader", /*preloader*/ ctx[32]);
			toggle_class(button, "button-loading", /*loading*/ ctx[35]);
			toggle_class(button, "disabled", /*disabled*/ ctx[28]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if_blocks[current_block_type_index].d();
			/*button_binding*/ ctx[50](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (212:4) {:else}
function create_else_block_2(ctx) {
	let t0;
	let t1;
	let current;
	let if_block0 = /*icon*/ ctx[38] && create_if_block_10(ctx);
	let if_block1 = /*text*/ ctx[2] != undefined && create_if_block_9(ctx);
	const default_slot_template = /*#slots*/ ctx[49].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], null);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[38]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*icon*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*text*/ ctx[2] != undefined) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_9(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[48],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[48])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[48], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (201:4) {#if preloader }
function create_if_block_6(ctx) {
	let preloader_1;
	let t0;
	let span;
	let t1;
	let t2;
	let current;

	preloader_1 = new Preloader({
			props: {
				size: /*preloaderSize*/ ctx[33],
				color: /*preloaderColor*/ ctx[34],
				lec: /*lec*/ ctx[0]
			}
		});

	let if_block0 = /*icon*/ ctx[38] && create_if_block_8(ctx);
	let if_block1 = /*text*/ ctx[2] != undefined && create_if_block_7(ctx);
	const default_slot_template = /*#slots*/ ctx[49].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], null);

	return {
		c() {
			create_component(preloader_1.$$.fragment);
			t0 = space();
			span = element("span");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			claim_component(preloader_1.$$.fragment, nodes);
			t0 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			if (if_block0) if_block0.l(span_nodes);
			t1 = claim_space(span_nodes);
			if (if_block1) if_block1.l(span_nodes);
			t2 = claim_space(span_nodes);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			mount_component(preloader_1, target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append_hydration(span, t1);
			if (if_block1) if_block1.m(span, null);
			append_hydration(span, t2);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			const preloader_1_changes = {};
			if (dirty[1] & /*preloaderSize*/ 4) preloader_1_changes.size = /*preloaderSize*/ ctx[33];
			if (dirty[1] & /*preloaderColor*/ 8) preloader_1_changes.color = /*preloaderColor*/ ctx[34];
			if (dirty[0] & /*lec*/ 1) preloader_1_changes.lec = /*lec*/ ctx[0];
			preloader_1.$set(preloader_1_changes);

			if (/*icon*/ ctx[38]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*icon*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(span, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*text*/ ctx[2] != undefined) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_7(ctx);
					if_block1.c();
					if_block1.m(span, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[48],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[48])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[48], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(preloader_1.$$.fragment, local);
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(preloader_1.$$.fragment, local);
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (213:6) {#if icon }
function create_if_block_10(ctx) {
	let useicon;
	let current;

	useicon = new Use_icon({
			props: {
				icon: /*icon*/ ctx[38],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		l(nodes) {
			claim_component(useicon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[1] & /*icon*/ 128) useicon_changes.icon = /*icon*/ ctx[38];
			if (dirty[0] & /*lec*/ 1) useicon_changes.lec = /*lec*/ ctx[0];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (216:6) {#if text != undefined }
function create_if_block_9(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[2]);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*text*/ ctx[2]);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (204:8) {#if icon }
function create_if_block_8(ctx) {
	let useicon;
	let current;

	useicon = new Use_icon({
			props: {
				icon: /*icon*/ ctx[38],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		l(nodes) {
			claim_component(useicon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[1] & /*icon*/ 128) useicon_changes.icon = /*icon*/ ctx[38];
			if (dirty[0] & /*lec*/ 1) useicon_changes.lec = /*lec*/ ctx[0];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (207:8) {#if text != undefined }
function create_if_block_7(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[2]);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*text*/ ctx[2]);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (154:4) {:else}
function create_else_block(ctx) {
	let t0;
	let t1;
	let current;
	let if_block0 = /*icon*/ ctx[38] && create_if_block_5(ctx);
	let if_block1 = /*text*/ ctx[2] != undefined && create_if_block_4(ctx);
	const default_slot_template = /*#slots*/ ctx[49].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], null);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[38]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*icon*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*text*/ ctx[2] != undefined) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[48],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[48])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[48], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (143:4) {#if preloader }
function create_if_block_1(ctx) {
	let preloader_1;
	let t0;
	let span;
	let t1;
	let t2;
	let current;

	preloader_1 = new Preloader({
			props: {
				size: /*preloaderSize*/ ctx[33],
				color: /*preloaderColor*/ ctx[34],
				lec: /*lec*/ ctx[0]
			}
		});

	let if_block0 = /*icon*/ ctx[38] && create_if_block_3(ctx);
	let if_block1 = /*text*/ ctx[2] != undefined && create_if_block_2(ctx);
	const default_slot_template = /*#slots*/ ctx[49].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], null);

	return {
		c() {
			create_component(preloader_1.$$.fragment);
			t0 = space();
			span = element("span");
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			claim_component(preloader_1.$$.fragment, nodes);
			t0 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			if (if_block0) if_block0.l(span_nodes);
			t1 = claim_space(span_nodes);
			if (if_block1) if_block1.l(span_nodes);
			t2 = claim_space(span_nodes);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			mount_component(preloader_1, target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append_hydration(span, t1);
			if (if_block1) if_block1.m(span, null);
			append_hydration(span, t2);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			const preloader_1_changes = {};
			if (dirty[1] & /*preloaderSize*/ 4) preloader_1_changes.size = /*preloaderSize*/ ctx[33];
			if (dirty[1] & /*preloaderColor*/ 8) preloader_1_changes.color = /*preloaderColor*/ ctx[34];
			if (dirty[0] & /*lec*/ 1) preloader_1_changes.lec = /*lec*/ ctx[0];
			preloader_1.$set(preloader_1_changes);

			if (/*icon*/ ctx[38]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*icon*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(span, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*text*/ ctx[2] != undefined) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(span, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[48],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[48])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[48], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(preloader_1.$$.fragment, local);
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(preloader_1.$$.fragment, local);
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			destroy_component(preloader_1, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (155:6) {#if icon }
function create_if_block_5(ctx) {
	let useicon;
	let current;

	useicon = new Use_icon({
			props: {
				icon: /*icon*/ ctx[38],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		l(nodes) {
			claim_component(useicon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[1] & /*icon*/ 128) useicon_changes.icon = /*icon*/ ctx[38];
			if (dirty[0] & /*lec*/ 1) useicon_changes.lec = /*lec*/ ctx[0];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (158:6) {#if text != undefined }
function create_if_block_4(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[2]);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*text*/ ctx[2]);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (146:8) {#if icon }
function create_if_block_3(ctx) {
	let useicon;
	let current;

	useicon = new Use_icon({
			props: {
				icon: /*icon*/ ctx[38],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(useicon.$$.fragment);
		},
		l(nodes) {
			claim_component(useicon.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(useicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const useicon_changes = {};
			if (dirty[1] & /*icon*/ 128) useicon_changes.icon = /*icon*/ ctx[38];
			if (dirty[0] & /*lec*/ 1) useicon_changes.lec = /*lec*/ ctx[0];
			useicon.$set(useicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(useicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(useicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(useicon, detaching);
		}
	};
}

// (149:8) {#if text != undefined }
function create_if_block_2(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[2]);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*text*/ ctx[2]);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*tagName*/ ctx[39] == 'button') return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hrefComputed;
	let attrs;
	let tagName;
	let icon;

	const omit_props_names = [
		"lec","classes","text","tabLink","tabLinkActive","type","href","target","round","roundMd","roundIos","roundAurora","fill","fillMd","fillIos","fillAurora","large","largeMd","largeIos","largeAurora","small","smallMd","smallIos","smallAurora","raised","raisedMd","raisedIos","raisedAurora","outline","outlineMd","outlineIos","outlineAurora","active","disabled","tooltip","tooltipTrigger","routeProps","preloader","preloaderSize","preloaderColor","loading"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { lec } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let computedClasses = undefined;
	let { classes } = $$props;
	let { text = undefined } = $$props;
	let { tabLink = undefined } = $$props;
	let { tabLinkActive = false } = $$props;
	let { type = undefined } = $$props;
	let { href = '#' } = $$props;
	let { target = undefined } = $$props;
	let { round = false } = $$props;
	let { roundMd = false } = $$props;
	let { roundIos = false } = $$props;
	let { roundAurora = false } = $$props;
	let { fill = false } = $$props;
	let { fillMd = false } = $$props;
	let { fillIos = false } = $$props;
	let { fillAurora = false } = $$props;
	let { large = false } = $$props;
	let { largeMd = false } = $$props;
	let { largeIos = false } = $$props;
	let { largeAurora = false } = $$props;
	let { small = false } = $$props;
	let { smallMd = false } = $$props;
	let { smallIos = false } = $$props;
	let { smallAurora = false } = $$props;
	let { raised = false } = $$props;
	let { raisedMd = false } = $$props;
	let { raisedIos = false } = $$props;
	let { raisedAurora = false } = $$props;
	let { outline = false } = $$props;
	let { outlineMd = false } = $$props;
	let { outlineIos = false } = $$props;
	let { outlineAurora = false } = $$props;
	let { active = false } = $$props;
	let { disabled = false } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { routeProps = undefined } = $$props;
	let { preloader = false } = $$props;
	let { preloaderSize = undefined } = $$props;
	let { preloaderColor = undefined } = $$props;
	let { loading = false } = $$props;
	let el;

	function onClick() {
		emit('click');
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(37, el);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(37, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(54, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(55, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('lec' in $$new_props) $$invalidate(0, lec = $$new_props.lec);
		if ('classes' in $$new_props) $$invalidate(1, classes = $$new_props.classes);
		if ('text' in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ('tabLink' in $$new_props) $$invalidate(42, tabLink = $$new_props.tabLink);
		if ('tabLinkActive' in $$new_props) $$invalidate(43, tabLinkActive = $$new_props.tabLinkActive);
		if ('type' in $$new_props) $$invalidate(44, type = $$new_props.type);
		if ('href' in $$new_props) $$invalidate(45, href = $$new_props.href);
		if ('target' in $$new_props) $$invalidate(46, target = $$new_props.target);
		if ('round' in $$new_props) $$invalidate(3, round = $$new_props.round);
		if ('roundMd' in $$new_props) $$invalidate(4, roundMd = $$new_props.roundMd);
		if ('roundIos' in $$new_props) $$invalidate(5, roundIos = $$new_props.roundIos);
		if ('roundAurora' in $$new_props) $$invalidate(6, roundAurora = $$new_props.roundAurora);
		if ('fill' in $$new_props) $$invalidate(7, fill = $$new_props.fill);
		if ('fillMd' in $$new_props) $$invalidate(8, fillMd = $$new_props.fillMd);
		if ('fillIos' in $$new_props) $$invalidate(9, fillIos = $$new_props.fillIos);
		if ('fillAurora' in $$new_props) $$invalidate(10, fillAurora = $$new_props.fillAurora);
		if ('large' in $$new_props) $$invalidate(11, large = $$new_props.large);
		if ('largeMd' in $$new_props) $$invalidate(12, largeMd = $$new_props.largeMd);
		if ('largeIos' in $$new_props) $$invalidate(13, largeIos = $$new_props.largeIos);
		if ('largeAurora' in $$new_props) $$invalidate(14, largeAurora = $$new_props.largeAurora);
		if ('small' in $$new_props) $$invalidate(15, small = $$new_props.small);
		if ('smallMd' in $$new_props) $$invalidate(16, smallMd = $$new_props.smallMd);
		if ('smallIos' in $$new_props) $$invalidate(17, smallIos = $$new_props.smallIos);
		if ('smallAurora' in $$new_props) $$invalidate(18, smallAurora = $$new_props.smallAurora);
		if ('raised' in $$new_props) $$invalidate(19, raised = $$new_props.raised);
		if ('raisedMd' in $$new_props) $$invalidate(20, raisedMd = $$new_props.raisedMd);
		if ('raisedIos' in $$new_props) $$invalidate(21, raisedIos = $$new_props.raisedIos);
		if ('raisedAurora' in $$new_props) $$invalidate(22, raisedAurora = $$new_props.raisedAurora);
		if ('outline' in $$new_props) $$invalidate(23, outline = $$new_props.outline);
		if ('outlineMd' in $$new_props) $$invalidate(24, outlineMd = $$new_props.outlineMd);
		if ('outlineIos' in $$new_props) $$invalidate(25, outlineIos = $$new_props.outlineIos);
		if ('outlineAurora' in $$new_props) $$invalidate(26, outlineAurora = $$new_props.outlineAurora);
		if ('active' in $$new_props) $$invalidate(27, active = $$new_props.active);
		if ('disabled' in $$new_props) $$invalidate(28, disabled = $$new_props.disabled);
		if ('tooltip' in $$new_props) $$invalidate(29, tooltip = $$new_props.tooltip);
		if ('tooltipTrigger' in $$new_props) $$invalidate(30, tooltipTrigger = $$new_props.tooltipTrigger);
		if ('routeProps' in $$new_props) $$invalidate(31, routeProps = $$new_props.routeProps);
		if ('preloader' in $$new_props) $$invalidate(32, preloader = $$new_props.preloader);
		if ('preloaderSize' in $$new_props) $$invalidate(33, preloaderSize = $$new_props.preloaderSize);
		if ('preloaderColor' in $$new_props) $$invalidate(34, preloaderColor = $$new_props.preloaderColor);
		if ('loading' in $$new_props) $$invalidate(35, loading = $$new_props.loading);
		if ('$$scope' in $$new_props) $$invalidate(48, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[1] & /*href*/ 16384) {
			$$invalidate(47, hrefComputed = href === true ? '#' : href || undefined);
		}

		$$invalidate(40, attrs = extend(
			{
				href: hrefComputed,
				target,
				type,
				'data-tab': isStringProp(tabLink) && tabLink || undefined,
				...restProps($$restProps)
			},
			routerAttrs($$props),
			actionsAttrs($$props)
		));

		$$invalidate(36, computedClasses = classNames(
			classes,
			{
				'tab-link': tabLink || tabLink === '',
				'tab-link-active': tabLinkActive
			},
			colorClasses($$props),
			routerClasses($$props),
			actionsClasses($$props)
		));

		if ($$self.$$.dirty[1] & /*type*/ 8192) {
			$$invalidate(39, tagName = type === 'submit' || type === 'reset' || type === 'button'
			? 'button'
			: 'a');
		}

		$$invalidate(38, icon = useIcon($$props));
	};

	$$props = exclude_internal_props($$props);

	return [
		lec,
		classes,
		text,
		round,
		roundMd,
		roundIos,
		roundAurora,
		fill,
		fillMd,
		fillIos,
		fillAurora,
		large,
		largeMd,
		largeIos,
		largeAurora,
		small,
		smallMd,
		smallIos,
		smallAurora,
		raised,
		raisedMd,
		raisedIos,
		raisedAurora,
		outline,
		outlineMd,
		outlineIos,
		outlineAurora,
		active,
		disabled,
		tooltip,
		tooltipTrigger,
		routeProps,
		preloader,
		preloaderSize,
		preloaderColor,
		loading,
		computedClasses,
		el,
		icon,
		tagName,
		attrs,
		onClick,
		tabLink,
		tabLinkActive,
		type,
		href,
		target,
		hrefComputed,
		$$scope,
		slots,
		button_binding,
		a_binding
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				lec: 0,
				classes: 1,
				text: 2,
				tabLink: 42,
				tabLinkActive: 43,
				type: 44,
				href: 45,
				target: 46,
				round: 3,
				roundMd: 4,
				roundIos: 5,
				roundAurora: 6,
				fill: 7,
				fillMd: 8,
				fillIos: 9,
				fillAurora: 10,
				large: 11,
				largeMd: 12,
				largeIos: 13,
				largeAurora: 14,
				small: 15,
				smallMd: 16,
				smallIos: 17,
				smallAurora: 18,
				raised: 19,
				raisedMd: 20,
				raisedIos: 21,
				raisedAurora: 22,
				outline: 23,
				outlineMd: 24,
				outlineIos: 25,
				outlineAurora: 26,
				active: 27,
				disabled: 28,
				tooltip: 29,
				tooltipTrigger: 30,
				routeProps: 31,
				preloader: 32,
				preloaderSize: 33,
				preloaderColor: 34,
				loading: 35
			},
			null,
			[-1, -1]
		);
	}
}

export { Button };
