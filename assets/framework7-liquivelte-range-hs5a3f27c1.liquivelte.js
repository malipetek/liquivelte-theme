import { SvelteComponent, init, safe_not_equal, create_slot, assign, element, space, claim_element, children, claim_space, detach, set_attributes, insert_hydration, append_hydration, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, transition_in, transition_out, compute_rest_props, getContext, createEventDispatcher, onMount, onDestroy, exclude_internal_props, attr, binding_callbacks } from './liquivelte-svelte-hse72de747.liquivelte.js';
import { restProps, createEmitter, f7ready, app, noUndefinedProps, classNames, colorClasses } from './framework7-liquivelte-hs390c8ed0.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/range.liquivelte generated by Svelte v3.50.0 */
const get_default_slot_changes = dirty => ({ range: dirty[0] & /*f7Range*/ 32 });
const get_default_slot_context = ctx => ({ range: /*f7Range*/ ctx[5] });

// (116:2) {#if input}
function create_if_block(ctx) {
	let input_1;

	return {
		c() {
			input_1 = element("input");
			this.h();
		},
		l(nodes) {
			input_1 = claim_element(nodes, "INPUT", { type: true, name: true, id: true });
			this.h();
		},
		h() {
			attr(input_1, "type", "range");
			attr(input_1, "name", /*name*/ ctx[0]);
			attr(input_1, "id", /*inputId*/ ctx[2]);
		},
		m(target, anchor) {
			insert_hydration(target, input_1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*name*/ 1) {
				attr(input_1, "name", /*name*/ ctx[0]);
			}

			if (dirty[0] & /*inputId*/ 4) {
				attr(input_1, "id", /*inputId*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(input_1);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*input*/ ctx[1] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[28].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[27], get_default_slot_context);
	let div_levels = [{ class: /*computedClasses*/ ctx[3] }, restProps(/*$$restProps*/ ctx[6])];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[29](div);
			current = true;
		},
		p(ctx, dirty) {
			if (/*input*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, f7Range*/ 134217760)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[27],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[27], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty[0] & /*computedClasses*/ 8) && { class: /*computedClasses*/ ctx[3] },
				dirty[0] & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[29](null);
		}
	};
}

function instance_1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"importsSeek","classes","init","value","min","max","step","label","dual","vertical","verticalReversed","draggableBar","formatLabel","scale","scaleSteps","scaleSubSteps","formatScaleLabel","limitKnobPosition","name","input","inputId","disabled","instance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { importsSeek = 'lower' } = $$props;
	getContext('svelteProps') || {};
	getContext('lec') || {};
	(() => window.cicR = $$props.resetCicR ? 1 : window.cicR + 1)();
	const emit = createEmitter(createEventDispatcher, $$props);
	let computedClasses = undefined;
	let { classes = '' } = $$props;
	let { init = true } = $$props;
	let { value = 0 } = $$props;
	let { min = 0 } = $$props;
	let { max = 100 } = $$props;
	let { step = 1 } = $$props;
	let { label = false } = $$props;
	let { dual = false } = $$props;
	let { vertical = false } = $$props;
	let { verticalReversed = false } = $$props;
	let { draggableBar = true } = $$props;
	let { formatLabel = undefined } = $$props;
	let { scale = false } = $$props;
	let { scaleSteps = 5 } = $$props;
	let { scaleSubSteps = 0 } = $$props;
	let { formatScaleLabel = undefined } = $$props;
	let { limitKnobPosition = undefined } = $$props;
	let { name = undefined } = $$props;
	let { input = false } = $$props;
	let { inputId = undefined } = $$props;
	let { disabled = false } = $$props;
	let el;
	let f7Range;

	function instance() {
		return f7Range;
	}

	function watchValue(newValue) {
		if (!f7Range) return;
		f7Range.setValue(newValue);
	}

	onMount(() => {
		if (!init) return;

		f7ready(() => {
			$$invalidate(5, f7Range = app.f7.range.create(noUndefinedProps({
				el,
				value,
				min,
				max,
				step,
				label,
				dual,
				draggableBar,
				vertical,
				verticalReversed,
				formatLabel,
				scale,
				scaleSteps,
				scaleSubSteps,
				formatScaleLabel,
				limitKnobPosition,
				on: {
					change(range, val) {
						emit('rangeChange', [val]);
					},
					changed(range, val) {
						emit('rangeChanged', [val]);
						$$invalidate(7, value = val);
					}
				}
			})));
		});
	});

	onDestroy(() => {
		if (f7Range && f7Range.destroy) {
			f7Range.destroy();
			$$invalidate(5, f7Range = null);
		}
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(4, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(36, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('importsSeek' in $$new_props) $$invalidate(8, importsSeek = $$new_props.importsSeek);
		if ('classes' in $$new_props) $$invalidate(9, classes = $$new_props.classes);
		if ('init' in $$new_props) $$invalidate(10, init = $$new_props.init);
		if ('value' in $$new_props) $$invalidate(7, value = $$new_props.value);
		if ('min' in $$new_props) $$invalidate(11, min = $$new_props.min);
		if ('max' in $$new_props) $$invalidate(12, max = $$new_props.max);
		if ('step' in $$new_props) $$invalidate(13, step = $$new_props.step);
		if ('label' in $$new_props) $$invalidate(14, label = $$new_props.label);
		if ('dual' in $$new_props) $$invalidate(15, dual = $$new_props.dual);
		if ('vertical' in $$new_props) $$invalidate(16, vertical = $$new_props.vertical);
		if ('verticalReversed' in $$new_props) $$invalidate(17, verticalReversed = $$new_props.verticalReversed);
		if ('draggableBar' in $$new_props) $$invalidate(18, draggableBar = $$new_props.draggableBar);
		if ('formatLabel' in $$new_props) $$invalidate(19, formatLabel = $$new_props.formatLabel);
		if ('scale' in $$new_props) $$invalidate(20, scale = $$new_props.scale);
		if ('scaleSteps' in $$new_props) $$invalidate(21, scaleSteps = $$new_props.scaleSteps);
		if ('scaleSubSteps' in $$new_props) $$invalidate(22, scaleSubSteps = $$new_props.scaleSubSteps);
		if ('formatScaleLabel' in $$new_props) $$invalidate(23, formatScaleLabel = $$new_props.formatScaleLabel);
		if ('limitKnobPosition' in $$new_props) $$invalidate(24, limitKnobPosition = $$new_props.limitKnobPosition);
		if ('name' in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ('input' in $$new_props) $$invalidate(1, input = $$new_props.input);
		if ('inputId' in $$new_props) $$invalidate(2, inputId = $$new_props.inputId);
		if ('disabled' in $$new_props) $$invalidate(25, disabled = $$new_props.disabled);
		if ('$$scope' in $$new_props) $$invalidate(27, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(3, computedClasses = classNames(
			classes,
			'range-slider',
			{
				'range-slider-horizontal': !vertical,
				'range-slider-vertical': vertical,
				'range-slider-vertical-reversed': vertical && verticalReversed,
				disabled
			},
			colorClasses($$props)
		));

		if ($$self.$$.dirty[0] & /*value*/ 128) {
			watchValue(value);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		name,
		input,
		inputId,
		computedClasses,
		el,
		f7Range,
		$$restProps,
		value,
		importsSeek,
		classes,
		init,
		min,
		max,
		step,
		label,
		dual,
		vertical,
		verticalReversed,
		draggableBar,
		formatLabel,
		scale,
		scaleSteps,
		scaleSubSteps,
		formatScaleLabel,
		limitKnobPosition,
		disabled,
		instance,
		$$scope,
		slots,
		div_binding
	];
}

class Range extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance_1,
			create_fragment,
			safe_not_equal,
			{
				importsSeek: 8,
				classes: 9,
				init: 10,
				value: 7,
				min: 11,
				max: 12,
				step: 13,
				label: 14,
				dual: 15,
				vertical: 16,
				verticalReversed: 17,
				draggableBar: 18,
				formatLabel: 19,
				scale: 20,
				scaleSteps: 21,
				scaleSubSteps: 22,
				formatScaleLabel: 23,
				limitKnobPosition: 24,
				name: 0,
				input: 1,
				inputId: 2,
				disabled: 25,
				instance: 26
			},
			null,
			[-1, -1]
		);
	}

	get instance() {
		return this.$$.ctx[26];
	}
}

export { Range };
