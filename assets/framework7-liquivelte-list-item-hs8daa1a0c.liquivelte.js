import { SvelteComponent, init, safe_not_equal, empty, insert_hydration, group_outros, transition_out, check_outros, transition_in, detach, compute_rest_props, compute_slots, createEventDispatcher, onMount, afterUpdate, onDestroy, assign, exclude_internal_props, binding_callbacks, create_slot, element, space, claim_element, children, claim_space, set_attributes, append_hydration, action_destroyer, update_slot_base, get_all_dirty_from_scope, get_slot_changes, get_spread_update, is_function, text, claim_text, listen, set_data, run_all, attr, src_url_equal, create_component, claim_component, mount_component, destroy_component } from './liquivelte-svelte-hs532e1aa9.liquivelte.js';
import { createEmitter, getReactiveContext, useSmartSelect, f7ready, app, classNames, colorClasses, routerClasses, actionsClasses, isStringProp, routerAttrs, actionsAttrs, restProps, useTooltip, plainText, useRouteProps } from './framework7-liquivelte-hs5d6b599e.liquivelte.js';
import { Badge } from './framework7-liquivelte-badge-hs8daa1a0c.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/node_modules/framework7-liquivelte/components/list-item.liquivelte generated by Svelte v3.50.0 */
const get_root_end_slot_changes = dirty => ({});
const get_root_end_slot_context = ctx => ({});
const get_root_slot_changes = dirty => ({});
const get_root_slot_context = ctx => ({});
const get_content_end_slot_changes_5 = dirty => ({});
const get_content_end_slot_context_5 = ctx => ({});
const get_content_slot_changes_5 = dirty => ({});
const get_content_slot_context_5 = ctx => ({});
const get_inner_end_slot_changes_5 = dirty => ({});
const get_inner_end_slot_context_5 = ctx => ({});
const get_inner_slot_changes_11 = dirty => ({});
const get_inner_slot_context_11 = ctx => ({});
const get_after_end_slot_changes_11 = dirty => ({});
const get_after_end_slot_context_11 = ctx => ({});
const get_after_slot_changes_11 = dirty => ({});
const get_after_slot_context_11 = ctx => ({});
const get_after_start_slot_changes_11 = dirty => ({});
const get_after_start_slot_context_11 = ctx => ({});
const get_after_title_slot_changes_11 = dirty => ({});
const get_after_title_slot_context_11 = ctx => ({});
const get_footer_slot_changes_11 = dirty => ({});
const get_footer_slot_context_11 = ctx => ({});
const get_title_slot_changes_11 = dirty => ({});
const get_title_slot_context_11 = ctx => ({});
const get_header_slot_changes_11 = dirty => ({});
const get_header_slot_context_11 = ctx => ({});
const get_before_title_slot_changes_11 = dirty => ({});
const get_before_title_slot_context_11 = ctx => ({});
const get_footer_slot_changes_10 = dirty => ({});
const get_footer_slot_context_10 = ctx => ({});
const get_inner_slot_changes_10 = dirty => ({});
const get_inner_slot_context_10 = ctx => ({});
const get_text_slot_changes_5 = dirty => ({});
const get_text_slot_context_5 = ctx => ({});
const get_subtitle_slot_changes_5 = dirty => ({});
const get_subtitle_slot_context_5 = ctx => ({});
const get_after_end_slot_changes_10 = dirty => ({});
const get_after_end_slot_context_10 = ctx => ({});
const get_after_slot_changes_10 = dirty => ({});
const get_after_slot_context_10 = ctx => ({});
const get_after_start_slot_changes_10 = dirty => ({});
const get_after_start_slot_context_10 = ctx => ({});
const get_after_title_slot_changes_10 = dirty => ({});
const get_after_title_slot_context_10 = ctx => ({});
const get_title_slot_changes_10 = dirty => ({});
const get_title_slot_context_10 = ctx => ({});
const get_before_title_slot_changes_10 = dirty => ({});
const get_before_title_slot_context_10 = ctx => ({});
const get_header_slot_changes_10 = dirty => ({});
const get_header_slot_context_10 = ctx => ({});
const get_inner_start_slot_changes_5 = dirty => ({});
const get_inner_start_slot_context_5 = ctx => ({});
const get_media_slot_changes_5 = dirty => ({});
const get_media_slot_context_5 = ctx => ({});
const get_content_start_slot_changes_5 = dirty => ({});
const get_content_start_slot_context_5 = ctx => ({});
const get_content_end_slot_changes_4 = dirty => ({});
const get_content_end_slot_context_4 = ctx => ({});
const get_content_slot_changes_4 = dirty => ({});
const get_content_slot_context_4 = ctx => ({});
const get_inner_end_slot_changes_4 = dirty => ({});
const get_inner_end_slot_context_4 = ctx => ({});
const get_inner_slot_changes_9 = dirty => ({});
const get_inner_slot_context_9 = ctx => ({});
const get_after_end_slot_changes_9 = dirty => ({});
const get_after_end_slot_context_9 = ctx => ({});
const get_after_slot_changes_9 = dirty => ({});
const get_after_slot_context_9 = ctx => ({});
const get_after_start_slot_changes_9 = dirty => ({});
const get_after_start_slot_context_9 = ctx => ({});
const get_after_title_slot_changes_9 = dirty => ({});
const get_after_title_slot_context_9 = ctx => ({});
const get_footer_slot_changes_9 = dirty => ({});
const get_footer_slot_context_9 = ctx => ({});
const get_title_slot_changes_9 = dirty => ({});
const get_title_slot_context_9 = ctx => ({});
const get_header_slot_changes_9 = dirty => ({});
const get_header_slot_context_9 = ctx => ({});
const get_before_title_slot_changes_9 = dirty => ({});
const get_before_title_slot_context_9 = ctx => ({});
const get_footer_slot_changes_8 = dirty => ({});
const get_footer_slot_context_8 = ctx => ({});
const get_inner_slot_changes_8 = dirty => ({});
const get_inner_slot_context_8 = ctx => ({});
const get_text_slot_changes_4 = dirty => ({});
const get_text_slot_context_4 = ctx => ({});
const get_subtitle_slot_changes_4 = dirty => ({});
const get_subtitle_slot_context_4 = ctx => ({});
const get_after_end_slot_changes_8 = dirty => ({});
const get_after_end_slot_context_8 = ctx => ({});
const get_after_slot_changes_8 = dirty => ({});
const get_after_slot_context_8 = ctx => ({});
const get_after_start_slot_changes_8 = dirty => ({});
const get_after_start_slot_context_8 = ctx => ({});
const get_after_title_slot_changes_8 = dirty => ({});
const get_after_title_slot_context_8 = ctx => ({});
const get_title_slot_changes_8 = dirty => ({});
const get_title_slot_context_8 = ctx => ({});
const get_before_title_slot_changes_8 = dirty => ({});
const get_before_title_slot_context_8 = ctx => ({});
const get_header_slot_changes_8 = dirty => ({});
const get_header_slot_context_8 = ctx => ({});
const get_inner_start_slot_changes_4 = dirty => ({});
const get_inner_start_slot_context_4 = ctx => ({});
const get_media_slot_changes_4 = dirty => ({});
const get_media_slot_context_4 = ctx => ({});
const get_content_start_slot_changes_4 = dirty => ({});
const get_content_start_slot_context_4 = ctx => ({});
const get_content_end_slot_changes_3 = dirty => ({});
const get_content_end_slot_context_3 = ctx => ({});
const get_content_slot_changes_3 = dirty => ({});
const get_content_slot_context_3 = ctx => ({});
const get_inner_end_slot_changes_3 = dirty => ({});
const get_inner_end_slot_context_3 = ctx => ({});
const get_inner_slot_changes_7 = dirty => ({});
const get_inner_slot_context_7 = ctx => ({});
const get_after_end_slot_changes_7 = dirty => ({});
const get_after_end_slot_context_7 = ctx => ({});
const get_after_slot_changes_7 = dirty => ({});
const get_after_slot_context_7 = ctx => ({});
const get_after_start_slot_changes_7 = dirty => ({});
const get_after_start_slot_context_7 = ctx => ({});
const get_after_title_slot_changes_7 = dirty => ({});
const get_after_title_slot_context_7 = ctx => ({});
const get_footer_slot_changes_7 = dirty => ({});
const get_footer_slot_context_7 = ctx => ({});
const get_title_slot_changes_7 = dirty => ({});
const get_title_slot_context_7 = ctx => ({});
const get_header_slot_changes_7 = dirty => ({});
const get_header_slot_context_7 = ctx => ({});
const get_before_title_slot_changes_7 = dirty => ({});
const get_before_title_slot_context_7 = ctx => ({});
const get_footer_slot_changes_6 = dirty => ({});
const get_footer_slot_context_6 = ctx => ({});
const get_inner_slot_changes_6 = dirty => ({});
const get_inner_slot_context_6 = ctx => ({});
const get_text_slot_changes_3 = dirty => ({});
const get_text_slot_context_3 = ctx => ({});
const get_subtitle_slot_changes_3 = dirty => ({});
const get_subtitle_slot_context_3 = ctx => ({});
const get_after_end_slot_changes_6 = dirty => ({});
const get_after_end_slot_context_6 = ctx => ({});
const get_after_slot_changes_6 = dirty => ({});
const get_after_slot_context_6 = ctx => ({});
const get_after_start_slot_changes_6 = dirty => ({});
const get_after_start_slot_context_6 = ctx => ({});
const get_after_title_slot_changes_6 = dirty => ({});
const get_after_title_slot_context_6 = ctx => ({});
const get_title_slot_changes_6 = dirty => ({});
const get_title_slot_context_6 = ctx => ({});
const get_before_title_slot_changes_6 = dirty => ({});
const get_before_title_slot_context_6 = ctx => ({});
const get_header_slot_changes_6 = dirty => ({});
const get_header_slot_context_6 = ctx => ({});
const get_inner_start_slot_changes_3 = dirty => ({});
const get_inner_start_slot_context_3 = ctx => ({});
const get_media_slot_changes_3 = dirty => ({});
const get_media_slot_context_3 = ctx => ({});
const get_content_start_slot_changes_3 = dirty => ({});
const get_content_start_slot_context_3 = ctx => ({});
const get_content_end_slot_changes_2 = dirty => ({});
const get_content_end_slot_context_2 = ctx => ({});
const get_content_slot_changes_2 = dirty => ({});
const get_content_slot_context_2 = ctx => ({});
const get_inner_end_slot_changes_2 = dirty => ({});
const get_inner_end_slot_context_2 = ctx => ({});
const get_inner_slot_changes_5 = dirty => ({});
const get_inner_slot_context_5 = ctx => ({});
const get_after_end_slot_changes_5 = dirty => ({});
const get_after_end_slot_context_5 = ctx => ({});
const get_after_slot_changes_5 = dirty => ({});
const get_after_slot_context_5 = ctx => ({});
const get_after_start_slot_changes_5 = dirty => ({});
const get_after_start_slot_context_5 = ctx => ({});
const get_after_title_slot_changes_5 = dirty => ({});
const get_after_title_slot_context_5 = ctx => ({});
const get_footer_slot_changes_5 = dirty => ({});
const get_footer_slot_context_5 = ctx => ({});
const get_title_slot_changes_5 = dirty => ({});
const get_title_slot_context_5 = ctx => ({});
const get_header_slot_changes_5 = dirty => ({});
const get_header_slot_context_5 = ctx => ({});
const get_before_title_slot_changes_5 = dirty => ({});
const get_before_title_slot_context_5 = ctx => ({});
const get_footer_slot_changes_4 = dirty => ({});
const get_footer_slot_context_4 = ctx => ({});
const get_inner_slot_changes_4 = dirty => ({});
const get_inner_slot_context_4 = ctx => ({});
const get_text_slot_changes_2 = dirty => ({});
const get_text_slot_context_2 = ctx => ({});
const get_subtitle_slot_changes_2 = dirty => ({});
const get_subtitle_slot_context_2 = ctx => ({});
const get_after_end_slot_changes_4 = dirty => ({});
const get_after_end_slot_context_4 = ctx => ({});
const get_after_slot_changes_4 = dirty => ({});
const get_after_slot_context_4 = ctx => ({});
const get_after_start_slot_changes_4 = dirty => ({});
const get_after_start_slot_context_4 = ctx => ({});
const get_after_title_slot_changes_4 = dirty => ({});
const get_after_title_slot_context_4 = ctx => ({});
const get_title_slot_changes_4 = dirty => ({});
const get_title_slot_context_4 = ctx => ({});
const get_before_title_slot_changes_4 = dirty => ({});
const get_before_title_slot_context_4 = ctx => ({});
const get_header_slot_changes_4 = dirty => ({});
const get_header_slot_context_4 = ctx => ({});
const get_inner_start_slot_changes_2 = dirty => ({});
const get_inner_start_slot_context_2 = ctx => ({});
const get_media_slot_changes_2 = dirty => ({});
const get_media_slot_context_2 = ctx => ({});
const get_content_start_slot_changes_2 = dirty => ({});
const get_content_start_slot_context_2 = ctx => ({});
const get_content_end_slot_changes_1 = dirty => ({});
const get_content_end_slot_context_1 = ctx => ({});
const get_content_slot_changes_1 = dirty => ({});
const get_content_slot_context_1 = ctx => ({});
const get_inner_end_slot_changes_1 = dirty => ({});
const get_inner_end_slot_context_1 = ctx => ({});
const get_inner_slot_changes_3 = dirty => ({});
const get_inner_slot_context_3 = ctx => ({});
const get_after_end_slot_changes_3 = dirty => ({});
const get_after_end_slot_context_3 = ctx => ({});
const get_after_slot_changes_3 = dirty => ({});
const get_after_slot_context_3 = ctx => ({});
const get_after_start_slot_changes_3 = dirty => ({});
const get_after_start_slot_context_3 = ctx => ({});
const get_after_title_slot_changes_3 = dirty => ({});
const get_after_title_slot_context_3 = ctx => ({});
const get_footer_slot_changes_3 = dirty => ({});
const get_footer_slot_context_3 = ctx => ({});
const get_title_slot_changes_3 = dirty => ({});
const get_title_slot_context_3 = ctx => ({});
const get_header_slot_changes_3 = dirty => ({});
const get_header_slot_context_3 = ctx => ({});
const get_before_title_slot_changes_3 = dirty => ({});
const get_before_title_slot_context_3 = ctx => ({});
const get_footer_slot_changes_2 = dirty => ({});
const get_footer_slot_context_2 = ctx => ({});
const get_inner_slot_changes_2 = dirty => ({});
const get_inner_slot_context_2 = ctx => ({});
const get_text_slot_changes_1 = dirty => ({});
const get_text_slot_context_1 = ctx => ({});
const get_subtitle_slot_changes_1 = dirty => ({});
const get_subtitle_slot_context_1 = ctx => ({});
const get_after_end_slot_changes_2 = dirty => ({});
const get_after_end_slot_context_2 = ctx => ({});
const get_after_slot_changes_2 = dirty => ({});
const get_after_slot_context_2 = ctx => ({});
const get_after_start_slot_changes_2 = dirty => ({});
const get_after_start_slot_context_2 = ctx => ({});
const get_after_title_slot_changes_2 = dirty => ({});
const get_after_title_slot_context_2 = ctx => ({});
const get_title_slot_changes_2 = dirty => ({});
const get_title_slot_context_2 = ctx => ({});
const get_before_title_slot_changes_2 = dirty => ({});
const get_before_title_slot_context_2 = ctx => ({});
const get_header_slot_changes_2 = dirty => ({});
const get_header_slot_context_2 = ctx => ({});
const get_inner_start_slot_changes_1 = dirty => ({});
const get_inner_start_slot_context_1 = ctx => ({});
const get_media_slot_changes_1 = dirty => ({});
const get_media_slot_context_1 = ctx => ({});
const get_content_start_slot_changes_1 = dirty => ({});
const get_content_start_slot_context_1 = ctx => ({});
const get_content_end_slot_changes = dirty => ({});
const get_content_end_slot_context = ctx => ({});
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_inner_end_slot_changes = dirty => ({});
const get_inner_end_slot_context = ctx => ({});
const get_inner_slot_changes_1 = dirty => ({});
const get_inner_slot_context_1 = ctx => ({});
const get_after_end_slot_changes_1 = dirty => ({});
const get_after_end_slot_context_1 = ctx => ({});
const get_after_slot_changes_1 = dirty => ({});
const get_after_slot_context_1 = ctx => ({});
const get_after_start_slot_changes_1 = dirty => ({});
const get_after_start_slot_context_1 = ctx => ({});
const get_after_title_slot_changes_1 = dirty => ({});
const get_after_title_slot_context_1 = ctx => ({});
const get_footer_slot_changes_1 = dirty => ({});
const get_footer_slot_context_1 = ctx => ({});
const get_title_slot_changes_1 = dirty => ({});
const get_title_slot_context_1 = ctx => ({});
const get_header_slot_changes_1 = dirty => ({});
const get_header_slot_context_1 = ctx => ({});
const get_before_title_slot_changes_1 = dirty => ({});
const get_before_title_slot_context_1 = ctx => ({});
const get_footer_slot_changes = dirty => ({});
const get_footer_slot_context = ctx => ({});
const get_inner_slot_changes = dirty => ({});
const get_inner_slot_context = ctx => ({});
const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});
const get_subtitle_slot_changes = dirty => ({});
const get_subtitle_slot_context = ctx => ({});
const get_after_end_slot_changes = dirty => ({});
const get_after_end_slot_context = ctx => ({});
const get_after_slot_changes = dirty => ({});
const get_after_slot_context = ctx => ({});
const get_after_start_slot_changes = dirty => ({});
const get_after_start_slot_context = ctx => ({});
const get_after_title_slot_changes = dirty => ({});
const get_after_title_slot_context = ctx => ({});
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});
const get_before_title_slot_changes = dirty => ({});
const get_before_title_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});
const get_inner_start_slot_changes = dirty => ({});
const get_inner_start_slot_context = ctx => ({});
const get_media_slot_changes = dirty => ({});
const get_media_slot_context = ctx => ({});
const get_content_start_slot_changes = dirty => ({});
const get_content_start_slot_context = ctx => ({});
const get_root_start_slot_changes = dirty => ({});
const get_root_start_slot_context = ctx => ({});

// (346:0) {:else}
function create_else_block(ctx) {
	let li;
	let t0;
	let current_block_type_index;
	let if_block0;
	let t1;
	let t2;
	let t3;
	let t4;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const root_start_slot_template = /*#slots*/ ctx[70]["root-start"];
	const root_start_slot = create_slot(root_start_slot_template, ctx, /*$$scope*/ ctx[84], get_root_start_slot_context);
	const if_block_creators = [create_if_block_4, create_if_block_67, create_else_block_7];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*swipeout*/ ctx[15]) return 0;
		if (/*isLink*/ ctx[39]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && !/*isSortableOpposite*/ ctx[45] && create_if_block_3();
	let if_block2 = (/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_2(ctx);
	const root_slot_template = /*#slots*/ ctx[70].root;
	const root_slot = create_slot(root_slot_template, ctx, /*$$scope*/ ctx[84], get_root_slot_context);
	const root_end_slot_template = /*#slots*/ ctx[70]["root-end"];
	const root_end_slot = create_slot(root_end_slot_template, ctx, /*$$scope*/ ctx[84], get_root_end_slot_context);

	let li_levels = [
		{ class: /*liClasses*/ ctx[43] },
		{
			"data-virtual-list-index": /*virtualListIndex*/ ctx[25]
		},
		restProps(/*$$restProps*/ ctx[49])
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if (root_start_slot) root_start_slot.c();
			t0 = space();
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (root_slot) root_slot.c();
			t4 = space();
			if (root_end_slot) root_end_slot.c();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {
				class: true,
				"data-virtual-list-index": true
			});

			var li_nodes = children(li);
			if (root_start_slot) root_start_slot.l(li_nodes);
			t0 = claim_space(li_nodes);
			if_block0.l(li_nodes);
			t1 = claim_space(li_nodes);
			if (if_block1) if_block1.l(li_nodes);
			t2 = claim_space(li_nodes);
			if (if_block2) if_block2.l(li_nodes);
			t3 = claim_space(li_nodes);
			if (root_slot) root_slot.l(li_nodes);
			t4 = claim_space(li_nodes);
			if (root_end_slot) root_end_slot.l(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(li, li_data);
		},
		m(target, anchor) {
			insert_hydration(target, li, anchor);

			if (root_start_slot) {
				root_start_slot.m(li, null);
			}

			append_hydration(li, t0);
			if_blocks[current_block_type_index].m(li, null);
			append_hydration(li, t1);
			if (if_block1) if_block1.m(li, null);
			append_hydration(li, t2);
			if (if_block2) if_block2.m(li, null);
			append_hydration(li, t3);

			if (root_slot) {
				root_slot.m(li, null);
			}

			append_hydration(li, t4);

			if (root_end_slot) {
				root_end_slot.m(li, null);
			}

			/*li_binding_2*/ ctx[83](li);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(useTooltip_action = useTooltip.call(null, li, {
					tooltip: /*tooltip*/ ctx[8],
					tooltipTrigger: /*tooltipTrigger*/ ctx[9]
				}));

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (root_start_slot) {
				if (root_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						root_start_slot,
						root_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(root_start_slot_template, /*$$scope*/ ctx[84], dirty, get_root_start_slot_changes),
						get_root_start_slot_context
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(li, t1);
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && !/*isSortableOpposite*/ ctx[45]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_3();
					if_block1.c();
					if_block1.m(li, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(li, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (root_slot) {
				if (root_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						root_slot,
						root_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(root_slot_template, /*$$scope*/ ctx[84], dirty, get_root_slot_changes),
						get_root_slot_context
					);
				}
			}

			if (root_end_slot) {
				if (root_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						root_end_slot,
						root_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(root_end_slot_template, /*$$scope*/ ctx[84], dirty, get_root_end_slot_changes),
						get_root_end_slot_context
					);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty[1] & /*liClasses*/ 4096) && { class: /*liClasses*/ ctx[43] },
				(!current || dirty[0] & /*virtualListIndex*/ 33554432) && {
					"data-virtual-list-index": /*virtualListIndex*/ ctx[25]
				},
				dirty[1] & /*$$restProps*/ 262144 && restProps(/*$$restProps*/ ctx[49])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 768) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[8],
				tooltipTrigger: /*tooltipTrigger*/ ctx[9]
			});
		},
		i(local) {
			if (current) return;
			transition_in(root_start_slot, local);
			transition_in(if_block0);
			transition_in(if_block2);
			transition_in(root_slot, local);
			transition_in(root_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(root_start_slot, local);
			transition_out(if_block0);
			transition_out(if_block2);
			transition_out(root_slot, local);
			transition_out(root_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (root_start_slot) root_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (root_slot) root_slot.d(detaching);
			if (root_end_slot) root_end_slot.d(detaching);
			/*li_binding_2*/ ctx[83](null);
			mounted = false;
			dispose();
		}
	};
}

// (334:19) 
function create_if_block_1(ctx) {
	let li;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	let li_levels = [
		{ class: /*liClasses*/ ctx[43] },
		{
			"data-virtual-list-index": /*virtualListIndex*/ ctx[25]
		},
		restProps(/*$$restProps*/ ctx[49])
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {
				class: true,
				"data-virtual-list-index": true
			});

			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			if (default_slot) default_slot.l(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(li, li_data);
		},
		m(target, anchor) {
			insert_hydration(target, li, anchor);
			append_hydration(li, t0);
			append_hydration(li, t1);

			if (default_slot) {
				default_slot.m(li, null);
			}

			/*li_binding_1*/ ctx[72](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", /*onClick*/ ctx[47]),
					action_destroyer(useTooltip_action = useTooltip.call(null, li, {
						tooltip: /*tooltip*/ ctx[8],
						tooltipTrigger: /*tooltipTrigger*/ ctx[9]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty[1] & /*liClasses*/ 4096) && { class: /*liClasses*/ ctx[43] },
				(!current || dirty[0] & /*virtualListIndex*/ 33554432) && {
					"data-virtual-list-index": /*virtualListIndex*/ ctx[25]
				},
				dirty[1] & /*$$restProps*/ 262144 && restProps(/*$$restProps*/ ctx[49])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 768) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[8],
				tooltipTrigger: /*tooltipTrigger*/ ctx[9]
			});
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			/*li_binding_1*/ ctx[72](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (323:0) {#if divider || groupTitle}
function create_if_block(ctx) {
	let li;
	let span;
	let useTooltip_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	let li_levels = [
		{ class: /*liClasses*/ ctx[43] },
		{
			"data-virtual-list-index": /*virtualListIndex*/ ctx[25]
		},
		restProps(/*$$restProps*/ ctx[49])
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {
				class: true,
				"data-virtual-list-index": true
			});

			var li_nodes = children(li);
			span = claim_element(li_nodes, "SPAN", {});
			var span_nodes = children(span);
			if (default_slot_or_fallback) default_slot_or_fallback.l(span_nodes);
			span_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_attributes(li, li_data);
		},
		m(target, anchor) {
			insert_hydration(target, li, anchor);
			append_hydration(li, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			/*li_binding*/ ctx[71](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", /*onClick*/ ctx[47]),
					action_destroyer(useTooltip_action = useTooltip.call(null, li, {
						tooltip: /*tooltip*/ ctx[8],
						tooltipTrigger: /*tooltipTrigger*/ ctx[9]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty[1] & /*liClasses*/ 4096) && { class: /*liClasses*/ ctx[43] },
				(!current || dirty[0] & /*virtualListIndex*/ 33554432) && {
					"data-virtual-list-index": /*virtualListIndex*/ ctx[25]
				},
				dirty[1] & /*$$restProps*/ 262144 && restProps(/*$$restProps*/ ctx[49])
			]));

			if (useTooltip_action && is_function(useTooltip_action.update) && dirty[0] & /*tooltip, tooltipTrigger*/ 768) useTooltip_action.update.call(null, {
				tooltip: /*tooltip*/ ctx[8],
				tooltipTrigger: /*tooltipTrigger*/ ctx[9]
			});
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*li_binding*/ ctx[71](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (843:4) {:else}
function create_else_block_7(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_88, create_else_block_9];
	const if_blocks = [];

	function select_block_type_8(ctx, dirty) {
		if (/*checkbox*/ ctx[18] || /*radio*/ ctx[19]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_8(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_8(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (721:21) 
function create_if_block_67(ctx) {
	let a;
	let div1;
	let t0;
	let t1;
	let t2;
	let div0;
	let t3;
	let current_block_type_index;
	let if_block2;
	let t4;
	let t5;
	let t6;
	let useRouteProps_action;
	let current;
	let mounted;
	let dispose;
	const content_start_slot_template = /*#slots*/ ctx[70]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[84], get_content_start_slot_context_3);
	let if_block0 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45] && create_if_block_87();
	let if_block1 = /*hasMedia*/ ctx[38] && create_if_block_85(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[70]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_start_slot_context_3);
	const if_block_creators = [create_if_block_68, create_else_block_6];
	const if_blocks = [];

	function select_block_type_7(ctx, dirty) {
		if (/*isMedia*/ ctx[27]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_7(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const inner_end_slot_template = /*#slots*/ ctx[70]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_end_slot_context_3);
	const content_slot_template = /*#slots*/ ctx[70].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[84], get_content_slot_context_3);
	const content_end_slot_template = /*#slots*/ ctx[70]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[84], get_content_end_slot_context_3);
	let a_levels = [{ class: /*linkClasses*/ ctx[41] }, /*linkAttrs*/ ctx[40]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			div1 = element("div");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			div0 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t3 = space();
			if_block2.c();
			t4 = space();
			if (inner_end_slot) inner_end_slot.c();
			t5 = space();
			if (content_slot) content_slot.c();
			t6 = space();
			if (content_end_slot) content_end_slot.c();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { class: true });
			var a_nodes = children(a);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (content_start_slot) content_start_slot.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			if (if_block0) if_block0.l(div1_nodes);
			t1 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (inner_start_slot) inner_start_slot.l(div0_nodes);
			t3 = claim_space(div0_nodes);
			if_block2.l(div0_nodes);
			t4 = claim_space(div0_nodes);
			if (inner_end_slot) inner_end_slot.l(div0_nodes);
			div0_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			if (content_slot) content_slot.l(div1_nodes);
			t6 = claim_space(div1_nodes);
			if (content_end_slot) content_end_slot.l(div1_nodes);
			div1_nodes.forEach(detach);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "item-inner");
			attr(div1, "class", /*contentClasses*/ ctx[42]);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert_hydration(target, a, anchor);
			append_hydration(a, div1);

			if (content_start_slot) {
				content_start_slot.m(div1, null);
			}

			append_hydration(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append_hydration(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			append_hydration(div1, t2);
			append_hydration(div1, div0);

			if (inner_start_slot) {
				inner_start_slot.m(div0, null);
			}

			append_hydration(div0, t3);
			if_blocks[current_block_type_index].m(div0, null);
			append_hydration(div0, t4);

			if (inner_end_slot) {
				inner_end_slot.m(div0, null);
			}

			/*div0_binding_2*/ ctx[78](div0);
			append_hydration(div1, t5);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append_hydration(div1, t6);

			if (content_end_slot) {
				content_end_slot.m(div1, null);
			}

			/*a_binding_1*/ ctx[79](a);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useRouteProps_action = useRouteProps.call(null, a, /*routeProps*/ ctx[26])),
					listen(a, "click", /*onClick*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_start_slot,
						content_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_start_slot_template, /*$$scope*/ ctx[84], dirty, get_content_start_slot_changes_3),
						get_content_start_slot_context_3
					);
				}
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_87();
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*hasMedia*/ ctx[38]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasMedia*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_85(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_start_slot,
						inner_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_start_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_start_slot_changes_3),
						get_inner_start_slot_context_3
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_7(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(div0, t4);
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_end_slot,
						inner_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_end_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_end_slot_changes_3),
						get_inner_end_slot_context_3
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[84], dirty, get_content_slot_changes_3),
						get_content_slot_context_3
					);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_end_slot,
						content_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_end_slot_template, /*$$scope*/ ctx[84], dirty, get_content_end_slot_changes_3),
						get_content_end_slot_context_3
					);
				}
			}

			if (!current || dirty[1] & /*contentClasses*/ 2048) {
				attr(div1, "class", /*contentClasses*/ ctx[42]);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty[1] & /*linkClasses*/ 1024) && { class: /*linkClasses*/ ctx[41] },
				dirty[1] & /*linkAttrs*/ 512 && /*linkAttrs*/ ctx[40]
			]));

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty[0] & /*routeProps*/ 67108864) useRouteProps_action.update.call(null, /*routeProps*/ ctx[26]);
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			/*div0_binding_2*/ ctx[78](null);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			/*a_binding_1*/ ctx[79](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (355:4) {#if swipeout}
function create_if_block_4(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_5, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*isLink*/ ctx[39]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "swipeout-content");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (969:6) {:else}
function create_else_block_9(ctx) {
	let div1;
	let t0;
	let t1;
	let t2;
	let div0;
	let t3;
	let current_block_type_index;
	let if_block2;
	let t4;
	let t5;
	let t6;
	let current;
	let mounted;
	let dispose;
	const content_start_slot_template = /*#slots*/ ctx[70]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[84], get_content_start_slot_context_5);
	let if_block0 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45] && create_if_block_128();
	let if_block1 = /*hasMedia*/ ctx[38] && create_if_block_126(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[70]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_start_slot_context_5);
	const if_block_creators = [create_if_block_109, create_else_block_10];
	const if_blocks = [];

	function select_block_type_10(ctx, dirty) {
		if (/*isMedia*/ ctx[27]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_10(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const inner_end_slot_template = /*#slots*/ ctx[70]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_end_slot_context_5);
	const content_slot_template = /*#slots*/ ctx[70].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[84], get_content_slot_context_5);
	const content_end_slot_template = /*#slots*/ ctx[70]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[84], get_content_end_slot_context_5);

	return {
		c() {
			div1 = element("div");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			div0 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t3 = space();
			if_block2.c();
			t4 = space();
			if (inner_end_slot) inner_end_slot.c();
			t5 = space();
			if (content_slot) content_slot.c();
			t6 = space();
			if (content_end_slot) content_end_slot.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (content_start_slot) content_start_slot.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			if (if_block0) if_block0.l(div1_nodes);
			t1 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (inner_start_slot) inner_start_slot.l(div0_nodes);
			t3 = claim_space(div0_nodes);
			if_block2.l(div0_nodes);
			t4 = claim_space(div0_nodes);
			if (inner_end_slot) inner_end_slot.l(div0_nodes);
			div0_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			if (content_slot) content_slot.l(div1_nodes);
			t6 = claim_space(div1_nodes);
			if (content_end_slot) content_end_slot.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "item-inner");
			attr(div1, "class", /*contentClasses*/ ctx[42]);
		},
		m(target, anchor) {
			insert_hydration(target, div1, anchor);

			if (content_start_slot) {
				content_start_slot.m(div1, null);
			}

			append_hydration(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append_hydration(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			append_hydration(div1, t2);
			append_hydration(div1, div0);

			if (inner_start_slot) {
				inner_start_slot.m(div0, null);
			}

			append_hydration(div0, t3);
			if_blocks[current_block_type_index].m(div0, null);
			append_hydration(div0, t4);

			if (inner_end_slot) {
				inner_end_slot.m(div0, null);
			}

			/*div0_binding_3*/ ctx[82](div0);
			append_hydration(div1, t5);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append_hydration(div1, t6);

			if (content_end_slot) {
				content_end_slot.m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div1, "click", /*onClick*/ ctx[47]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_start_slot,
						content_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_start_slot_template, /*$$scope*/ ctx[84], dirty, get_content_start_slot_changes_5),
						get_content_start_slot_context_5
					);
				}
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_128();
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*hasMedia*/ ctx[38]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasMedia*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_126(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_start_slot,
						inner_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_start_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_start_slot_changes_5),
						get_inner_start_slot_context_5
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_10(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(div0, t4);
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_end_slot,
						inner_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_end_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_end_slot_changes_5),
						get_inner_end_slot_context_5
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[84], dirty, get_content_slot_changes_5),
						get_content_slot_context_5
					);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_end_slot,
						content_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_end_slot_template, /*$$scope*/ ctx[84], dirty, get_content_end_slot_changes_5),
						get_content_end_slot_context_5
					);
				}
			}

			if (!current || dirty[1] & /*contentClasses*/ 2048) {
				attr(div1, "class", /*contentClasses*/ ctx[42]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			/*div0_binding_3*/ ctx[82](null);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

// (845:6) {#if checkbox || radio}
function create_if_block_88(ctx) {
	let label;
	let t0;
	let t1;
	let input;
	let input_value_value;
	let input_type_value;
	let t2;
	let i;
	let i_class_value;
	let t3;
	let t4;
	let div;
	let t5;
	let current_block_type_index;
	let if_block2;
	let t6;
	let t7;
	let t8;
	let current;
	let mounted;
	let dispose;
	const content_start_slot_template = /*#slots*/ ctx[70]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[84], get_content_start_slot_context_4);
	let if_block0 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45] && create_if_block_108();
	let if_block1 = /*hasMedia*/ ctx[38] && create_if_block_106(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[70]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_start_slot_context_4);
	const if_block_creators = [create_if_block_89, create_else_block_8];
	const if_blocks = [];

	function select_block_type_9(ctx, dirty) {
		if (/*isMedia*/ ctx[27]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_9(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const inner_end_slot_template = /*#slots*/ ctx[70]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_end_slot_context_4);
	const content_slot_template = /*#slots*/ ctx[70].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[84], get_content_slot_context_4);
	const content_end_slot_template = /*#slots*/ ctx[70]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[84], get_content_end_slot_context_4);

	return {
		c() {
			label = element("label");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			input = element("input");
			t2 = space();
			i = element("i");
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t5 = space();
			if_block2.c();
			t6 = space();
			if (inner_end_slot) inner_end_slot.c();
			t7 = space();
			if (content_slot) content_slot.c();
			t8 = space();
			if (content_end_slot) content_end_slot.c();
			this.h();
		},
		l(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			if (content_start_slot) content_start_slot.l(label_nodes);
			t0 = claim_space(label_nodes);
			if (if_block0) if_block0.l(label_nodes);
			t1 = claim_space(label_nodes);
			input = claim_element(label_nodes, "INPUT", { name: true, type: true });
			t2 = claim_space(label_nodes);
			i = claim_element(label_nodes, "I", { class: true });
			children(i).forEach(detach);
			t3 = claim_space(label_nodes);
			if (if_block1) if_block1.l(label_nodes);
			t4 = claim_space(label_nodes);
			div = claim_element(label_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (inner_start_slot) inner_start_slot.l(div_nodes);
			t5 = claim_space(div_nodes);
			if_block2.l(div_nodes);
			t6 = claim_space(div_nodes);
			if (inner_end_slot) inner_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			t7 = claim_space(label_nodes);
			if (content_slot) content_slot.l(label_nodes);
			t8 = claim_space(label_nodes);
			if (content_end_slot) content_end_slot.l(label_nodes);
			label_nodes.forEach(detach);
			this.h();
		},
		h() {
			input.value = input_value_value = typeof /*value*/ ctx[21] === 'undefined'
			? ''
			: /*value*/ ctx[21];

			attr(input, "name", /*name*/ ctx[20]);
			input.checked = /*checked*/ ctx[0];
			input.readOnly = /*readonly*/ ctx[22];
			input.disabled = /*disabled*/ ctx[24];
			input.required = /*required*/ ctx[23];
			attr(input, "type", input_type_value = /*radio*/ ctx[19] ? 'radio' : 'checkbox');
			attr(i, "class", i_class_value = `icon icon-${/*radio*/ ctx[19] ? 'radio' : 'checkbox'}`);
			attr(div, "class", "item-inner");
			attr(label, "class", /*contentClasses*/ ctx[42]);
		},
		m(target, anchor) {
			insert_hydration(target, label, anchor);

			if (content_start_slot) {
				content_start_slot.m(label, null);
			}

			append_hydration(label, t0);
			if (if_block0) if_block0.m(label, null);
			append_hydration(label, t1);
			append_hydration(label, input);
			/*input_binding_1*/ ctx[80](input);
			append_hydration(label, t2);
			append_hydration(label, i);
			append_hydration(label, t3);
			if (if_block1) if_block1.m(label, null);
			append_hydration(label, t4);
			append_hydration(label, div);

			if (inner_start_slot) {
				inner_start_slot.m(div, null);
			}

			append_hydration(div, t5);
			if_blocks[current_block_type_index].m(div, null);
			append_hydration(div, t6);

			if (inner_end_slot) {
				inner_end_slot.m(div, null);
			}

			/*div_binding_1*/ ctx[81](div);
			append_hydration(label, t7);

			if (content_slot) {
				content_slot.m(label, null);
			}

			append_hydration(label, t8);

			if (content_end_slot) {
				content_end_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*onChange*/ ctx[48]),
					listen(label, "click", /*onClick*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_start_slot,
						content_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_start_slot_template, /*$$scope*/ ctx[84], dirty, get_content_start_slot_changes_4),
						get_content_start_slot_context_4
					);
				}
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_108();
					if_block0.c();
					if_block0.m(label, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty[0] & /*value*/ 2097152 && input_value_value !== (input_value_value = typeof /*value*/ ctx[21] === 'undefined'
			? ''
			: /*value*/ ctx[21]) && input.value !== input_value_value) {
				input.value = input_value_value;
			}

			if (!current || dirty[0] & /*name*/ 1048576) {
				attr(input, "name", /*name*/ ctx[20]);
			}

			if (!current || dirty[0] & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty[0] & /*readonly*/ 4194304) {
				input.readOnly = /*readonly*/ ctx[22];
			}

			if (!current || dirty[0] & /*disabled*/ 16777216) {
				input.disabled = /*disabled*/ ctx[24];
			}

			if (!current || dirty[0] & /*required*/ 8388608) {
				input.required = /*required*/ ctx[23];
			}

			if (!current || dirty[0] & /*radio*/ 524288 && input_type_value !== (input_type_value = /*radio*/ ctx[19] ? 'radio' : 'checkbox')) {
				attr(input, "type", input_type_value);
			}

			if (!current || dirty[0] & /*radio*/ 524288 && i_class_value !== (i_class_value = `icon icon-${/*radio*/ ctx[19] ? 'radio' : 'checkbox'}`)) {
				attr(i, "class", i_class_value);
			}

			if (/*hasMedia*/ ctx[38]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasMedia*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_106(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(label, t4);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_start_slot,
						inner_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_start_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_start_slot_changes_4),
						get_inner_start_slot_context_4
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_9(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(div, t6);
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_end_slot,
						inner_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_end_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_end_slot_changes_4),
						get_inner_end_slot_context_4
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[84], dirty, get_content_slot_changes_4),
						get_content_slot_context_4
					);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_end_slot,
						content_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_end_slot_template, /*$$scope*/ ctx[84], dirty, get_content_end_slot_changes_4),
						get_content_end_slot_context_4
					);
				}
			}

			if (!current || dirty[1] & /*contentClasses*/ 2048) {
				attr(label, "class", /*contentClasses*/ ctx[42]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			/*input_binding_1*/ ctx[80](null);
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			/*div_binding_1*/ ctx[81](null);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (972:10) {#if isSortable && sortable !== false && isSortableOpposite}
function create_if_block_128(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (975:10) {#if hasMedia}
function create_if_block_126(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[4] !== 'undefined' && create_if_block_127(ctx);
	const media_slot_template = /*#slots*/ ctx[70].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[84], get_media_slot_context_5);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (media_slot) media_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[4] !== 'undefined') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_127(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						media_slot,
						media_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[84], dirty, get_media_slot_changes_5),
						get_media_slot_context_5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (977:14) {#if typeof media !== 'undefined'}
function create_if_block_127(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 16 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (1037:12) {:else}
function create_else_block_10(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block2_anchor;
	let current;
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_11);
	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) && create_if_block_123(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_11);
	let if_block1 = /*hasAfter*/ ctx[32] && create_if_block_120(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_11);
	let if_block2 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_119(ctx);

	return {
		c() {
			if (before_title_slot) before_title_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (after_title_slot) after_title_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (inner_slot) inner_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l(nodes) {
			if (before_title_slot) before_title_slot.l(nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (after_title_slot) after_title_slot.l(nodes);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t3 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (before_title_slot) {
				before_title_slot.m(target, anchor);
			}

			insert_hydration(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (after_title_slot) {
				after_title_slot.m(target, anchor);
			}

			insert_hydration(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t3, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_11),
						get_before_title_slot_context_11
					);
				}
			}

			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 112) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_123(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_11),
						get_after_title_slot_context_11
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_120(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_11),
						get_inner_slot_context_11
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_119(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(before_title_slot, local);
			transition_in(if_block0);
			transition_in(after_title_slot, local);
			transition_in(if_block1);
			transition_in(inner_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(before_title_slot, local);
			transition_out(if_block0);
			transition_out(after_title_slot, local);
			transition_out(if_block1);
			transition_out(inner_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (before_title_slot) before_title_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (after_title_slot) after_title_slot.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (985:12) {#if isMedia}
function create_if_block_109(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let if_block6_anchor;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_118(ctx);
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_10);
	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_117(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_10);
	let if_block2 = /*hasAfter*/ ctx[32] && create_if_block_114(ctx);
	let if_block3 = /*hasSubtitle*/ ctx[34] && create_if_block_113(ctx);
	let if_block4 = /*hasText*/ ctx[33] && create_if_block_112(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_10);
	let if_block5 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_111(ctx);
	let if_block6 = /*hasFooter*/ ctx[35] && create_if_block_110(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			if (before_title_slot) before_title_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_title_slot) after_title_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			t6 = space();
			if (inner_slot) inner_slot.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (before_title_slot) before_title_slot.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_title_slot) after_title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			t4 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t5 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t6 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t7 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t8 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			if_block6_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "item-title-row");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div, anchor);

			if (before_title_slot) {
				before_title_slot.m(div, null);
			}

			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_title_slot) {
				after_title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block2) if_block2.m(div, null);
			insert_hydration(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t6, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t7, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, if_block6_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_118(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_10),
						get_before_title_slot_context_10
					);
				}
			}

			if (/*hasTitle*/ ctx[37]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasTitle*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_117(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_10),
						get_after_title_slot_context_10
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_114(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*hasSubtitle*/ ctx[34]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[1] & /*hasSubtitle*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_113(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*hasText*/ ctx[33]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasText*/ 4) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_112(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t6.parentNode, t6);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_10),
						get_inner_slot_context_10
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_111(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t8.parentNode, t8);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_110(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(before_title_slot, local);
			transition_in(if_block1);
			transition_in(after_title_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(inner_slot, local);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(before_title_slot, local);
			transition_out(if_block1);
			transition_out(after_title_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(inner_slot, local);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (before_title_slot) before_title_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (after_title_slot) after_title_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t6);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t7);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t8);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(if_block6_anchor);
		}
	};
}

// (1039:14) {#if hasTitle || hasHeader || hasFooter}
function create_if_block_123(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*title*/ ctx[2]) + "";
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_125(ctx);
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_11);
	let if_block1 = /*hasFooter*/ ctx[35] && create_if_block_124(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (title_slot) title_slot.c();
			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			t1 = claim_text(div_nodes, t1_value);
			t2 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_125(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty[0] & /*title*/ 4) && t1_value !== (t1_value = plainText(/*title*/ ctx[2]) + "")) set_data(t1, t1_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_11),
						get_title_slot_context_11
					);
				}
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_124(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(title_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(title_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (title_slot) title_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

// (1041:18) {#if hasHeader}
function create_if_block_125(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_11);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_11),
						get_header_slot_context_11
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (1049:18) {#if hasFooter}
function create_if_block_124(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_11);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_11),
						get_footer_slot_context_11
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (1058:14) {#if hasAfter}
function create_if_block_120(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_11);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_122(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_121(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_11);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_11);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_11),
						get_after_start_slot_context_11
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_122(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_121(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_11),
						get_after_slot_context_11
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_11),
						get_after_end_slot_context_11
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (1061:18) {#if typeof after !== 'undefined'}
function create_if_block_122(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (1064:18) {#if typeof badge !== 'undefined'}
function create_if_block_121(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (1065:20) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_11(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1072:14) {#if !(swipeout || accordionItem)}
function create_if_block_119(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (986:14) {#if hasHeader}
function create_if_block_118(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_10);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_10),
						get_header_slot_context_10
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (994:16) {#if hasTitle}
function create_if_block_117(ctx) {
	let div;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_10);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_slot) title_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_10),
						get_title_slot_context_10
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (1001:16) {#if hasAfter}
function create_if_block_114(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_10);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_116(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_115(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_10);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_10);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_10),
						get_after_start_slot_context_10
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_116(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_115(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_10),
						get_after_slot_context_10
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_10),
						get_after_end_slot_context_10
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (1004:20) {#if typeof after !== 'undefined'}
function create_if_block_116(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (1007:20) {#if typeof badge !== 'undefined'}
function create_if_block_115(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (1008:22) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_10(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1015:14) {#if hasSubtitle}
function create_if_block_113(ctx) {
	let div;
	let t0_value = plainText(/*subtitle*/ ctx[5]) + "";
	let t0;
	let t1;
	let current;
	const subtitle_slot_template = /*#slots*/ ctx[70].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[84], get_subtitle_slot_context_5);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (subtitle_slot) subtitle_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (subtitle_slot) subtitle_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-subtitle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (subtitle_slot) {
				subtitle_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*subtitle*/ 32) && t0_value !== (t0_value = plainText(/*subtitle*/ ctx[5]) + "")) set_data(t0, t0_value);

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[84], dirty, get_subtitle_slot_changes_5),
						get_subtitle_slot_context_5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtitle_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subtitle_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (subtitle_slot) subtitle_slot.d(detaching);
		}
	};
}

// (1021:14) {#if hasText}
function create_if_block_112(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[3]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[70].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[84], get_text_slot_context_5);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (text_slot) text_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-text");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*text*/ 8) && t0_value !== (t0_value = plainText(/*text*/ ctx[3]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[84], dirty, get_text_slot_changes_5),
						get_text_slot_context_5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (1028:14) {#if !(swipeout || accordionItem)}
function create_if_block_111(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (1031:14) {#if hasFooter}
function create_if_block_110(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_10);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_10),
						get_footer_slot_context_10
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (848:10) {#if isSortable && sortable !== false && isSortableOpposite}
function create_if_block_108(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (863:10) {#if hasMedia}
function create_if_block_106(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[4] !== 'undefined' && create_if_block_107(ctx);
	const media_slot_template = /*#slots*/ ctx[70].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[84], get_media_slot_context_4);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (media_slot) media_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[4] !== 'undefined') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_107(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						media_slot,
						media_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[84], dirty, get_media_slot_changes_4),
						get_media_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (865:14) {#if typeof media !== 'undefined'}
function create_if_block_107(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 16 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (925:12) {:else}
function create_else_block_8(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block2_anchor;
	let current;
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_9);
	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) && create_if_block_103(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_9);
	let if_block1 = /*hasAfter*/ ctx[32] && create_if_block_100(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_9);
	let if_block2 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_99(ctx);

	return {
		c() {
			if (before_title_slot) before_title_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (after_title_slot) after_title_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (inner_slot) inner_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l(nodes) {
			if (before_title_slot) before_title_slot.l(nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (after_title_slot) after_title_slot.l(nodes);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t3 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (before_title_slot) {
				before_title_slot.m(target, anchor);
			}

			insert_hydration(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (after_title_slot) {
				after_title_slot.m(target, anchor);
			}

			insert_hydration(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t3, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_9),
						get_before_title_slot_context_9
					);
				}
			}

			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 112) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_103(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_9),
						get_after_title_slot_context_9
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_100(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_9),
						get_inner_slot_context_9
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_99(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(before_title_slot, local);
			transition_in(if_block0);
			transition_in(after_title_slot, local);
			transition_in(if_block1);
			transition_in(inner_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(before_title_slot, local);
			transition_out(if_block0);
			transition_out(after_title_slot, local);
			transition_out(if_block1);
			transition_out(inner_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (before_title_slot) before_title_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (after_title_slot) after_title_slot.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (873:12) {#if isMedia}
function create_if_block_89(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let if_block6_anchor;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_98(ctx);
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_8);
	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_97(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_8);
	let if_block2 = /*hasAfter*/ ctx[32] && create_if_block_94(ctx);
	let if_block3 = /*hasSubtitle*/ ctx[34] && create_if_block_93(ctx);
	let if_block4 = /*hasText*/ ctx[33] && create_if_block_92(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_8);
	let if_block5 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_91(ctx);
	let if_block6 = /*hasFooter*/ ctx[35] && create_if_block_90(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			if (before_title_slot) before_title_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_title_slot) after_title_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			t6 = space();
			if (inner_slot) inner_slot.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (before_title_slot) before_title_slot.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_title_slot) after_title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			t4 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t5 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t6 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t7 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t8 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			if_block6_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "item-title-row");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div, anchor);

			if (before_title_slot) {
				before_title_slot.m(div, null);
			}

			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_title_slot) {
				after_title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block2) if_block2.m(div, null);
			insert_hydration(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t6, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t7, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, if_block6_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_98(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_8),
						get_before_title_slot_context_8
					);
				}
			}

			if (/*hasTitle*/ ctx[37]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasTitle*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_97(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_8),
						get_after_title_slot_context_8
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_94(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*hasSubtitle*/ ctx[34]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[1] & /*hasSubtitle*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_93(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*hasText*/ ctx[33]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasText*/ 4) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_92(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t6.parentNode, t6);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_8),
						get_inner_slot_context_8
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_91(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t8.parentNode, t8);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_90(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(before_title_slot, local);
			transition_in(if_block1);
			transition_in(after_title_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(inner_slot, local);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(before_title_slot, local);
			transition_out(if_block1);
			transition_out(after_title_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(inner_slot, local);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (before_title_slot) before_title_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (after_title_slot) after_title_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t6);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t7);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t8);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(if_block6_anchor);
		}
	};
}

// (927:14) {#if hasTitle || hasHeader || hasFooter}
function create_if_block_103(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*title*/ ctx[2]) + "";
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_105(ctx);
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_9);
	let if_block1 = /*hasFooter*/ ctx[35] && create_if_block_104(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (title_slot) title_slot.c();
			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			t1 = claim_text(div_nodes, t1_value);
			t2 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_105(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty[0] & /*title*/ 4) && t1_value !== (t1_value = plainText(/*title*/ ctx[2]) + "")) set_data(t1, t1_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_9),
						get_title_slot_context_9
					);
				}
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_104(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(title_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(title_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (title_slot) title_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

// (929:18) {#if hasHeader}
function create_if_block_105(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_9);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_9),
						get_header_slot_context_9
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (937:18) {#if hasFooter}
function create_if_block_104(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_9);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_9),
						get_footer_slot_context_9
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (946:14) {#if hasAfter}
function create_if_block_100(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_9);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_102(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_101(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_9);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_9);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_9),
						get_after_start_slot_context_9
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_102(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_101(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_9),
						get_after_slot_context_9
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_9),
						get_after_end_slot_context_9
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (949:18) {#if typeof after !== 'undefined'}
function create_if_block_102(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (952:18) {#if typeof badge !== 'undefined'}
function create_if_block_101(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (953:20) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_9(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (960:14) {#if !(swipeout || accordionItem)}
function create_if_block_99(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (874:14) {#if hasHeader}
function create_if_block_98(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_8);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_8),
						get_header_slot_context_8
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (882:16) {#if hasTitle}
function create_if_block_97(ctx) {
	let div;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_8);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_slot) title_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_8),
						get_title_slot_context_8
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (889:16) {#if hasAfter}
function create_if_block_94(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_8);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_96(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_95(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_8);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_8);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_8),
						get_after_start_slot_context_8
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_96(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_95(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_8),
						get_after_slot_context_8
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_8),
						get_after_end_slot_context_8
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (892:20) {#if typeof after !== 'undefined'}
function create_if_block_96(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (895:20) {#if typeof badge !== 'undefined'}
function create_if_block_95(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (896:22) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_8(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (903:14) {#if hasSubtitle}
function create_if_block_93(ctx) {
	let div;
	let t0_value = plainText(/*subtitle*/ ctx[5]) + "";
	let t0;
	let t1;
	let current;
	const subtitle_slot_template = /*#slots*/ ctx[70].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[84], get_subtitle_slot_context_4);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (subtitle_slot) subtitle_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (subtitle_slot) subtitle_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-subtitle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (subtitle_slot) {
				subtitle_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*subtitle*/ 32) && t0_value !== (t0_value = plainText(/*subtitle*/ ctx[5]) + "")) set_data(t0, t0_value);

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[84], dirty, get_subtitle_slot_changes_4),
						get_subtitle_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtitle_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subtitle_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (subtitle_slot) subtitle_slot.d(detaching);
		}
	};
}

// (909:14) {#if hasText}
function create_if_block_92(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[3]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[70].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[84], get_text_slot_context_4);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (text_slot) text_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-text");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*text*/ 8) && t0_value !== (t0_value = plainText(/*text*/ ctx[3]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[84], dirty, get_text_slot_changes_4),
						get_text_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (916:14) {#if !(swipeout || accordionItem)}
function create_if_block_91(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (919:14) {#if hasFooter}
function create_if_block_90(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_8);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_8),
						get_footer_slot_context_8
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (732:10) {#if isSortable && sortable !== false && isSortableOpposite}
function create_if_block_87(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (735:10) {#if hasMedia}
function create_if_block_85(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[4] !== 'undefined' && create_if_block_86(ctx);
	const media_slot_template = /*#slots*/ ctx[70].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[84], get_media_slot_context_3);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (media_slot) media_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[4] !== 'undefined') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_86(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						media_slot,
						media_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[84], dirty, get_media_slot_changes_3),
						get_media_slot_context_3
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (737:14) {#if typeof media !== 'undefined'}
function create_if_block_86(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 16 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (797:12) {:else}
function create_else_block_6(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block2_anchor;
	let current;
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_7);
	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) && create_if_block_82(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_7);
	let if_block1 = /*hasAfter*/ ctx[32] && create_if_block_79(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_7);
	let if_block2 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_78(ctx);

	return {
		c() {
			if (before_title_slot) before_title_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (after_title_slot) after_title_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (inner_slot) inner_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l(nodes) {
			if (before_title_slot) before_title_slot.l(nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (after_title_slot) after_title_slot.l(nodes);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t3 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (before_title_slot) {
				before_title_slot.m(target, anchor);
			}

			insert_hydration(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (after_title_slot) {
				after_title_slot.m(target, anchor);
			}

			insert_hydration(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t3, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_7),
						get_before_title_slot_context_7
					);
				}
			}

			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 112) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_82(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_7),
						get_after_title_slot_context_7
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_79(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_7),
						get_inner_slot_context_7
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_78(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(before_title_slot, local);
			transition_in(if_block0);
			transition_in(after_title_slot, local);
			transition_in(if_block1);
			transition_in(inner_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(before_title_slot, local);
			transition_out(if_block0);
			transition_out(after_title_slot, local);
			transition_out(if_block1);
			transition_out(inner_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (before_title_slot) before_title_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (after_title_slot) after_title_slot.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (745:12) {#if isMedia}
function create_if_block_68(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let if_block6_anchor;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_77(ctx);
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_6);
	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_76(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_6);
	let if_block2 = /*hasAfter*/ ctx[32] && create_if_block_73(ctx);
	let if_block3 = /*hasSubtitle*/ ctx[34] && create_if_block_72(ctx);
	let if_block4 = /*hasText*/ ctx[33] && create_if_block_71(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_6);
	let if_block5 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_70(ctx);
	let if_block6 = /*hasFooter*/ ctx[35] && create_if_block_69(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			if (before_title_slot) before_title_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_title_slot) after_title_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			t6 = space();
			if (inner_slot) inner_slot.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (before_title_slot) before_title_slot.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_title_slot) after_title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			t4 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t5 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t6 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t7 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t8 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			if_block6_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "item-title-row");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div, anchor);

			if (before_title_slot) {
				before_title_slot.m(div, null);
			}

			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_title_slot) {
				after_title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block2) if_block2.m(div, null);
			insert_hydration(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t6, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t7, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, if_block6_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_77(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_6),
						get_before_title_slot_context_6
					);
				}
			}

			if (/*hasTitle*/ ctx[37]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasTitle*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_76(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_6),
						get_after_title_slot_context_6
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_73(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*hasSubtitle*/ ctx[34]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[1] & /*hasSubtitle*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_72(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*hasText*/ ctx[33]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasText*/ 4) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_71(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t6.parentNode, t6);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_6),
						get_inner_slot_context_6
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_70(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t8.parentNode, t8);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_69(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(before_title_slot, local);
			transition_in(if_block1);
			transition_in(after_title_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(inner_slot, local);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(before_title_slot, local);
			transition_out(if_block1);
			transition_out(after_title_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(inner_slot, local);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (before_title_slot) before_title_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (after_title_slot) after_title_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t6);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t7);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t8);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(if_block6_anchor);
		}
	};
}

// (799:14) {#if hasTitle || hasHeader || hasFooter}
function create_if_block_82(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*title*/ ctx[2]) + "";
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_84(ctx);
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_7);
	let if_block1 = /*hasFooter*/ ctx[35] && create_if_block_83(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (title_slot) title_slot.c();
			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			t1 = claim_text(div_nodes, t1_value);
			t2 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_84(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty[0] & /*title*/ 4) && t1_value !== (t1_value = plainText(/*title*/ ctx[2]) + "")) set_data(t1, t1_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_7),
						get_title_slot_context_7
					);
				}
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_83(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(title_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(title_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (title_slot) title_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

// (801:18) {#if hasHeader}
function create_if_block_84(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_7);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_7),
						get_header_slot_context_7
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (809:18) {#if hasFooter}
function create_if_block_83(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_7);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_7),
						get_footer_slot_context_7
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (818:14) {#if hasAfter}
function create_if_block_79(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_7);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_81(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_80(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_7);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_7);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_7),
						get_after_start_slot_context_7
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_81(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_80(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_7),
						get_after_slot_context_7
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_7),
						get_after_end_slot_context_7
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (821:18) {#if typeof after !== 'undefined'}
function create_if_block_81(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (824:18) {#if typeof badge !== 'undefined'}
function create_if_block_80(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (825:20) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_7(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (832:14) {#if !(swipeout || accordionItem)}
function create_if_block_78(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (746:14) {#if hasHeader}
function create_if_block_77(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_6);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_6),
						get_header_slot_context_6
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (754:16) {#if hasTitle}
function create_if_block_76(ctx) {
	let div;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_6);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_slot) title_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_6),
						get_title_slot_context_6
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (761:16) {#if hasAfter}
function create_if_block_73(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_6);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_75(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_74(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_6);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_6);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_6),
						get_after_start_slot_context_6
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_75(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_74(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_6),
						get_after_slot_context_6
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_6),
						get_after_end_slot_context_6
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (764:20) {#if typeof after !== 'undefined'}
function create_if_block_75(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (767:20) {#if typeof badge !== 'undefined'}
function create_if_block_74(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (768:22) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_6(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (775:14) {#if hasSubtitle}
function create_if_block_72(ctx) {
	let div;
	let t0_value = plainText(/*subtitle*/ ctx[5]) + "";
	let t0;
	let t1;
	let current;
	const subtitle_slot_template = /*#slots*/ ctx[70].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[84], get_subtitle_slot_context_3);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (subtitle_slot) subtitle_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (subtitle_slot) subtitle_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-subtitle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (subtitle_slot) {
				subtitle_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*subtitle*/ 32) && t0_value !== (t0_value = plainText(/*subtitle*/ ctx[5]) + "")) set_data(t0, t0_value);

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[84], dirty, get_subtitle_slot_changes_3),
						get_subtitle_slot_context_3
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtitle_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subtitle_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (subtitle_slot) subtitle_slot.d(detaching);
		}
	};
}

// (781:14) {#if hasText}
function create_if_block_71(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[3]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[70].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[84], get_text_slot_context_3);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (text_slot) text_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-text");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*text*/ 8) && t0_value !== (t0_value = plainText(/*text*/ ctx[3]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[84], dirty, get_text_slot_changes_3),
						get_text_slot_context_3
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (788:14) {#if !(swipeout || accordionItem)}
function create_if_block_70(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (791:14) {#if hasFooter}
function create_if_block_69(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_6);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_6),
						get_footer_slot_context_6
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (479:8) {:else}
function create_else_block_2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_26, create_else_block_4];
	const if_blocks = [];

	function select_block_type_4(ctx, dirty) {
		if (/*checkbox*/ ctx[18] || /*radio*/ ctx[19]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_4(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_4(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (357:8) {#if isLink}
function create_if_block_5(ctx) {
	let a;
	let div1;
	let t0;
	let t1;
	let t2;
	let div0;
	let t3;
	let current_block_type_index;
	let if_block2;
	let t4;
	let t5;
	let t6;
	let useRouteProps_action;
	let current;
	let mounted;
	let dispose;
	const content_start_slot_template = /*#slots*/ ctx[70]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[84], get_content_start_slot_context);
	let if_block0 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45] && create_if_block_25();
	let if_block1 = /*hasMedia*/ ctx[38] && create_if_block_23(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[70]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_start_slot_context);
	const if_block_creators = [create_if_block_6, create_else_block_1];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (/*isMedia*/ ctx[27]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_3(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const inner_end_slot_template = /*#slots*/ ctx[70]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_end_slot_context);
	const content_slot_template = /*#slots*/ ctx[70].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[84], get_content_slot_context);
	const content_end_slot_template = /*#slots*/ ctx[70]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[84], get_content_end_slot_context);
	let a_levels = [{ class: /*linkClasses*/ ctx[41] }, /*linkAttrs*/ ctx[40]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			div1 = element("div");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			div0 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t3 = space();
			if_block2.c();
			t4 = space();
			if (inner_end_slot) inner_end_slot.c();
			t5 = space();
			if (content_slot) content_slot.c();
			t6 = space();
			if (content_end_slot) content_end_slot.c();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { class: true });
			var a_nodes = children(a);
			div1 = claim_element(a_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (content_start_slot) content_start_slot.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			if (if_block0) if_block0.l(div1_nodes);
			t1 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (inner_start_slot) inner_start_slot.l(div0_nodes);
			t3 = claim_space(div0_nodes);
			if_block2.l(div0_nodes);
			t4 = claim_space(div0_nodes);
			if (inner_end_slot) inner_end_slot.l(div0_nodes);
			div0_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			if (content_slot) content_slot.l(div1_nodes);
			t6 = claim_space(div1_nodes);
			if (content_end_slot) content_end_slot.l(div1_nodes);
			div1_nodes.forEach(detach);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "item-inner");
			attr(div1, "class", /*contentClasses*/ ctx[42]);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert_hydration(target, a, anchor);
			append_hydration(a, div1);

			if (content_start_slot) {
				content_start_slot.m(div1, null);
			}

			append_hydration(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append_hydration(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			append_hydration(div1, t2);
			append_hydration(div1, div0);

			if (inner_start_slot) {
				inner_start_slot.m(div0, null);
			}

			append_hydration(div0, t3);
			if_blocks[current_block_type_index].m(div0, null);
			append_hydration(div0, t4);

			if (inner_end_slot) {
				inner_end_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[73](div0);
			append_hydration(div1, t5);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append_hydration(div1, t6);

			if (content_end_slot) {
				content_end_slot.m(div1, null);
			}

			/*a_binding*/ ctx[74](a);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(useRouteProps_action = useRouteProps.call(null, a, /*routeProps*/ ctx[26])),
					listen(a, "click", /*onClick*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_start_slot,
						content_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_start_slot_template, /*$$scope*/ ctx[84], dirty, get_content_start_slot_changes),
						get_content_start_slot_context
					);
				}
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_25();
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*hasMedia*/ ctx[38]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasMedia*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_23(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_start_slot,
						inner_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_start_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_start_slot_changes),
						get_inner_start_slot_context
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(div0, t4);
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_end_slot,
						inner_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_end_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_end_slot_changes),
						get_inner_end_slot_context
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[84], dirty, get_content_slot_changes),
						get_content_slot_context
					);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_end_slot,
						content_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_end_slot_template, /*$$scope*/ ctx[84], dirty, get_content_end_slot_changes),
						get_content_end_slot_context
					);
				}
			}

			if (!current || dirty[1] & /*contentClasses*/ 2048) {
				attr(div1, "class", /*contentClasses*/ ctx[42]);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty[1] & /*linkClasses*/ 1024) && { class: /*linkClasses*/ ctx[41] },
				dirty[1] & /*linkAttrs*/ 512 && /*linkAttrs*/ ctx[40]
			]));

			if (useRouteProps_action && is_function(useRouteProps_action.update) && dirty[0] & /*routeProps*/ 67108864) useRouteProps_action.update.call(null, /*routeProps*/ ctx[26]);
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			/*div0_binding*/ ctx[73](null);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			/*a_binding*/ ctx[74](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (605:10) {:else}
function create_else_block_4(ctx) {
	let div1;
	let t0;
	let t1;
	let t2;
	let div0;
	let t3;
	let current_block_type_index;
	let if_block2;
	let t4;
	let t5;
	let t6;
	let current;
	let mounted;
	let dispose;
	const content_start_slot_template = /*#slots*/ ctx[70]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[84], get_content_start_slot_context_2);
	let if_block0 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45] && create_if_block_66();
	let if_block1 = /*hasMedia*/ ctx[38] && create_if_block_64(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[70]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_start_slot_context_2);
	const if_block_creators = [create_if_block_47, create_else_block_5];
	const if_blocks = [];

	function select_block_type_6(ctx, dirty) {
		if (/*isMedia*/ ctx[27]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_6(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const inner_end_slot_template = /*#slots*/ ctx[70]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_end_slot_context_2);
	const content_slot_template = /*#slots*/ ctx[70].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[84], get_content_slot_context_2);
	const content_end_slot_template = /*#slots*/ ctx[70]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[84], get_content_end_slot_context_2);

	return {
		c() {
			div1 = element("div");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			div0 = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t3 = space();
			if_block2.c();
			t4 = space();
			if (inner_end_slot) inner_end_slot.c();
			t5 = space();
			if (content_slot) content_slot.c();
			t6 = space();
			if (content_end_slot) content_end_slot.c();
			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (content_start_slot) content_start_slot.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			if (if_block0) if_block0.l(div1_nodes);
			t1 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (inner_start_slot) inner_start_slot.l(div0_nodes);
			t3 = claim_space(div0_nodes);
			if_block2.l(div0_nodes);
			t4 = claim_space(div0_nodes);
			if (inner_end_slot) inner_end_slot.l(div0_nodes);
			div0_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			if (content_slot) content_slot.l(div1_nodes);
			t6 = claim_space(div1_nodes);
			if (content_end_slot) content_end_slot.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "item-inner");
			attr(div1, "class", /*contentClasses*/ ctx[42]);
		},
		m(target, anchor) {
			insert_hydration(target, div1, anchor);

			if (content_start_slot) {
				content_start_slot.m(div1, null);
			}

			append_hydration(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append_hydration(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			append_hydration(div1, t2);
			append_hydration(div1, div0);

			if (inner_start_slot) {
				inner_start_slot.m(div0, null);
			}

			append_hydration(div0, t3);
			if_blocks[current_block_type_index].m(div0, null);
			append_hydration(div0, t4);

			if (inner_end_slot) {
				inner_end_slot.m(div0, null);
			}

			/*div0_binding_1*/ ctx[77](div0);
			append_hydration(div1, t5);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			append_hydration(div1, t6);

			if (content_end_slot) {
				content_end_slot.m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div1, "click", /*onClick*/ ctx[47]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_start_slot,
						content_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_start_slot_template, /*$$scope*/ ctx[84], dirty, get_content_start_slot_changes_2),
						get_content_start_slot_context_2
					);
				}
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_66();
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*hasMedia*/ ctx[38]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasMedia*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_64(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_start_slot,
						inner_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_start_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_start_slot_changes_2),
						get_inner_start_slot_context_2
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_6(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(div0, t4);
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_end_slot,
						inner_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_end_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_end_slot_changes_2),
						get_inner_end_slot_context_2
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[84], dirty, get_content_slot_changes_2),
						get_content_slot_context_2
					);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_end_slot,
						content_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_end_slot_template, /*$$scope*/ ctx[84], dirty, get_content_end_slot_changes_2),
						get_content_end_slot_context_2
					);
				}
			}

			if (!current || dirty[1] & /*contentClasses*/ 2048) {
				attr(div1, "class", /*contentClasses*/ ctx[42]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			/*div0_binding_1*/ ctx[77](null);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

// (481:10) {#if checkbox || radio}
function create_if_block_26(ctx) {
	let label;
	let t0;
	let t1;
	let input;
	let input_value_value;
	let input_type_value;
	let t2;
	let i;
	let i_class_value;
	let t3;
	let t4;
	let div;
	let t5;
	let current_block_type_index;
	let if_block2;
	let t6;
	let t7;
	let t8;
	let current;
	let mounted;
	let dispose;
	const content_start_slot_template = /*#slots*/ ctx[70]["content-start"];
	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[84], get_content_start_slot_context_1);
	let if_block0 = /*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45] && create_if_block_46();
	let if_block1 = /*hasMedia*/ ctx[38] && create_if_block_44(ctx);
	const inner_start_slot_template = /*#slots*/ ctx[70]["inner-start"];
	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_start_slot_context_1);
	const if_block_creators = [create_if_block_27, create_else_block_3];
	const if_blocks = [];

	function select_block_type_5(ctx, dirty) {
		if (/*isMedia*/ ctx[27]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_5(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const inner_end_slot_template = /*#slots*/ ctx[70]["inner-end"];
	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_end_slot_context_1);
	const content_slot_template = /*#slots*/ ctx[70].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[84], get_content_slot_context_1);
	const content_end_slot_template = /*#slots*/ ctx[70]["content-end"];
	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[84], get_content_end_slot_context_1);

	return {
		c() {
			label = element("label");
			if (content_start_slot) content_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			input = element("input");
			t2 = space();
			i = element("i");
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div = element("div");
			if (inner_start_slot) inner_start_slot.c();
			t5 = space();
			if_block2.c();
			t6 = space();
			if (inner_end_slot) inner_end_slot.c();
			t7 = space();
			if (content_slot) content_slot.c();
			t8 = space();
			if (content_end_slot) content_end_slot.c();
			this.h();
		},
		l(nodes) {
			label = claim_element(nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			if (content_start_slot) content_start_slot.l(label_nodes);
			t0 = claim_space(label_nodes);
			if (if_block0) if_block0.l(label_nodes);
			t1 = claim_space(label_nodes);
			input = claim_element(label_nodes, "INPUT", { name: true, type: true });
			t2 = claim_space(label_nodes);
			i = claim_element(label_nodes, "I", { class: true });
			children(i).forEach(detach);
			t3 = claim_space(label_nodes);
			if (if_block1) if_block1.l(label_nodes);
			t4 = claim_space(label_nodes);
			div = claim_element(label_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (inner_start_slot) inner_start_slot.l(div_nodes);
			t5 = claim_space(div_nodes);
			if_block2.l(div_nodes);
			t6 = claim_space(div_nodes);
			if (inner_end_slot) inner_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			t7 = claim_space(label_nodes);
			if (content_slot) content_slot.l(label_nodes);
			t8 = claim_space(label_nodes);
			if (content_end_slot) content_end_slot.l(label_nodes);
			label_nodes.forEach(detach);
			this.h();
		},
		h() {
			input.value = input_value_value = typeof /*value*/ ctx[21] === 'undefined'
			? ''
			: /*value*/ ctx[21];

			attr(input, "name", /*name*/ ctx[20]);
			input.checked = /*checked*/ ctx[0];
			input.readOnly = /*readonly*/ ctx[22];
			input.disabled = /*disabled*/ ctx[24];
			input.required = /*required*/ ctx[23];
			attr(input, "type", input_type_value = /*radio*/ ctx[19] ? 'radio' : 'checkbox');
			attr(i, "class", i_class_value = `icon icon-${/*radio*/ ctx[19] ? 'radio' : 'checkbox'}`);
			attr(div, "class", "item-inner");
			attr(label, "class", /*contentClasses*/ ctx[42]);
		},
		m(target, anchor) {
			insert_hydration(target, label, anchor);

			if (content_start_slot) {
				content_start_slot.m(label, null);
			}

			append_hydration(label, t0);
			if (if_block0) if_block0.m(label, null);
			append_hydration(label, t1);
			append_hydration(label, input);
			/*input_binding*/ ctx[75](input);
			append_hydration(label, t2);
			append_hydration(label, i);
			append_hydration(label, t3);
			if (if_block1) if_block1.m(label, null);
			append_hydration(label, t4);
			append_hydration(label, div);

			if (inner_start_slot) {
				inner_start_slot.m(div, null);
			}

			append_hydration(div, t5);
			if_blocks[current_block_type_index].m(div, null);
			append_hydration(div, t6);

			if (inner_end_slot) {
				inner_end_slot.m(div, null);
			}

			/*div_binding*/ ctx[76](div);
			append_hydration(label, t7);

			if (content_slot) {
				content_slot.m(label, null);
			}

			append_hydration(label, t8);

			if (content_end_slot) {
				content_end_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*onChange*/ ctx[48]),
					listen(label, "click", /*onClick*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (content_start_slot) {
				if (content_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_start_slot,
						content_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_start_slot_template, /*$$scope*/ ctx[84], dirty, get_content_start_slot_changes_1),
						get_content_start_slot_context_1
					);
				}
			}

			if (/*isSortable*/ ctx[46] && /*sortable*/ ctx[16] !== false && /*isSortableOpposite*/ ctx[45]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_46();
					if_block0.c();
					if_block0.m(label, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty[0] & /*value*/ 2097152 && input_value_value !== (input_value_value = typeof /*value*/ ctx[21] === 'undefined'
			? ''
			: /*value*/ ctx[21]) && input.value !== input_value_value) {
				input.value = input_value_value;
			}

			if (!current || dirty[0] & /*name*/ 1048576) {
				attr(input, "name", /*name*/ ctx[20]);
			}

			if (!current || dirty[0] & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty[0] & /*readonly*/ 4194304) {
				input.readOnly = /*readonly*/ ctx[22];
			}

			if (!current || dirty[0] & /*disabled*/ 16777216) {
				input.disabled = /*disabled*/ ctx[24];
			}

			if (!current || dirty[0] & /*required*/ 8388608) {
				input.required = /*required*/ ctx[23];
			}

			if (!current || dirty[0] & /*radio*/ 524288 && input_type_value !== (input_type_value = /*radio*/ ctx[19] ? 'radio' : 'checkbox')) {
				attr(input, "type", input_type_value);
			}

			if (!current || dirty[0] & /*radio*/ 524288 && i_class_value !== (i_class_value = `icon icon-${/*radio*/ ctx[19] ? 'radio' : 'checkbox'}`)) {
				attr(i, "class", i_class_value);
			}

			if (/*hasMedia*/ ctx[38]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasMedia*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_44(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(label, t4);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_start_slot) {
				if (inner_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_start_slot,
						inner_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_start_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_start_slot_changes_1),
						get_inner_start_slot_context_1
					);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_5(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(div, t6);
			}

			if (inner_end_slot) {
				if (inner_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_end_slot,
						inner_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_end_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_end_slot_changes_1),
						get_inner_end_slot_context_1
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[84], dirty, get_content_slot_changes_1),
						get_content_slot_context_1
					);
				}
			}

			if (content_end_slot) {
				if (content_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						content_end_slot,
						content_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(content_end_slot_template, /*$$scope*/ ctx[84], dirty, get_content_end_slot_changes_1),
						get_content_end_slot_context_1
					);
				}
			}

			if (!current || dirty[1] & /*contentClasses*/ 2048) {
				attr(label, "class", /*contentClasses*/ ctx[42]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(content_start_slot, local);
			transition_in(if_block1);
			transition_in(inner_start_slot, local);
			transition_in(if_block2);
			transition_in(inner_end_slot, local);
			transition_in(content_slot, local);
			transition_in(content_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_start_slot, local);
			transition_out(if_block1);
			transition_out(inner_start_slot, local);
			transition_out(if_block2);
			transition_out(inner_end_slot, local);
			transition_out(content_slot, local);
			transition_out(content_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (content_start_slot) content_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[75](null);
			if (if_block1) if_block1.d();
			if (inner_start_slot) inner_start_slot.d(detaching);
			if_blocks[current_block_type_index].d();
			if (inner_end_slot) inner_end_slot.d(detaching);
			/*div_binding*/ ctx[76](null);
			if (content_slot) content_slot.d(detaching);
			if (content_end_slot) content_end_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (608:14) {#if isSortable && sortable !== false && isSortableOpposite}
function create_if_block_66(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (611:14) {#if hasMedia}
function create_if_block_64(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[4] !== 'undefined' && create_if_block_65(ctx);
	const media_slot_template = /*#slots*/ ctx[70].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[84], get_media_slot_context_2);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (media_slot) media_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[4] !== 'undefined') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_65(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						media_slot,
						media_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[84], dirty, get_media_slot_changes_2),
						get_media_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (613:18) {#if typeof media !== 'undefined'}
function create_if_block_65(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 16 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (673:16) {:else}
function create_else_block_5(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block2_anchor;
	let current;
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_5);
	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) && create_if_block_61(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_5);
	let if_block1 = /*hasAfter*/ ctx[32] && create_if_block_58(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_5);
	let if_block2 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_57(ctx);

	return {
		c() {
			if (before_title_slot) before_title_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (after_title_slot) after_title_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (inner_slot) inner_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l(nodes) {
			if (before_title_slot) before_title_slot.l(nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (after_title_slot) after_title_slot.l(nodes);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t3 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (before_title_slot) {
				before_title_slot.m(target, anchor);
			}

			insert_hydration(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (after_title_slot) {
				after_title_slot.m(target, anchor);
			}

			insert_hydration(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t3, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_5),
						get_before_title_slot_context_5
					);
				}
			}

			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 112) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_61(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_5),
						get_after_title_slot_context_5
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_58(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_5),
						get_inner_slot_context_5
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_57(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(before_title_slot, local);
			transition_in(if_block0);
			transition_in(after_title_slot, local);
			transition_in(if_block1);
			transition_in(inner_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(before_title_slot, local);
			transition_out(if_block0);
			transition_out(after_title_slot, local);
			transition_out(if_block1);
			transition_out(inner_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (before_title_slot) before_title_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (after_title_slot) after_title_slot.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (621:16) {#if isMedia}
function create_if_block_47(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let if_block6_anchor;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_56(ctx);
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_4);
	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_55(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_4);
	let if_block2 = /*hasAfter*/ ctx[32] && create_if_block_52(ctx);
	let if_block3 = /*hasSubtitle*/ ctx[34] && create_if_block_51(ctx);
	let if_block4 = /*hasText*/ ctx[33] && create_if_block_50(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_4);
	let if_block5 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_49(ctx);
	let if_block6 = /*hasFooter*/ ctx[35] && create_if_block_48(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			if (before_title_slot) before_title_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_title_slot) after_title_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			t6 = space();
			if (inner_slot) inner_slot.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (before_title_slot) before_title_slot.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_title_slot) after_title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			t4 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t5 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t6 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t7 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t8 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			if_block6_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "item-title-row");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div, anchor);

			if (before_title_slot) {
				before_title_slot.m(div, null);
			}

			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_title_slot) {
				after_title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block2) if_block2.m(div, null);
			insert_hydration(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t6, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t7, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, if_block6_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_56(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_4),
						get_before_title_slot_context_4
					);
				}
			}

			if (/*hasTitle*/ ctx[37]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasTitle*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_55(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_4),
						get_after_title_slot_context_4
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_52(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*hasSubtitle*/ ctx[34]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[1] & /*hasSubtitle*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_51(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*hasText*/ ctx[33]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasText*/ 4) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_50(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t6.parentNode, t6);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_4),
						get_inner_slot_context_4
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_49(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t8.parentNode, t8);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_48(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(before_title_slot, local);
			transition_in(if_block1);
			transition_in(after_title_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(inner_slot, local);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(before_title_slot, local);
			transition_out(if_block1);
			transition_out(after_title_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(inner_slot, local);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (before_title_slot) before_title_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (after_title_slot) after_title_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t6);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t7);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t8);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(if_block6_anchor);
		}
	};
}

// (675:18) {#if hasTitle || hasHeader || hasFooter}
function create_if_block_61(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*title*/ ctx[2]) + "";
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_63(ctx);
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_5);
	let if_block1 = /*hasFooter*/ ctx[35] && create_if_block_62(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (title_slot) title_slot.c();
			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			t1 = claim_text(div_nodes, t1_value);
			t2 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_63(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty[0] & /*title*/ 4) && t1_value !== (t1_value = plainText(/*title*/ ctx[2]) + "")) set_data(t1, t1_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_5),
						get_title_slot_context_5
					);
				}
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_62(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(title_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(title_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (title_slot) title_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

// (677:22) {#if hasHeader}
function create_if_block_63(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_5);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_5),
						get_header_slot_context_5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (685:22) {#if hasFooter}
function create_if_block_62(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_5);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_5),
						get_footer_slot_context_5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (694:18) {#if hasAfter}
function create_if_block_58(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_5);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_60(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_59(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_5);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_5);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_5),
						get_after_start_slot_context_5
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_60(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_59(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_5),
						get_after_slot_context_5
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_5),
						get_after_end_slot_context_5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (697:22) {#if typeof after !== 'undefined'}
function create_if_block_60(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (700:22) {#if typeof badge !== 'undefined'}
function create_if_block_59(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (701:24) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_5(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (708:18) {#if !(swipeout || accordionItem)}
function create_if_block_57(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (622:18) {#if hasHeader}
function create_if_block_56(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_4);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_4),
						get_header_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (630:20) {#if hasTitle}
function create_if_block_55(ctx) {
	let div;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_4);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_slot) title_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_4),
						get_title_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (637:20) {#if hasAfter}
function create_if_block_52(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_4);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_54(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_53(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_4);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_4);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_4),
						get_after_start_slot_context_4
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_54(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_53(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_4),
						get_after_slot_context_4
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_4),
						get_after_end_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (640:24) {#if typeof after !== 'undefined'}
function create_if_block_54(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (643:24) {#if typeof badge !== 'undefined'}
function create_if_block_53(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (644:26) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_4(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (651:18) {#if hasSubtitle}
function create_if_block_51(ctx) {
	let div;
	let t0_value = plainText(/*subtitle*/ ctx[5]) + "";
	let t0;
	let t1;
	let current;
	const subtitle_slot_template = /*#slots*/ ctx[70].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[84], get_subtitle_slot_context_2);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (subtitle_slot) subtitle_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (subtitle_slot) subtitle_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-subtitle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (subtitle_slot) {
				subtitle_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*subtitle*/ 32) && t0_value !== (t0_value = plainText(/*subtitle*/ ctx[5]) + "")) set_data(t0, t0_value);

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[84], dirty, get_subtitle_slot_changes_2),
						get_subtitle_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtitle_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subtitle_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (subtitle_slot) subtitle_slot.d(detaching);
		}
	};
}

// (657:18) {#if hasText}
function create_if_block_50(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[3]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[70].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[84], get_text_slot_context_2);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (text_slot) text_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-text");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*text*/ 8) && t0_value !== (t0_value = plainText(/*text*/ ctx[3]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[84], dirty, get_text_slot_changes_2),
						get_text_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (664:18) {#if !(swipeout || accordionItem)}
function create_if_block_49(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (667:18) {#if hasFooter}
function create_if_block_48(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_4);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_4),
						get_footer_slot_context_4
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (484:14) {#if isSortable && sortable !== false && isSortableOpposite}
function create_if_block_46(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (499:14) {#if hasMedia}
function create_if_block_44(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[4] !== 'undefined' && create_if_block_45(ctx);
	const media_slot_template = /*#slots*/ ctx[70].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[84], get_media_slot_context_1);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (media_slot) media_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[4] !== 'undefined') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_45(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						media_slot,
						media_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[84], dirty, get_media_slot_changes_1),
						get_media_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (501:18) {#if typeof media !== 'undefined'}
function create_if_block_45(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 16 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (561:16) {:else}
function create_else_block_3(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block2_anchor;
	let current;
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_3);
	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) && create_if_block_41(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_3);
	let if_block1 = /*hasAfter*/ ctx[32] && create_if_block_38(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_3);
	let if_block2 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_37(ctx);

	return {
		c() {
			if (before_title_slot) before_title_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (after_title_slot) after_title_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (inner_slot) inner_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l(nodes) {
			if (before_title_slot) before_title_slot.l(nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (after_title_slot) after_title_slot.l(nodes);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t3 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (before_title_slot) {
				before_title_slot.m(target, anchor);
			}

			insert_hydration(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (after_title_slot) {
				after_title_slot.m(target, anchor);
			}

			insert_hydration(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t3, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_3),
						get_before_title_slot_context_3
					);
				}
			}

			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 112) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_41(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_3),
						get_after_title_slot_context_3
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_38(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_3),
						get_inner_slot_context_3
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_37(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(before_title_slot, local);
			transition_in(if_block0);
			transition_in(after_title_slot, local);
			transition_in(if_block1);
			transition_in(inner_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(before_title_slot, local);
			transition_out(if_block0);
			transition_out(after_title_slot, local);
			transition_out(if_block1);
			transition_out(inner_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (before_title_slot) before_title_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (after_title_slot) after_title_slot.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (509:16) {#if isMedia}
function create_if_block_27(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let if_block6_anchor;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_36(ctx);
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_2);
	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_35(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_2);
	let if_block2 = /*hasAfter*/ ctx[32] && create_if_block_32(ctx);
	let if_block3 = /*hasSubtitle*/ ctx[34] && create_if_block_31(ctx);
	let if_block4 = /*hasText*/ ctx[33] && create_if_block_30(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_2);
	let if_block5 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_29(ctx);
	let if_block6 = /*hasFooter*/ ctx[35] && create_if_block_28(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			if (before_title_slot) before_title_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_title_slot) after_title_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			t6 = space();
			if (inner_slot) inner_slot.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (before_title_slot) before_title_slot.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_title_slot) after_title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			t4 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t5 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t6 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t7 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t8 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			if_block6_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "item-title-row");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div, anchor);

			if (before_title_slot) {
				before_title_slot.m(div, null);
			}

			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_title_slot) {
				after_title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block2) if_block2.m(div, null);
			insert_hydration(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t6, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t7, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, if_block6_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_36(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_2),
						get_before_title_slot_context_2
					);
				}
			}

			if (/*hasTitle*/ ctx[37]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasTitle*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_35(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_2),
						get_after_title_slot_context_2
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_32(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*hasSubtitle*/ ctx[34]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[1] & /*hasSubtitle*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_31(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*hasText*/ ctx[33]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasText*/ 4) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_30(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t6.parentNode, t6);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_2),
						get_inner_slot_context_2
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_29(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t8.parentNode, t8);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_28(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(before_title_slot, local);
			transition_in(if_block1);
			transition_in(after_title_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(inner_slot, local);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(before_title_slot, local);
			transition_out(if_block1);
			transition_out(after_title_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(inner_slot, local);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (before_title_slot) before_title_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (after_title_slot) after_title_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t6);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t7);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t8);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(if_block6_anchor);
		}
	};
}

// (563:18) {#if hasTitle || hasHeader || hasFooter}
function create_if_block_41(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*title*/ ctx[2]) + "";
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_43(ctx);
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_3);
	let if_block1 = /*hasFooter*/ ctx[35] && create_if_block_42(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (title_slot) title_slot.c();
			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			t1 = claim_text(div_nodes, t1_value);
			t2 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_43(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty[0] & /*title*/ 4) && t1_value !== (t1_value = plainText(/*title*/ ctx[2]) + "")) set_data(t1, t1_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_3),
						get_title_slot_context_3
					);
				}
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_42(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(title_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(title_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (title_slot) title_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

// (565:22) {#if hasHeader}
function create_if_block_43(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_3);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_3),
						get_header_slot_context_3
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (573:22) {#if hasFooter}
function create_if_block_42(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_3);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_3),
						get_footer_slot_context_3
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (582:18) {#if hasAfter}
function create_if_block_38(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_3);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_40(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_39(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_3);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_3);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_3),
						get_after_start_slot_context_3
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_40(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_39(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_3),
						get_after_slot_context_3
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_3),
						get_after_end_slot_context_3
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (585:22) {#if typeof after !== 'undefined'}
function create_if_block_40(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (588:22) {#if typeof badge !== 'undefined'}
function create_if_block_39(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (589:24) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_3(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (596:18) {#if !(swipeout || accordionItem)}
function create_if_block_37(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (510:18) {#if hasHeader}
function create_if_block_36(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_2);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_2),
						get_header_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (518:20) {#if hasTitle}
function create_if_block_35(ctx) {
	let div;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_2);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_slot) title_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_2),
						get_title_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (525:20) {#if hasAfter}
function create_if_block_32(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_2);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_34(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_33(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_2);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_2);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_2),
						get_after_start_slot_context_2
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_34(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_33(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_2),
						get_after_slot_context_2
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_2),
						get_after_end_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (528:24) {#if typeof after !== 'undefined'}
function create_if_block_34(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (531:24) {#if typeof badge !== 'undefined'}
function create_if_block_33(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (532:26) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_2(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (539:18) {#if hasSubtitle}
function create_if_block_31(ctx) {
	let div;
	let t0_value = plainText(/*subtitle*/ ctx[5]) + "";
	let t0;
	let t1;
	let current;
	const subtitle_slot_template = /*#slots*/ ctx[70].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[84], get_subtitle_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (subtitle_slot) subtitle_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (subtitle_slot) subtitle_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-subtitle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (subtitle_slot) {
				subtitle_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*subtitle*/ 32) && t0_value !== (t0_value = plainText(/*subtitle*/ ctx[5]) + "")) set_data(t0, t0_value);

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[84], dirty, get_subtitle_slot_changes_1),
						get_subtitle_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtitle_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subtitle_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (subtitle_slot) subtitle_slot.d(detaching);
		}
	};
}

// (545:18) {#if hasText}
function create_if_block_30(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[3]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[70].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[84], get_text_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (text_slot) text_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-text");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*text*/ 8) && t0_value !== (t0_value = plainText(/*text*/ ctx[3]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[84], dirty, get_text_slot_changes_1),
						get_text_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (552:18) {#if !(swipeout || accordionItem)}
function create_if_block_29(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (555:18) {#if hasFooter}
function create_if_block_28(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_2);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_2),
						get_footer_slot_context_2
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (368:14) {#if isSortable && sortable !== false && isSortableOpposite}
function create_if_block_25(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (371:14) {#if hasMedia}
function create_if_block_23(ctx) {
	let div;
	let t;
	let current;
	let if_block = typeof /*media*/ ctx[4] !== 'undefined' && create_if_block_24(ctx);
	const media_slot_template = /*#slots*/ ctx[70].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[84], get_media_slot_context);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (media_slot) media_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t = claim_space(div_nodes);
			if (media_slot) media_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-media");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_hydration(div, t);

			if (media_slot) {
				media_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (typeof /*media*/ ctx[4] !== 'undefined') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_24(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (media_slot) {
				if (media_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						media_slot,
						media_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(media_slot_template, /*$$scope*/ ctx[84], dirty, get_media_slot_changes),
						get_media_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(media_slot, local);
			current = true;
		},
		o(local) {
			transition_out(media_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (media_slot) media_slot.d(detaching);
		}
	};
}

// (373:18) {#if typeof media !== 'undefined'}
function create_if_block_24(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true });
			this.h();
		},
		h() {
			if (!src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*media*/ 16 && !src_url_equal(img.src, img_src_value = /*media*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (433:16) {:else}
function create_else_block_1(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block2_anchor;
	let current;
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context_1);
	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) && create_if_block_20(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context_1);
	let if_block1 = /*hasAfter*/ ctx[32] && create_if_block_17(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context_1);
	let if_block2 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_16(ctx);

	return {
		c() {
			if (before_title_slot) before_title_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (after_title_slot) after_title_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (inner_slot) inner_slot.c();
			t4 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		l(nodes) {
			if (before_title_slot) before_title_slot.l(nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (after_title_slot) after_title_slot.l(nodes);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t3 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (before_title_slot) {
				before_title_slot.m(target, anchor);
			}

			insert_hydration(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t1, anchor);

			if (after_title_slot) {
				after_title_slot.m(target, anchor);
			}

			insert_hydration(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t3, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes_1),
						get_before_title_slot_context_1
					);
				}
			}

			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[36] || /*hasFooter*/ ctx[35]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 112) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_20(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes_1),
						get_after_title_slot_context_1
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_17(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t3.parentNode, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes_1),
						get_inner_slot_context_1
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_16(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(before_title_slot, local);
			transition_in(if_block0);
			transition_in(after_title_slot, local);
			transition_in(if_block1);
			transition_in(inner_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(before_title_slot, local);
			transition_out(if_block0);
			transition_out(after_title_slot, local);
			transition_out(if_block1);
			transition_out(inner_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (before_title_slot) before_title_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (after_title_slot) after_title_slot.d(detaching);
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t3);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (381:16) {#if isMedia}
function create_if_block_6(ctx) {
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let if_block6_anchor;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_15(ctx);
	const before_title_slot_template = /*#slots*/ ctx[70]["before-title"];
	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[84], get_before_title_slot_context);
	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_14(ctx);
	const after_title_slot_template = /*#slots*/ ctx[70]["after-title"];
	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[84], get_after_title_slot_context);
	let if_block2 = /*hasAfter*/ ctx[32] && create_if_block_11(ctx);
	let if_block3 = /*hasSubtitle*/ ctx[34] && create_if_block_10(ctx);
	let if_block4 = /*hasText*/ ctx[33] && create_if_block_9(ctx);
	const inner_slot_template = /*#slots*/ ctx[70].inner;
	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[84], get_inner_slot_context);
	let if_block5 = !(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17]) && create_if_block_8(ctx);
	let if_block6 = /*hasFooter*/ ctx[35] && create_if_block_7(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			if (before_title_slot) before_title_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_title_slot) after_title_slot.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			t6 = space();
			if (inner_slot) inner_slot.c();
			t7 = space();
			if (if_block5) if_block5.c();
			t8 = space();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (before_title_slot) before_title_slot.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_title_slot) after_title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			t4 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t5 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t6 = claim_space(nodes);
			if (inner_slot) inner_slot.l(nodes);
			t7 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			t8 = claim_space(nodes);
			if (if_block6) if_block6.l(nodes);
			if_block6_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "item-title-row");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, div, anchor);

			if (before_title_slot) {
				before_title_slot.m(div, null);
			}

			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_title_slot) {
				after_title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block2) if_block2.m(div, null);
			insert_hydration(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, t6, anchor);

			if (inner_slot) {
				inner_slot.m(target, anchor);
			}

			insert_hydration(target, t7, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_hydration(target, t8, anchor);
			if (if_block6) if_block6.m(target, anchor);
			insert_hydration(target, if_block6_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_15(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (before_title_slot) {
				if (before_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						before_title_slot,
						before_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(before_title_slot_template, /*$$scope*/ ctx[84], dirty, get_before_title_slot_changes),
						get_before_title_slot_context
					);
				}
			}

			if (/*hasTitle*/ ctx[37]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasTitle*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_14(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_title_slot) {
				if (after_title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_title_slot,
						after_title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_title_slot_template, /*$$scope*/ ctx[84], dirty, get_after_title_slot_changes),
						get_after_title_slot_context
					);
				}
			}

			if (/*hasAfter*/ ctx[32]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[1] & /*hasAfter*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_11(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*hasSubtitle*/ ctx[34]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[1] & /*hasSubtitle*/ 8) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_10(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*hasText*/ ctx[33]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[1] & /*hasText*/ 4) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_9(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t6.parentNode, t6);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (inner_slot) {
				if (inner_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						inner_slot,
						inner_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(inner_slot_template, /*$$scope*/ ctx[84], dirty, get_inner_slot_changes),
						get_inner_slot_context
					);
				}
			}

			if (!(/*swipeout*/ ctx[15] || /*accordionItem*/ ctx[17])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*swipeout, accordionItem*/ 163840) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_8(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(t8.parentNode, t8);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block6, 1);
					}
				} else {
					if_block6 = create_if_block_7(ctx);
					if_block6.c();
					transition_in(if_block6, 1);
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				group_outros();

				transition_out(if_block6, 1, 1, () => {
					if_block6 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(before_title_slot, local);
			transition_in(if_block1);
			transition_in(after_title_slot, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			transition_in(inner_slot, local);
			transition_in(if_block5);
			transition_in(if_block6);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(before_title_slot, local);
			transition_out(if_block1);
			transition_out(after_title_slot, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			transition_out(inner_slot, local);
			transition_out(if_block5);
			transition_out(if_block6);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (before_title_slot) before_title_slot.d(detaching);
			if (if_block1) if_block1.d();
			if (after_title_slot) after_title_slot.d(detaching);
			if (if_block2) if_block2.d();
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t6);
			if (inner_slot) inner_slot.d(detaching);
			if (detaching) detach(t7);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach(t8);
			if (if_block6) if_block6.d(detaching);
			if (detaching) detach(if_block6_anchor);
		}
	};
}

// (435:18) {#if hasTitle || hasHeader || hasFooter}
function create_if_block_20(ctx) {
	let div;
	let t0;
	let t1_value = plainText(/*title*/ ctx[2]) + "";
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*hasHeader*/ ctx[36] && create_if_block_22(ctx);
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context_1);
	let if_block1 = /*hasFooter*/ ctx[35] && create_if_block_21(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (title_slot) title_slot.c();
			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			t1 = claim_text(div_nodes, t1_value);
			t2 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t0);
			append_hydration(div, t1);
			append_hydration(div, t2);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append_hydration(div, t3);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*hasHeader*/ ctx[36]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*hasHeader*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_22(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if ((!current || dirty[0] & /*title*/ 4) && t1_value !== (t1_value = plainText(/*title*/ ctx[2]) + "")) set_data(t1, t1_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes_1),
						get_title_slot_context_1
					);
				}
			}

			if (/*hasFooter*/ ctx[35]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[1] & /*hasFooter*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_21(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(title_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(title_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (title_slot) title_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

// (437:22) {#if hasHeader}
function create_if_block_22(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes_1),
						get_header_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (445:22) {#if hasFooter}
function create_if_block_21(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context_1);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes_1),
						get_footer_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (454:18) {#if hasAfter}
function create_if_block_17(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context_1);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_19(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_18(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context_1);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context_1);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes_1),
						get_after_start_slot_context_1
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_19(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_18(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes_1),
						get_after_slot_context_1
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes_1),
						get_after_end_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (457:22) {#if typeof after !== 'undefined'}
function create_if_block_19(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (460:22) {#if typeof badge !== 'undefined'}
function create_if_block_18(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (461:24) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot_1(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (468:18) {#if !(swipeout || accordionItem)}
function create_if_block_16(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (382:18) {#if hasHeader}
function create_if_block_15(ctx) {
	let div;
	let t0_value = plainText(/*header*/ ctx[6]) + "";
	let t0;
	let t1;
	let current;
	const header_slot_template = /*#slots*/ ctx[70].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[84], get_header_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (header_slot) header_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (header_slot) header_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-header");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (header_slot) {
				header_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*header*/ 64) && t0_value !== (t0_value = plainText(/*header*/ ctx[6]) + "")) set_data(t0, t0_value);

			if (header_slot) {
				if (header_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[84], dirty, get_header_slot_changes),
						get_header_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (390:20) {#if hasTitle}
function create_if_block_14(ctx) {
	let div;
	let t0_value = plainText(/*title*/ ctx[2]) + "";
	let t0;
	let t1;
	let current;
	const title_slot_template = /*#slots*/ ctx[70].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[84], get_title_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (title_slot) title_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (title_slot) title_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-title");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (title_slot) {
				title_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*title*/ 4) && t0_value !== (t0_value = plainText(/*title*/ ctx[2]) + "")) set_data(t0, t0_value);

			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[84], dirty, get_title_slot_changes),
						get_title_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
		}
	};
}

// (397:20) {#if hasAfter}
function create_if_block_11(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const after_start_slot_template = /*#slots*/ ctx[70]["after-start"];
	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[84], get_after_start_slot_context);
	let if_block0 = typeof /*after*/ ctx[10] !== 'undefined' && create_if_block_13(ctx);
	let if_block1 = typeof /*badge*/ ctx[11] !== 'undefined' && create_if_block_12(ctx);
	const after_slot_template = /*#slots*/ ctx[70].after;
	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[84], get_after_slot_context);
	const after_end_slot_template = /*#slots*/ ctx[70]["after-end"];
	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[84], get_after_end_slot_context);

	return {
		c() {
			div = element("div");
			if (after_start_slot) after_start_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (after_slot) after_slot.c();
			t3 = space();
			if (after_end_slot) after_end_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (after_start_slot) after_start_slot.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (after_slot) after_slot.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (after_end_slot) after_end_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-after");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (after_start_slot) {
				after_start_slot.m(div, null);
			}

			append_hydration(div, t0);
			if (if_block0) if_block0.m(div, null);
			append_hydration(div, t1);
			if (if_block1) if_block1.m(div, null);
			append_hydration(div, t2);

			if (after_slot) {
				after_slot.m(div, null);
			}

			append_hydration(div, t3);

			if (after_end_slot) {
				after_end_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (after_start_slot) {
				if (after_start_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_start_slot,
						after_start_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_start_slot_template, /*$$scope*/ ctx[84], dirty, get_after_start_slot_changes),
						get_after_start_slot_context
					);
				}
			}

			if (typeof /*after*/ ctx[10] !== 'undefined') {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_13(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (typeof /*badge*/ ctx[11] !== 'undefined') {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*badge*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_12(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (after_slot) {
				if (after_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_slot,
						after_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_slot_template, /*$$scope*/ ctx[84], dirty, get_after_slot_changes),
						get_after_slot_context
					);
				}
			}

			if (after_end_slot) {
				if (after_end_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						after_end_slot,
						after_end_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(after_end_slot_template, /*$$scope*/ ctx[84], dirty, get_after_end_slot_changes),
						get_after_end_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(after_start_slot, local);
			transition_in(if_block1);
			transition_in(after_slot, local);
			transition_in(after_end_slot, local);
			current = true;
		},
		o(local) {
			transition_out(after_start_slot, local);
			transition_out(if_block1);
			transition_out(after_slot, local);
			transition_out(after_end_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (after_start_slot) after_start_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (after_slot) after_slot.d(detaching);
			if (after_end_slot) after_end_slot.d(detaching);
		}
	};
}

// (400:24) {#if typeof after !== 'undefined'}
function create_if_block_13(ctx) {
	let span;
	let t_value = plainText(/*after*/ ctx[10]) + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		l(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert_hydration(target, span, anchor);
			append_hydration(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*after*/ 1024 && t_value !== (t_value = plainText(/*after*/ ctx[10]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (403:24) {#if typeof badge !== 'undefined'}
function create_if_block_12(ctx) {
	let badge_1;
	let current;

	badge_1 = new Badge({
			props: {
				color: /*badgeColor*/ ctx[12],
				lec: /*lec*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(badge_1.$$.fragment);
		},
		l(nodes) {
			claim_component(badge_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(badge_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const badge_1_changes = {};
			if (dirty[0] & /*badgeColor*/ 4096) badge_1_changes.color = /*badgeColor*/ ctx[12];
			if (dirty[0] & /*lec*/ 2) badge_1_changes.lec = /*lec*/ ctx[1];

			if (dirty[0] & /*badge*/ 2048 | dirty[2] & /*$$scope*/ 4194304) {
				badge_1_changes.$$scope = { dirty, ctx };
			}

			badge_1.$set(badge_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(badge_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(badge_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(badge_1, detaching);
		}
	};
}

// (404:26) <Badge  color={badgeColor}     lec={lec} >
function create_default_slot(ctx) {
	let t_value = plainText(/*badge*/ ctx[11]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*badge*/ 2048 && t_value !== (t_value = plainText(/*badge*/ ctx[11]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (411:18) {#if hasSubtitle}
function create_if_block_10(ctx) {
	let div;
	let t0_value = plainText(/*subtitle*/ ctx[5]) + "";
	let t0;
	let t1;
	let current;
	const subtitle_slot_template = /*#slots*/ ctx[70].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[84], get_subtitle_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (subtitle_slot) subtitle_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (subtitle_slot) subtitle_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-subtitle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (subtitle_slot) {
				subtitle_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*subtitle*/ 32) && t0_value !== (t0_value = plainText(/*subtitle*/ ctx[5]) + "")) set_data(t0, t0_value);

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[84], dirty, get_subtitle_slot_changes),
						get_subtitle_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtitle_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subtitle_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (subtitle_slot) subtitle_slot.d(detaching);
		}
	};
}

// (417:18) {#if hasText}
function create_if_block_9(ctx) {
	let div;
	let t0_value = plainText(/*text*/ ctx[3]) + "";
	let t0;
	let t1;
	let current;
	const text_slot_template = /*#slots*/ ctx[70].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[84], get_text_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (text_slot) text_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (text_slot) text_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-text");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (text_slot) {
				text_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*text*/ 8) && t0_value !== (t0_value = plainText(/*text*/ ctx[3]) + "")) set_data(t0, t0_value);

			if (text_slot) {
				if (text_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[84], dirty, get_text_slot_changes),
						get_text_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(text_slot, local);
			current = true;
		},
		o(local) {
			transition_out(text_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (text_slot) text_slot.d(detaching);
		}
	};
}

// (424:18) {#if !(swipeout || accordionItem)}
function create_if_block_8(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (427:18) {#if hasFooter}
function create_if_block_7(ctx) {
	let div;
	let t0_value = plainText(/*footer*/ ctx[7]) + "";
	let t0;
	let t1;
	let current;
	const footer_slot_template = /*#slots*/ ctx[70].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[84], get_footer_slot_context);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (footer_slot) footer_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (footer_slot) footer_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "item-footer");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t0);
			append_hydration(div, t1);

			if (footer_slot) {
				footer_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*footer*/ 128) && t0_value !== (t0_value = plainText(/*footer*/ ctx[7]) + "")) set_data(t0, t0_value);

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[84], dirty, get_footer_slot_changes),
						get_footer_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (footer_slot) footer_slot.d(detaching);
		}
	};
}

// (1084:4) {#if isSortable && sortable !== false && !isSortableOpposite}
function create_if_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "sortable-handler");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (1087:4) {#if swipeout || accordionItem}
function create_if_block_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[70].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[84], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[84],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[84])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[84], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (332:16) {plainText(title)}
function fallback_block(ctx) {
	let t_value = plainText(/*title*/ ctx[2]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert_hydration(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*title*/ 4 && t_value !== (t_value = plainText(/*title*/ ctx[2]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*divider*/ ctx[13] || /*groupTitle*/ ctx[14]) return 0;
		if (/*isSimple*/ ctx[44]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isMedia;
	let isSortable;
	let isSortableOpposite;
	let isSimple;
	let liClasses;
	let contentClasses;
	let linkClasses;
	let linkAttrs;
	let isLink;
	let hasMedia;
	let hasTitle;
	let hasHeader;
	let hasFooter;
	let hasSubtitle;
	let hasText;
	let hasAfter;

	const omit_props_names = [
		"lec","class","title","text","media","subtitle","header","footer","tooltip","tooltipTrigger","link","tabLink","tabLinkActive","selected","href","target","after","badge","badgeColor","mediaItem","mediaList","divider","groupTitle","swipeout","swipeoutOpened","sortable","sortableOpposite","accordionItem","accordionItemOpened","smartSelect","smartSelectParams","noChevron","chevronCenter","checkbox","radio","radioIcon","checked","indeterminate","name","value","readonly","required","disabled","virtualListIndex","routeProps","smartSelectInstance"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { lec } = $$props;
	const emit = createEmitter(createEventDispatcher, $$props);
	let { class: className = undefined } = $$props;
	let { title = undefined } = $$props;
	let { text = undefined } = $$props;
	let { media = undefined } = $$props;
	let { subtitle = undefined } = $$props;
	let { header = undefined } = $$props;
	let { footer = undefined } = $$props;
	let { tooltip = undefined } = $$props;
	let { tooltipTrigger = undefined } = $$props;
	let { link = undefined } = $$props;
	let { tabLink = undefined } = $$props;
	let { tabLinkActive = false } = $$props;
	let { selected = false } = $$props;
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { after = undefined } = $$props;
	let { badge = undefined } = $$props;
	let { badgeColor = undefined } = $$props;
	let { mediaItem = false } = $$props;
	let { mediaList = false } = $$props;
	let { divider = false } = $$props;
	let { groupTitle = false } = $$props;
	let { swipeout = false } = $$props;
	let { swipeoutOpened = false } = $$props;
	let { sortable = undefined } = $$props;
	let { sortableOpposite = undefined } = $$props;
	let { accordionItem = false } = $$props;
	let { accordionItemOpened = false } = $$props;
	let { smartSelect = false } = $$props;
	let { smartSelectParams = undefined } = $$props;
	let { noChevron = undefined } = $$props;
	let { chevronCenter = undefined } = $$props;
	let { checkbox = undefined } = $$props;
	let { radio = undefined } = $$props;
	let { radioIcon = undefined } = $$props;
	let { checked = undefined } = $$props;
	let { indeterminate = undefined } = $$props;
	let { name = undefined } = $$props;
	let { value = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let { required = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { virtualListIndex = undefined } = $$props;
	let { routeProps = undefined } = $$props;
	let el;
	let linkEl;
	let innerEl;
	let inputEl;
	let f7SmartSelect;

	function smartSelectInstance() {
		return f7SmartSelect;
	}

	let ListContext = getReactiveContext('ListContext', value => {
		$$invalidate(69, ListContext = value || {});
	}) || {};

	/* eslint-enable no-undef */
	let initialWatchedOpened = false;

	function watchSwipeoutOpened(opened) {
		if (!initialWatchedOpened) {
			initialWatchedOpened = true;
			return;
		}

		if (!swipeout) return;

		if (opened) {
			app.f7.swipeout.open(el);
		} else {
			app.f7.swipeout.close(el);
		}
	}

	function onClick(event) {
		if (event.target.tagName.toLowerCase() !== 'input') {
			emit('click', event);
		}
	}

	function onSwipeoutOverswipeEnter(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutOverswipeEnter');
	}

	function onSwipeoutOverswipeExit(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutOverswipeExit');
	}

	function onSwipeoutDeleted(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutDeleted');
	}

	function onSwipeoutDelete(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutDelete');
	}

	function onSwipeoutClose(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutClose');
	}

	function onSwipeoutClosed(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutClosed');
	}

	function onSwipeoutOpen(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutOpen');
	}

	function onSwipeoutOpened(eventEl) {
		if (eventEl !== el) return;
		emit('swipeoutOpened');
	}

	function onSwipeout(eventEl, progress) {
		if (eventEl !== el) return;
		emit('swipeout', progress);
	}

	function onAccBeforeClose(eventEl, prevent) {
		if (eventEl !== el) return;
		emit('accordionBeforeClose', [prevent]);
	}

	function onAccClose(eventEl) {
		if (eventEl !== el) return;
		emit('accordionClose');
	}

	function onAccClosed(eventEl) {
		if (eventEl !== el) return;
		emit('accordionClosed');
	}

	function onAccBeforeOpen(eventEl, prevent) {
		if (eventEl !== el) return;
		emit('accordionBeforeOpen', [prevent]);
	}

	function onAccOpen(eventEl) {
		if (eventEl !== el) return;
		emit('accordionOpen');
	}

	function onAccOpened(eventEl) {
		if (eventEl !== el) return;
		emit('accordionOpened');
	}

	function onChange(event) {
		emit('change', [event]);
		$$invalidate(0, checked = event.target.checked);
	}

	useSmartSelect(
		{ smartSelect, smartSelectParams },
		instance => {
			f7SmartSelect = instance;
		},
		() => linkEl
	);

	onMount(() => {
		if (indeterminate && inputEl) {
			$$invalidate(31, inputEl.indeterminate = true, inputEl);
		}

		f7ready(() => {
			if (swipeout) {
				app.f7.on('swipeoutOpen', onSwipeoutOpen);
				app.f7.on('swipeoutOpened', onSwipeoutOpened);
				app.f7.on('swipeoutClose', onSwipeoutClose);
				app.f7.on('swipeoutClosed', onSwipeoutClosed);
				app.f7.on('swipeoutDelete', onSwipeoutDelete);
				app.f7.on('swipeoutDeleted', onSwipeoutDeleted);
				app.f7.on('swipeoutOverswipeEnter', onSwipeoutOverswipeEnter);
				app.f7.on('swipeoutOverswipeExit', onSwipeoutOverswipeExit);
				app.f7.on('swipeout', onSwipeout);
			}

			if (accordionItem) {
				app.f7.on('accordionBeforeOpen', onAccBeforeOpen);
				app.f7.on('accordionOpen', onAccOpen);
				app.f7.on('accordionOpened', onAccOpened);
				app.f7.on('accordionBeforeClose', onAccBeforeClose);
				app.f7.on('accordionClose', onAccClose);
				app.f7.on('accordionClosed', onAccClosed);
			}

			if (swipeoutOpened) {
				app.f7.swipeout.open(el);
			}
		});
	});

	afterUpdate(() => {
		if (inputEl) {
			$$invalidate(31, inputEl.indeterminate = indeterminate, inputEl);
		}
	});

	onDestroy(() => {
		if (!app.f7) return;

		if (swipeout) {
			app.f7.off('swipeoutOpen', onSwipeoutOpen);
			app.f7.off('swipeoutOpened', onSwipeoutOpened);
			app.f7.off('swipeoutClose', onSwipeoutClose);
			app.f7.off('swipeoutClosed', onSwipeoutClosed);
			app.f7.off('swipeoutDelete', onSwipeoutDelete);
			app.f7.off('swipeoutDeleted', onSwipeoutDeleted);
			app.f7.off('swipeoutOverswipeEnter', onSwipeoutOverswipeEnter);
			app.f7.off('swipeoutOverswipeExit', onSwipeoutOverswipeExit);
			app.f7.off('swipeout', onSwipeout);
		}

		if (accordionItem) {
			app.f7.off('accordionBeforeOpen', onAccBeforeOpen);
			app.f7.off('accordionOpen', onAccOpen);
			app.f7.off('accordionOpened', onAccOpened);
			app.f7.off('accordionBeforeClose', onAccBeforeClose);
			app.f7.off('accordionClose', onAccClose);
			app.f7.off('accordionClosed', onAccClosed);
		}
	});

	function li_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(28, el);
		});
	}

	function li_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(28, el);
		});
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerEl = $$value;
			$$invalidate(30, innerEl);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			linkEl = $$value;
			$$invalidate(29, linkEl);
		});
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputEl = $$value;
			$$invalidate(31, inputEl);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerEl = $$value;
			$$invalidate(30, innerEl);
		});
	}

	function div0_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerEl = $$value;
			$$invalidate(30, innerEl);
		});
	}

	function div0_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerEl = $$value;
			$$invalidate(30, innerEl);
		});
	}

	function a_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			linkEl = $$value;
			$$invalidate(29, linkEl);
		});
	}

	function input_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputEl = $$value;
			$$invalidate(31, inputEl);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerEl = $$value;
			$$invalidate(30, innerEl);
		});
	}

	function div0_binding_3($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerEl = $$value;
			$$invalidate(30, innerEl);
		});
	}

	function li_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			el = $$value;
			$$invalidate(28, el);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(106, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(49, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('lec' in $$new_props) $$invalidate(1, lec = $$new_props.lec);
		if ('class' in $$new_props) $$invalidate(50, className = $$new_props.class);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('text' in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ('media' in $$new_props) $$invalidate(4, media = $$new_props.media);
		if ('subtitle' in $$new_props) $$invalidate(5, subtitle = $$new_props.subtitle);
		if ('header' in $$new_props) $$invalidate(6, header = $$new_props.header);
		if ('footer' in $$new_props) $$invalidate(7, footer = $$new_props.footer);
		if ('tooltip' in $$new_props) $$invalidate(8, tooltip = $$new_props.tooltip);
		if ('tooltipTrigger' in $$new_props) $$invalidate(9, tooltipTrigger = $$new_props.tooltipTrigger);
		if ('link' in $$new_props) $$invalidate(51, link = $$new_props.link);
		if ('tabLink' in $$new_props) $$invalidate(52, tabLink = $$new_props.tabLink);
		if ('tabLinkActive' in $$new_props) $$invalidate(53, tabLinkActive = $$new_props.tabLinkActive);
		if ('selected' in $$new_props) $$invalidate(54, selected = $$new_props.selected);
		if ('href' in $$new_props) $$invalidate(55, href = $$new_props.href);
		if ('target' in $$new_props) $$invalidate(56, target = $$new_props.target);
		if ('after' in $$new_props) $$invalidate(10, after = $$new_props.after);
		if ('badge' in $$new_props) $$invalidate(11, badge = $$new_props.badge);
		if ('badgeColor' in $$new_props) $$invalidate(12, badgeColor = $$new_props.badgeColor);
		if ('mediaItem' in $$new_props) $$invalidate(57, mediaItem = $$new_props.mediaItem);
		if ('mediaList' in $$new_props) $$invalidate(58, mediaList = $$new_props.mediaList);
		if ('divider' in $$new_props) $$invalidate(13, divider = $$new_props.divider);
		if ('groupTitle' in $$new_props) $$invalidate(14, groupTitle = $$new_props.groupTitle);
		if ('swipeout' in $$new_props) $$invalidate(15, swipeout = $$new_props.swipeout);
		if ('swipeoutOpened' in $$new_props) $$invalidate(59, swipeoutOpened = $$new_props.swipeoutOpened);
		if ('sortable' in $$new_props) $$invalidate(16, sortable = $$new_props.sortable);
		if ('sortableOpposite' in $$new_props) $$invalidate(60, sortableOpposite = $$new_props.sortableOpposite);
		if ('accordionItem' in $$new_props) $$invalidate(17, accordionItem = $$new_props.accordionItem);
		if ('accordionItemOpened' in $$new_props) $$invalidate(61, accordionItemOpened = $$new_props.accordionItemOpened);
		if ('smartSelect' in $$new_props) $$invalidate(62, smartSelect = $$new_props.smartSelect);
		if ('smartSelectParams' in $$new_props) $$invalidate(63, smartSelectParams = $$new_props.smartSelectParams);
		if ('noChevron' in $$new_props) $$invalidate(64, noChevron = $$new_props.noChevron);
		if ('chevronCenter' in $$new_props) $$invalidate(65, chevronCenter = $$new_props.chevronCenter);
		if ('checkbox' in $$new_props) $$invalidate(18, checkbox = $$new_props.checkbox);
		if ('radio' in $$new_props) $$invalidate(19, radio = $$new_props.radio);
		if ('radioIcon' in $$new_props) $$invalidate(66, radioIcon = $$new_props.radioIcon);
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('indeterminate' in $$new_props) $$invalidate(67, indeterminate = $$new_props.indeterminate);
		if ('name' in $$new_props) $$invalidate(20, name = $$new_props.name);
		if ('value' in $$new_props) $$invalidate(21, value = $$new_props.value);
		if ('readonly' in $$new_props) $$invalidate(22, readonly = $$new_props.readonly);
		if ('required' in $$new_props) $$invalidate(23, required = $$new_props.required);
		if ('disabled' in $$new_props) $$invalidate(24, disabled = $$new_props.disabled);
		if ('virtualListIndex' in $$new_props) $$invalidate(25, virtualListIndex = $$new_props.virtualListIndex);
		if ('routeProps' in $$new_props) $$invalidate(26, routeProps = $$new_props.routeProps);
		if ('$$scope' in $$new_props) $$invalidate(84, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[1] & /*mediaList, mediaItem*/ 201326592 | $$self.$$.dirty[2] & /*ListContext*/ 128) {
			$$invalidate(27, isMedia = mediaList || mediaItem || ListContext.listIsMedia);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 65536 | $$self.$$.dirty[2] & /*ListContext*/ 128) {
			$$invalidate(46, isSortable = sortable === true || sortable === false
			? sortable
			: ListContext.listIsSortable);
		}

		if ($$self.$$.dirty[1] & /*sortableOpposite*/ 536870912 | $$self.$$.dirty[2] & /*ListContext*/ 128) {
			$$invalidate(45, isSortableOpposite = sortableOpposite || ListContext.listIsSortableOpposite);
		}

		if ($$self.$$.dirty[2] & /*ListContext*/ 128) {
			$$invalidate(44, isSimple = ListContext.listIsSimple);
		}

		$$invalidate(43, liClasses = classNames(
			className,
			{
				'item-divider': divider,
				'list-group-title': groupTitle,
				'media-item': isMedia,
				swipeout,
				'accordion-item': accordionItem,
				'accordion-item-opened': accordionItemOpened,
				disabled: disabled && !(radio || checkbox),
				'no-chevron': noChevron,
				'chevron-center': chevronCenter,
				'disallow-sorting': sortable === false
			},
			colorClasses($$props)
		));

		$$invalidate(42, contentClasses = classNames(
			className,
			'item-content',
			{
				'item-checkbox': checkbox,
				'item-radio': radio,
				'item-radio-icon-start': radio && radioIcon === 'start',
				'item-radio-icon-end': radio && radioIcon === 'end'
			},
			colorClasses($$props)
		));

		$$invalidate(41, linkClasses = classNames(
			{
				'item-link': true,
				'smart-select': smartSelect,
				'tab-link': tabLink || tabLink === '',
				'tab-link-active': tabLinkActive,
				'item-selected': selected
			},
			routerClasses($$props),
			actionsClasses($$props)
		));

		$$invalidate(40, linkAttrs = {
			href: link === true ? '' : link || href,
			target,
			'data-tab': isStringProp(tabLink) && tabLink || undefined,
			...routerAttrs($$props),
			...actionsAttrs($$props)
		});

		if ($$self.$$.dirty[0] & /*accordionItem*/ 131072 | $$self.$$.dirty[1] & /*link, href*/ 17825792 | $$self.$$.dirty[2] & /*smartSelect*/ 1) {
			$$invalidate(39, isLink = link || href || smartSelect || accordionItem);
		}

		if ($$self.$$.dirty[0] & /*media*/ 16) {
			/* eslint-disable no-undef */
			$$invalidate(38, hasMedia = typeof media !== 'undefined' || $$slots.media);
		}

		if ($$self.$$.dirty[0] & /*title*/ 4) {
			$$invalidate(37, hasTitle = typeof title !== 'undefined' || $$slots.title);
		}

		if ($$self.$$.dirty[0] & /*header*/ 64) {
			$$invalidate(36, hasHeader = typeof header !== 'undefined' || $$slots.header);
		}

		if ($$self.$$.dirty[0] & /*footer*/ 128) {
			$$invalidate(35, hasFooter = typeof footer !== 'undefined' || $$slots.footer);
		}

		if ($$self.$$.dirty[0] & /*subtitle*/ 32) {
			$$invalidate(34, hasSubtitle = typeof subtitle !== 'undefined' || $$slots.subtitle);
		}

		if ($$self.$$.dirty[0] & /*text*/ 8) {
			$$invalidate(33, hasText = typeof text !== 'undefined' || $$slots.text);
		}

		if ($$self.$$.dirty[0] & /*after, badge*/ 3072) {
			$$invalidate(32, hasAfter = typeof after !== 'undefined' || typeof badge !== 'undefined' || $$slots.after);
		}

		if ($$self.$$.dirty[1] & /*swipeoutOpened*/ 268435456) {
			watchSwipeoutOpened(swipeoutOpened);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		checked,
		lec,
		title,
		text,
		media,
		subtitle,
		header,
		footer,
		tooltip,
		tooltipTrigger,
		after,
		badge,
		badgeColor,
		divider,
		groupTitle,
		swipeout,
		sortable,
		accordionItem,
		checkbox,
		radio,
		name,
		value,
		readonly,
		required,
		disabled,
		virtualListIndex,
		routeProps,
		isMedia,
		el,
		linkEl,
		innerEl,
		inputEl,
		hasAfter,
		hasText,
		hasSubtitle,
		hasFooter,
		hasHeader,
		hasTitle,
		hasMedia,
		isLink,
		linkAttrs,
		linkClasses,
		contentClasses,
		liClasses,
		isSimple,
		isSortableOpposite,
		isSortable,
		onClick,
		onChange,
		$$restProps,
		className,
		link,
		tabLink,
		tabLinkActive,
		selected,
		href,
		target,
		mediaItem,
		mediaList,
		swipeoutOpened,
		sortableOpposite,
		accordionItemOpened,
		smartSelect,
		smartSelectParams,
		noChevron,
		chevronCenter,
		radioIcon,
		indeterminate,
		smartSelectInstance,
		ListContext,
		slots,
		li_binding,
		li_binding_1,
		div0_binding,
		a_binding,
		input_binding,
		div_binding,
		div0_binding_1,
		div0_binding_2,
		a_binding_1,
		input_binding_1,
		div_binding_1,
		div0_binding_3,
		li_binding_2,
		$$scope
	];
}

class List_item extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				lec: 1,
				class: 50,
				title: 2,
				text: 3,
				media: 4,
				subtitle: 5,
				header: 6,
				footer: 7,
				tooltip: 8,
				tooltipTrigger: 9,
				link: 51,
				tabLink: 52,
				tabLinkActive: 53,
				selected: 54,
				href: 55,
				target: 56,
				after: 10,
				badge: 11,
				badgeColor: 12,
				mediaItem: 57,
				mediaList: 58,
				divider: 13,
				groupTitle: 14,
				swipeout: 15,
				swipeoutOpened: 59,
				sortable: 16,
				sortableOpposite: 60,
				accordionItem: 17,
				accordionItemOpened: 61,
				smartSelect: 62,
				smartSelectParams: 63,
				noChevron: 64,
				chevronCenter: 65,
				checkbox: 18,
				radio: 19,
				radioIcon: 66,
				checked: 0,
				indeterminate: 67,
				name: 20,
				value: 21,
				readonly: 22,
				required: 23,
				disabled: 24,
				virtualListIndex: 25,
				routeProps: 26,
				smartSelectInstance: 68
			},
			null,
			[-1, -1, -1, -1]
		);
	}

	get smartSelectInstance() {
		return this.$$.ctx[68];
	}
}

export { List_item };
