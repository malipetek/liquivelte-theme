import { element, claim_element, children, detach, attr, src_url_equal, add_render_callback, toggle_class, insert_hydration, listen, noop, run_all, onMount, binding_callbacks, SvelteComponent, init, safe_not_equal, text, claim_text, append_hydration, set_data, create_slot, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, svg_element, space, claim_svg_element, claim_space, set_style, empty, create_component, claim_component, mount_component, destroy_component, globals, HtmlTagHydration, claim_html_tag, bind, add_flush_callback, group_outros, check_outros, destroy_each } from './liquivelte-svelte-hs6e88e89c.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs6dbc6cca.liquivelte.js';

var debounce, throttle;

debounce = function(func, wait, immediate) {
  var timeout;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    if (immediate && !timeout) func.apply(context, args);
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

throttle = function(func, wait) {
  var context, args, timeout, throttling, more, result;
  var whenDone = debounce(function(){ more = throttling = false; }, wait);
  return function() {
    context = this; args = arguments;
    var later = function() {
      timeout = null;
      if (more) func.apply(context, args);
      whenDone();
    };
    if (!timeout) timeout = setTimeout(later, wait);
    if (throttling) {
      more = true;
    } else {
      result = func.apply(context, args);
    }
    whenDone();
    throttling = true;
    return result;
  };
};

Function.prototype.debounce = function(wait, immediate) {
  return debounce(this, wait, immediate);
};

Function.prototype.throttle = function(wait) {
  return throttle(this, wait);
};

class AnimationFrame {
  constructor(cb) {
    this.requestId;
    this.cb = cb || (() => 1);
  }

  loop() {
    this.requestId = undefined;
    this.cb();
    this.start();
  }

  start() {
    if (!this.requestId) {
      this.requestId = window.requestAnimationFrame(this.loop.bind(this));
    }
  }

  stop() {
    if (this.requestId) {
      window.cancelAnimationFrame(this.requestId);
      this.requestId = undefined;
    }
  }
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/video.liquivelte generated by Svelte v3.50.0 */

function create_fragment$4(ctx) {
	let video_1;
	let video_1_data_src_value;
	let video_1_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			video_1 = element("video");
			this.h();
		},
		l(nodes) {
			video_1 = claim_element(nodes, "VIDEO", {
				style: true,
				class: true,
				preload: true,
				"data-src": true,
				src: true
			});

			children(video_1).forEach(detach);
			this.h();
		},
		h() {
			attr(video_1, "style", /*anim_style*/ ctx[0]);
			attr(video_1, "class", "video svelte-a81z6j");
			attr(video_1, "preload", "metadata");
			attr(video_1, "data-src", video_1_data_src_value = /*liquid*/ ctx[6].file_url(/*block*/ ctx[1].settings.source));
			if (!src_url_equal(video_1.src, video_1_src_value = /*blob_src*/ ctx[3])) attr(video_1, "src", video_1_src_value);
			video_1.playsInline = true;
			video_1.muted = true;
			if (/*duration*/ ctx[4] === void 0) add_render_callback(() => /*video_1_durationchange_handler*/ ctx[12].call(video_1));
			toggle_class(video_1, "bg-video", /*block*/ ctx[1].settings.is_bg);
		},
		m(target, anchor) {
			insert_hydration(target, video_1, anchor);
			/*video_1_binding*/ ctx[11](video_1);

			if (!mounted) {
				dispose = [
					listen(video_1, "durationchange", /*video_1_durationchange_handler*/ ctx[12]),
					listen(video_1, "seeked", /*seeked_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*anim_style*/ 1) {
				attr(video_1, "style", /*anim_style*/ ctx[0]);
			}

			if (dirty & /*block*/ 2 && video_1_data_src_value !== (video_1_data_src_value = /*liquid*/ ctx[6].file_url(/*block*/ ctx[1].settings.source))) {
				attr(video_1, "data-src", video_1_data_src_value);
			}

			if (dirty & /*blob_src*/ 8 && !src_url_equal(video_1.src, video_1_src_value = /*blob_src*/ ctx[3])) {
				attr(video_1, "src", video_1_src_value);
			}

			if (dirty & /*block*/ 2) {
				toggle_class(video_1, "bg-video", /*block*/ ctx[1].settings.is_bg);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video_1);
			/*video_1_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

let index$4 = 0;
const progressDelta = .7;
const seekCb = 1;

function instance$4($$self, $$props, $$invalidate) {
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	let { keptFor } = $$props;
	let { keepFor } = $$props;
	let { scrollY } = $$props;
	let { anim_style } = $$props;
	let { block = {} } = $$props;
	console.log('block ', block);
	let video, blob_src, duration;
	let seeked = true;
	let lastProgress = 0;

	onMount(() => {
		function lerp(x, y, t) {
			return (1 - t) * x + t * y;
		}

		const animation = new AnimationFrame(() => {
				if (!seeked || !duration) return;
				$$invalidate(5, seeked = false);

				// progressPercent = ((scrollY + window.innerHeight) - container.offsetTop) / (container.clientHeight + window.innerHeight) * 100,
				// progressPercent = progressPercent > 0 ? progressPercent : 0;
				let scrollProgress = keptFor / keepFor;

				// const scrollProgress = progressPercent;
				// Round to 2 decimal places
				const progress = Math.round(// Smoothly approach scroll progress instead of instantly
				lerp(lastProgress, scrollProgress, progressDelta) * 100) / 100;

				$$invalidate(2, video.currentTime = duration * progress, video);
				lastProgress = progress;
			});

		animation.start();

		return () => {
			animation.stop();
		};
	});

	function video_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			video = $$value;
			$$invalidate(2, video);
		});
	}

	function video_1_durationchange_handler() {
		duration = this.duration;
		$$invalidate(4, duration);
	}

	const seeked_handler = () => $$invalidate(5, seeked = true);

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(7, lec = $$props.lec);
		if ('keptFor' in $$props) $$invalidate(8, keptFor = $$props.keptFor);
		if ('keepFor' in $$props) $$invalidate(9, keepFor = $$props.keepFor);
		if ('scrollY' in $$props) $$invalidate(10, scrollY = $$props.scrollY);
		if ('anim_style' in $$props) $$invalidate(0, anim_style = $$props.anim_style);
		if ('block' in $$props) $$invalidate(1, block = $$props.block);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*video, blob_src*/ 12) {
			$: if (video && !blob_src) {
				const src = video.getAttribute('data-src');

				fetch(src).then(res => res.blob()).then(blob => {
					$$invalidate(3, blob_src = URL.createObjectURL(blob));
				});
			}
		}
	};

	return [
		anim_style,
		block,
		video,
		blob_src,
		duration,
		seeked,
		liquid,
		lec,
		keptFor,
		keepFor,
		scrollY,
		video_1_binding,
		video_1_durationchange_handler,
		seeked_handler
	];
}

class Video extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			lec: 7,
			keptFor: 8,
			keepFor: 9,
			scrollY: 10,
			anim_style: 0,
			block: 1
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/title.liquivelte generated by Svelte v3.50.0 */

function create_fragment$3(ctx) {
	let div;
	let t_value = /*block*/ ctx[5].settings.content + "";
	let t;
	let div_style_value;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", " svelte-e2nbez");
			attr(div, "style", div_style_value = "top:" + /*title_top*/ ctx[1] + "%; left:" + /*left*/ ctx[0] + "%; font-size: " + /*font_size*/ ctx[2] + "em; " + /*anim_style*/ ctx[4] + "; font-weight: " + /*bold*/ ctx[3]);
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*block*/ 32 && t_value !== (t_value = /*block*/ ctx[5].settings.content + "")) set_data(t, t_value);

			if (dirty & /*title_top, left, font_size, anim_style, bold*/ 31 && div_style_value !== (div_style_value = "top:" + /*title_top*/ ctx[1] + "%; left:" + /*left*/ ctx[0] + "%; font-size: " + /*font_size*/ ctx[2] + "em; " + /*anim_style*/ ctx[4] + "; font-weight: " + /*bold*/ ctx[3])) {
				attr(div, "style", div_style_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

let index$3 = 0;

function instance$3($$self, $$props, $$invalidate) {
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	let block = {};
	let { block$settings } = $$props;
	block.settings = block$settings;
	let { left } = $$props;
	let { title_top } = $$props;
	let { font_size } = $$props;
	let { color } = $$props;
	let { bold } = $$props;
	let { anim_style } = $$props;

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(6, lec = $$props.lec);
		if ('block$settings' in $$props) $$invalidate(7, block$settings = $$props.block$settings);
		if ('left' in $$props) $$invalidate(0, left = $$props.left);
		if ('title_top' in $$props) $$invalidate(1, title_top = $$props.title_top);
		if ('font_size' in $$props) $$invalidate(2, font_size = $$props.font_size);
		if ('color' in $$props) $$invalidate(8, color = $$props.color);
		if ('bold' in $$props) $$invalidate(3, bold = $$props.bold);
		if ('anim_style' in $$props) $$invalidate(4, anim_style = $$props.anim_style);
	};

	return [
		left,
		title_top,
		font_size,
		bold,
		anim_style,
		block,
		lec,
		block$settings,
		color
	];
}

class Title extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			lec: 6,
			block$settings: 7,
			left: 0,
			title_top: 1,
			font_size: 2,
			color: 8,
			bold: 3,
			anim_style: 4
		});
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/positionable.liquivelte generated by Svelte v3.50.0 */

function create_fragment$2(ctx) {
	let div;
	let div_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", " svelte-1866dou");
			attr(div, "style", div_style_value = "top: " + /*block*/ ctx[0].settings.top + "%; left: " + /*block*/ ctx[0].settings.left + "%; " + /*anim_style*/ ctx[1] + ";");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*block, anim_style*/ 3 && div_style_value !== (div_style_value = "top: " + /*block*/ ctx[0].settings.top + "%; left: " + /*block*/ ctx[0].settings.left + "%; " + /*anim_style*/ ctx[1] + ";")) {
				attr(div, "style", div_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

let index$2 = 0;

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	let { block } = $$props;
	let { anim_style } = $$props;

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(2, lec = $$props.lec);
		if ('block' in $$props) $$invalidate(0, block = $$props.block);
		if ('anim_style' in $$props) $$invalidate(1, anim_style = $$props.anim_style);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [block, anim_style, lec, $$scope, slots];
}

class Positionable extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { lec: 2, block: 0, anim_style: 1 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/blocks/shape.liquivelte generated by Svelte v3.50.0 */

function create_if_block_2$1(ctx) {
	let div;
	let svg;
	let path;
	let t0;
	let p;
	let t1_value = /*liquid*/ ctx[3].default(/*block*/ ctx[1].settings.content, '') + "";
	let t1;

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);

			svg = claim_svg_element(div_nodes, "svg", {
				version: true,
				xmlns: true,
				"xmlns:xlink": true,
				x: true,
				y: true,
				viewBox: true,
				style: true,
				"xml:space": true
			});

			var svg_nodes = children(svg);
			path = claim_svg_element(svg_nodes, "path", { d: true });
			children(path).forEach(detach);
			svg_nodes.forEach(detach);
			t0 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "d", "M55.818,21.578c-0.118-0.362-0.431-0.626-0.808-0.681L36.92,18.268L28.83,1.876c-0.168-0.342-0.516-0.558-0.896-0.558\n      s-0.729,0.216-0.896,0.558l-8.091,16.393l-18.09,2.629c-0.377,0.055-0.689,0.318-0.808,0.681c-0.117,0.361-0.02,0.759,0.253,1.024\n      l13.091,12.76l-3.091,18.018c-0.064,0.375,0.09,0.754,0.397,0.978c0.309,0.226,0.718,0.255,1.053,0.076l16.182-8.506l16.18,8.506\n      c0.146,0.077,0.307,0.115,0.466,0.115c0.207,0,0.413-0.064,0.588-0.191c0.308-0.224,0.462-0.603,0.397-0.978l-3.09-18.017\n      l13.091-12.761C55.838,22.336,55.936,21.939,55.818,21.578z");
			attr(svg, "version", "1.1");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr(svg, "x", "0px");
			attr(svg, "y", "0px");
			attr(svg, "viewBox", "0 0 55.867 55.867");
			set_style(svg, "enable-background", "new 0 0 55.867 55.867");
			set_style(svg, "fill", "currentColor");
			attr(svg, "xml:space", "preserve");
			attr(p, "class", "text-base");
			attr(div, "class", "relative");
			set_style(div, "width", "100px");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, svg);
			append_hydration(svg, path);
			append_hydration(div, t0);
			append_hydration(div, p);
			append_hydration(p, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 2 && t1_value !== (t1_value = /*liquid*/ ctx[3].default(/*block*/ ctx[1].settings.content, '') + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (20:47) 
function create_if_block_1$1(ctx) {
	let div;
	let t_value = /*block*/ ctx[1].settings.content + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "circle");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 2 && t_value !== (t_value = /*block*/ ctx[1].settings.content + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (16:2) {#if block.settings.shape == 'square' }
function create_if_block$1(ctx) {
	let div;
	let t_value = /*block*/ ctx[1].settings.content + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "square text-red-50");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);
			append_hydration(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*block*/ 2 && t_value !== (t_value = /*block*/ ctx[1].settings.content + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (15:0) <Positionable  block="{ block }" anim_style="{ anim_style }"      lec={lec} >
function create_default_slot(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*block*/ ctx[1].settings.shape == 'square') return create_if_block$1;
		if (/*block*/ ctx[1].settings.shape == 'circle') return create_if_block_1$1;
		if (/*block*/ ctx[1].settings.shape == 'star') return create_if_block_2$1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1(ctx) {
	let positionable;
	let current;

	positionable = new Positionable({
			props: {
				block: /*block*/ ctx[1],
				anim_style: /*anim_style*/ ctx[2],
				lec: /*lec*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(positionable.$$.fragment);
		},
		l(nodes) {
			claim_component(positionable.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(positionable, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const positionable_changes = {};
			if (dirty & /*block*/ 2) positionable_changes.block = /*block*/ ctx[1];
			if (dirty & /*anim_style*/ 4) positionable_changes.anim_style = /*anim_style*/ ctx[2];
			if (dirty & /*lec*/ 1) positionable_changes.lec = /*lec*/ ctx[0];

			if (dirty & /*$$scope, block*/ 18) {
				positionable_changes.$$scope = { dirty, ctx };
			}

			positionable.$set(positionable_changes);
		},
		i(local) {
			if (current) return;
			transition_in(positionable.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(positionable.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(positionable, detaching);
		}
	};
}

let index$1 = 0;

function instance$1($$self, $$props, $$invalidate) {
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	let { block = {} } = $$props;
	let { anim_style } = $$props;

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(0, lec = $$props.lec);
		if ('block' in $$props) $$invalidate(1, block = $$props.block);
		if ('anim_style' in $$props) $$invalidate(2, anim_style = $$props.anim_style);
	};

	return [lec, block, anim_style, liquid];
}

class Shape extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { lec: 0, block: 1, anim_style: 2 });
	}
}

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/sections/scroll-animation/index.liquivelte generated by Svelte v3.50.0 */

const { window: window_1 } = globals;

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[38] = list[i];
	child_ctx[41] = i;

	const constants_0 = {
		first: /*index*/ child_ctx[41] === 0,
		index: /*index*/ child_ctx[41] + 1,
		index0: /*index*/ child_ctx[41],
		last: /*index*/ child_ctx[41] === /*section*/ child_ctx[13].blocks.length - 1,
		rindex: /*section*/ child_ctx[13].blocks.length - /*index*/ child_ctx[41],
		rindex0: /*section*/ child_ctx[13].blocks.length - /*index*/ child_ctx[41] - 1,
		length: /*section*/ child_ctx[13].blocks.length
	};

	child_ctx[39] = constants_0;
	return child_ctx;
}

// (134:8) {#if block.type == 'title' }
function create_if_block_4(ctx) {
	let title;
	let current;

	title = new Title({
			props: {
				anim_style: /*block*/ ctx[38].settings.anim_style,
				left: /*left*/ ctx[6],
				title_top: /*title_top*/ ctx[5],
				font_size: /*font_size*/ ctx[4],
				color: /*color*/ ctx[3],
				bold: /*bold*/ ctx[2],
				animations: /*animations*/ ctx[8],
				block$settings: /*block$settings*/ ctx[1],
				section$blocks: /*section$blocks*/ ctx[7],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(title.$$.fragment);
		},
		l(nodes) {
			claim_component(title.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(title, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const title_changes = {};
			if (dirty[0] & /*section*/ 8192) title_changes.anim_style = /*block*/ ctx[38].settings.anim_style;
			if (dirty[0] & /*left*/ 64) title_changes.left = /*left*/ ctx[6];
			if (dirty[0] & /*title_top*/ 32) title_changes.title_top = /*title_top*/ ctx[5];
			if (dirty[0] & /*font_size*/ 16) title_changes.font_size = /*font_size*/ ctx[4];
			if (dirty[0] & /*color*/ 8) title_changes.color = /*color*/ ctx[3];
			if (dirty[0] & /*bold*/ 4) title_changes.bold = /*bold*/ ctx[2];
			if (dirty[0] & /*animations*/ 256) title_changes.animations = /*animations*/ ctx[8];
			if (dirty[0] & /*block$settings*/ 2) title_changes.block$settings = /*block$settings*/ ctx[1];
			if (dirty[0] & /*section$blocks*/ 128) title_changes.section$blocks = /*section$blocks*/ ctx[7];
			if (dirty[0] & /*lec*/ 1) title_changes.lec = /*lec*/ ctx[0];
			title.$set(title_changes);
		},
		i(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(title.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(title, detaching);
		}
	};
}

// (138:8) {#if block.type == 'image' }
function create_if_block_3(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { loading: true, src: true, class: true });
			this.h();
		},
		h() {
			attr(img, "loading", "lazy");
			if (!src_url_equal(img.src, img_src_value = /*block*/ ctx[38].settings.image)) attr(img, "src", img_src_value);
			attr(img, "class", "svelte-strz53");
		},
		m(target, anchor) {
			insert_hydration(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*section*/ 8192 && !src_url_equal(img.src, img_src_value = /*block*/ ctx[38].settings.image)) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (142:8) {#if block.type == 'text' }
function create_if_block_2(ctx) {
	let html_tag;
	let raw_value = (/*block*/ ctx[38].settings.content || '') + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTagHydration(false);
			html_anchor = empty();
			this.h();
		},
		l(nodes) {
			html_tag = claim_html_tag(nodes, false);
			html_anchor = empty();
			this.h();
		},
		h() {
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_hydration(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*section*/ 8192 && raw_value !== (raw_value = (/*block*/ ctx[38].settings.content || '') + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (146:8) {#if block.type == 'video' }
function create_if_block_1(ctx) {
	let scrollvideo;
	let updating_keptFor;
	let current;

	function scrollvideo_keptFor_binding(value) {
		/*scrollvideo_keptFor_binding*/ ctx[24](value);
	}

	let scrollvideo_props = {
		block: /*block*/ ctx[38],
		keepFor,
		anim_style: /*block*/ ctx[38].settings.anim_style,
		left: /*left*/ ctx[6],
		title_top: /*title_top*/ ctx[5],
		font_size: /*font_size*/ ctx[4],
		color: /*color*/ ctx[3],
		bold: /*bold*/ ctx[2],
		animations: /*animations*/ ctx[8],
		block$settings: /*block$settings*/ ctx[1],
		section$blocks: /*section$blocks*/ ctx[7],
		lec: /*lec*/ ctx[0]
	};

	if (/*keptFor*/ ctx[12] !== void 0) {
		scrollvideo_props.keptFor = /*keptFor*/ ctx[12];
	}

	scrollvideo = new Video({ props: scrollvideo_props });
	binding_callbacks.push(() => bind(scrollvideo, 'keptFor', scrollvideo_keptFor_binding));

	return {
		c() {
			create_component(scrollvideo.$$.fragment);
		},
		l(nodes) {
			claim_component(scrollvideo.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(scrollvideo, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const scrollvideo_changes = {};
			if (dirty[0] & /*section*/ 8192) scrollvideo_changes.block = /*block*/ ctx[38];
			if (dirty[0] & /*section*/ 8192) scrollvideo_changes.anim_style = /*block*/ ctx[38].settings.anim_style;
			if (dirty[0] & /*left*/ 64) scrollvideo_changes.left = /*left*/ ctx[6];
			if (dirty[0] & /*title_top*/ 32) scrollvideo_changes.title_top = /*title_top*/ ctx[5];
			if (dirty[0] & /*font_size*/ 16) scrollvideo_changes.font_size = /*font_size*/ ctx[4];
			if (dirty[0] & /*color*/ 8) scrollvideo_changes.color = /*color*/ ctx[3];
			if (dirty[0] & /*bold*/ 4) scrollvideo_changes.bold = /*bold*/ ctx[2];
			if (dirty[0] & /*animations*/ 256) scrollvideo_changes.animations = /*animations*/ ctx[8];
			if (dirty[0] & /*block$settings*/ 2) scrollvideo_changes.block$settings = /*block$settings*/ ctx[1];
			if (dirty[0] & /*section$blocks*/ 128) scrollvideo_changes.section$blocks = /*section$blocks*/ ctx[7];
			if (dirty[0] & /*lec*/ 1) scrollvideo_changes.lec = /*lec*/ ctx[0];

			if (!updating_keptFor && dirty[0] & /*keptFor*/ 4096) {
				updating_keptFor = true;
				scrollvideo_changes.keptFor = /*keptFor*/ ctx[12];
				add_flush_callback(() => updating_keptFor = false);
			}

			scrollvideo.$set(scrollvideo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(scrollvideo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(scrollvideo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(scrollvideo, detaching);
		}
	};
}

// (150:8) {#if block.type == 'shape' }
function create_if_block(ctx) {
	let shape;
	let current;

	shape = new Shape({
			props: {
				block: /*block*/ ctx[38],
				anim_style: /*block*/ ctx[38].settings.anim_style,
				left: /*left*/ ctx[6],
				title_top: /*title_top*/ ctx[5],
				font_size: /*font_size*/ ctx[4],
				color: /*color*/ ctx[3],
				bold: /*bold*/ ctx[2],
				animations: /*animations*/ ctx[8],
				block$settings: /*block$settings*/ ctx[1],
				section$blocks: /*section$blocks*/ ctx[7],
				lec: /*lec*/ ctx[0]
			}
		});

	return {
		c() {
			create_component(shape.$$.fragment);
		},
		l(nodes) {
			claim_component(shape.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(shape, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const shape_changes = {};
			if (dirty[0] & /*section*/ 8192) shape_changes.block = /*block*/ ctx[38];
			if (dirty[0] & /*section*/ 8192) shape_changes.anim_style = /*block*/ ctx[38].settings.anim_style;
			if (dirty[0] & /*left*/ 64) shape_changes.left = /*left*/ ctx[6];
			if (dirty[0] & /*title_top*/ 32) shape_changes.title_top = /*title_top*/ ctx[5];
			if (dirty[0] & /*font_size*/ 16) shape_changes.font_size = /*font_size*/ ctx[4];
			if (dirty[0] & /*color*/ 8) shape_changes.color = /*color*/ ctx[3];
			if (dirty[0] & /*bold*/ 4) shape_changes.bold = /*bold*/ ctx[2];
			if (dirty[0] & /*animations*/ 256) shape_changes.animations = /*animations*/ ctx[8];
			if (dirty[0] & /*block$settings*/ 2) shape_changes.block$settings = /*block$settings*/ ctx[1];
			if (dirty[0] & /*section$blocks*/ 128) shape_changes.section$blocks = /*section$blocks*/ ctx[7];
			if (dirty[0] & /*lec*/ 1) shape_changes.lec = /*lec*/ ctx[0];
			shape.$set(shape_changes);
		},
		i(local) {
			if (current) return;
			transition_in(shape.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(shape.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(shape, detaching);
		}
	};
}

// (123:6) {#each  section.blocks as block, index  }
function create_each_block(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let if_block4_anchor;
	let current;
	let if_block0 = /*block*/ ctx[38].type == 'title' && create_if_block_4(ctx);
	let if_block1 = /*block*/ ctx[38].type == 'image' && create_if_block_3(ctx);
	let if_block2 = /*block*/ ctx[38].type == 'text' && create_if_block_2(ctx);
	let if_block3 = /*block*/ ctx[38].type == 'video' && create_if_block_1(ctx);
	let if_block4 = /*block*/ ctx[38].type == 'shape' && create_if_block(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
		},
		l(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			if_block4_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_hydration(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_hydration(target, if_block4_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*block*/ ctx[38].type == 'title') {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*section*/ 8192) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*block*/ ctx[38].type == 'image') {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*block*/ ctx[38].type == 'text') {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*block*/ ctx[38].type == 'video') {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*section*/ 8192) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*block*/ ctx[38].type == 'shape') {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*section*/ 8192) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(if_block4_anchor);
		}
	};
}

function create_fragment(ctx) {
	let scrolling = false;

	let clear_scrolling = () => {
		scrolling = false;
	};

	let scrolling_timeout;
	let div3;
	let div1;
	let div0;
	let t0;
	let div2;
	let t1;
	let div3_style_value;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowscroll*/ ctx[23]);
	let each_value = /*section*/ ctx[13].blocks;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div2 = element("div");
			t1 = text(" ");
			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true, style: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true, style: true });
			var div2_nodes = children(div2);
			t1 = claim_text(div2_nodes, " ");
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "animation-stage svelte-strz53");
			attr(div1, "class", "stage-container svelte-strz53");
			attr(div2, "class", "stage-placeholder");
			set_style(div2, "height", /*stageHeight*/ ctx[14] + keepFor + "px");
			attr(div3, "class", "animation-container svelte-strz53");
			attr(div3, "style", div3_style_value = "--explode-gap: 1em; --explode-size-imbalance: 0%; --image-oversize: 1; " + /*animationVariables*/ ctx[15].join(';') + "; " + /*widthVariables*/ ctx[17].join(';') + "; " + /*heightVariables*/ ctx[16].join(';'));
		},
		m(target, anchor) {
			insert_hydration(target, div3, anchor);
			append_hydration(div3, div1);
			append_hydration(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			/*div0_binding*/ ctx[25](div0);
			append_hydration(div3, t0);
			append_hydration(div3, div2);
			append_hydration(div2, t1);
			/*div3_binding*/ ctx[26](div3);
			current = true;

			if (!mounted) {
				dispose = listen(window_1, "scroll", () => {
					scrolling = true;
					clearTimeout(scrolling_timeout);
					scrolling_timeout = setTimeout(clear_scrolling, 100);
					/*onwindowscroll*/ ctx[23]();
				});

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*scrollY*/ 2048 && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window_1.pageXOffset, /*scrollY*/ ctx[11]);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (dirty[0] & /*section, left, title_top, font_size, color, bold, animations, block$settings, section$blocks, lec, keptFor*/ 12799) {
				each_value = /*section*/ ctx[13].blocks;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty[0] & /*stageHeight*/ 16384) {
				set_style(div2, "height", /*stageHeight*/ ctx[14] + keepFor + "px");
			}

			if (!current || dirty[0] & /*animationVariables, widthVariables, heightVariables*/ 229376 && div3_style_value !== (div3_style_value = "--explode-gap: 1em; --explode-size-imbalance: 0%; --image-oversize: 1; " + /*animationVariables*/ ctx[15].join(';') + "; " + /*widthVariables*/ ctx[17].join(';') + "; " + /*heightVariables*/ ctx[16].join(';'))) {
				attr(div3, "style", div3_style_value);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
			/*div0_binding*/ ctx[25](null);
			/*div3_binding*/ ctx[26](null);
			mounted = false;
			dispose();
		}
	};
}

let index = 0;
let keepFor = 5000;
let seeked = true;

function instance($$self, $$props, $$invalidate) {
	let widthVariables;
	let heightVariables;
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	let { block$settings } = $$props;
	let { bold } = $$props;
	let { color } = $$props;
	let { font_size } = $$props;
	let { title_top } = $$props;
	let { left } = $$props;
	const section = {};
	let { section$blocks } = $$props;
	section.blocks = section$blocks;
	let { animations } = $$props;
	console.log('section blocks 1', animations, section.blocks);

	section.blocks = section.blocks.map(block => ({
		...block,
		settings: {
			...block.settings,
			anim_style: animations.filter(anim => anim.target == block.settings.id).reduce((c, anim) => `${c}${anim.anim_style}`, '')
		}
	}));

	console.log('section blocks 2', animations, section.blocks);
	let container, stage;
	let scrollY = 0;
	let top = 0;
	let height = 0;
	let isEntered = 0;
	let isTopped = 0;
	let isFixed = 0;
	let cachedHeight = 0;
	let keptFor = 0;
	let topOffset = 0;
	let progressPercent = 0;
	let enteredAmount = 0;
	let stageHeight = 0;
	let progress = 0;
	let video, duration, time;
	const itemWidths = [];
	const itemHeights = [];
	let animationVariables = [];

	function onwindowscroll() {
		$$invalidate(11, scrollY = window_1.pageYOffset);
	}

	function scrollvideo_keptFor_binding(value) {
		keptFor = value;
		(((((($$invalidate(12, keptFor), $$invalidate(9, container)), $$invalidate(10, stage)), $$invalidate(11, scrollY)), $$invalidate(19, isTopped)), $$invalidate(20, cachedHeight)), $$invalidate(21, progressPercent));
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			stage = $$value;
			$$invalidate(10, stage);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(9, container);
		});
	}

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(0, lec = $$props.lec);
		if ('block$settings' in $$props) $$invalidate(1, block$settings = $$props.block$settings);
		if ('bold' in $$props) $$invalidate(2, bold = $$props.bold);
		if ('color' in $$props) $$invalidate(3, color = $$props.color);
		if ('font_size' in $$props) $$invalidate(4, font_size = $$props.font_size);
		if ('title_top' in $$props) $$invalidate(5, title_top = $$props.title_top);
		if ('left' in $$props) $$invalidate(6, left = $$props.left);
		if ('section$blocks' in $$props) $$invalidate(7, section$blocks = $$props.section$blocks);
		if ('animations' in $$props) $$invalidate(8, animations = $$props.animations);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*container, stage, scrollY, isTopped, keptFor, cachedHeight, progressPercent*/ 3677696) {
			// [
			//   {
			//     from: 52,
			//     to: 77,
			//     valueFrom: 1,
			//     valueTo: 10,
			//     variable: '--explode-gap',
			//     unit: 'em'
			//   },
			//   {
			//     from: 33,
			//     to: 66,
			//     valueFrom: 0,
			//     valueTo: 20,
			//     variable: '--explode-size-imbalance',
			//     unit: '%'
			//   },
			//   {
			//     from: 66,
			//     to: 100,
			//     valueFrom: 1,
			//     valueTo: 2,
			//     variable: '--image-oversize'
			//   }
			// ];
			$: if (container && stage) {
				(top = container.offsetTop, $$invalidate(18, height = container.clientHeight), isEntered = container.offsetTop < scrollY + window.innerHeight, enteredAmount = container.offsetTop - (scrollY + window.innerHeight), $$invalidate(19, isTopped = container.offsetTop - scrollY < 0), isFixed = isTopped && keptFor < keepFor, $$invalidate(20, cachedHeight = isTopped ? cachedHeight : container.clientHeight), $$invalidate(12, keptFor = Math.abs(container.offsetTop - scrollY)), topOffset = container.offsetTop - scrollY < 0 && keepFor > keptFor
				? keptFor
				: isTopped ? keepFor : 0, $$invalidate(21, progressPercent = (scrollY + window.innerHeight - container.offsetTop) / (container.clientHeight + window.innerHeight) * 100), $$invalidate(21, progressPercent = progressPercent > 0 ? progressPercent : 0));

				$$invalidate(22, progress = progressPercent);
				$$invalidate(14, stageHeight = stage.clientHeight);
			}
		}

		if ($$self.$$.dirty[0] & /*container, scrollY*/ 2560) {
			// $: if(scrollY && container && seeked) {
			//   seeked = false;
			//   top = container.offsetTop; 
			//   height = container.clientHeight;
			//   // time = duration * keptFor / keepFor;
			// }
			$: if (container) {
				$$invalidate(12, keptFor = container.offsetTop < scrollY
				? -1 * (container.offsetTop - scrollY)
				: 0);
			} // console.log('keptFor index ', keptFor);
		}

		if ($$self.$$.dirty[0] & /*animations, progress*/ 4194560) {
			$: $$invalidate(15, animationVariables = animations.map(animation => {
				let animationProgress = (progress - animation.from) / (animation.to - animation.from);
				let value = animation.valueFrom + (animation.valueTo - animation.valueFrom) * animationProgress;

				value = value < animation.valueFrom
				? animation.valueFrom
				: value > animation.valueTo
					? animation.valueTo
					: Math.round(value * 1e6) / 1e6;

				return `${animation.variable}:${value}${animation.unit || ''}`;
			}));
		}
	};

	$: $$invalidate(17, widthVariables = itemWidths.map((width, index) => `--item-${index}-width: ${width}px`));
	$: $$invalidate(16, heightVariables = itemHeights.map((height, index) => `--item-${index}-height: ${height}px`));

	return [
		lec,
		block$settings,
		bold,
		color,
		font_size,
		title_top,
		left,
		section$blocks,
		animations,
		container,
		stage,
		scrollY,
		keptFor,
		section,
		stageHeight,
		animationVariables,
		heightVariables,
		widthVariables,
		height,
		isTopped,
		cachedHeight,
		progressPercent,
		progress,
		onwindowscroll,
		scrollvideo_keptFor_binding,
		div0_binding,
		div3_binding
	];
}

class Scroll_animation extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				lec: 0,
				block$settings: 1,
				bold: 2,
				color: 3,
				font_size: 4,
				title_top: 5,
				left: 6,
				section$blocks: 7,
				animations: 8
			},
			null,
			[-1, -1]
		);
	}
}

export { Scroll_animation as default };
