	{%- liquid
			
			
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'index'
						assign slot_default_index = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component slider-general svelte-bchtdm" data-liquivelte-component-name="slider-general">
	{%- endunless -%}
	

<div  class="relative svelte-bchtdm" bind:this="{container}">
  {% if section.settings.flush_with_header %}
    <div  class="flush-shadow svelte-bchtdm"></div>
  {% endif %}
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_Swiper %}freemode-kvsp-{ { enabled: true, sticky: true } }-prsp-mousewheel-kvsp-{ { forceToAxis: true, sensitivity: 1.5 } }-prsp-modules-kvsp-{[FreeMode, Mousewheel]}{% endcapture %}

{%- capture slot_content_def_Swiper -%}
    {% for block in section.blocks %}
    {% assign index = forloop.index0 %}
    {% if block.type == 'image' %}
        
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_SwiperSlide %}{% endcapture %}

{%- capture slot_content_def_SwiperSlide -%}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_SliderImage %}block-kvsp-{{ block }}{% endcapture %}
{% assign modulename = basename | append: 'slider-image' %}
{% include modulename, liquivelte: true, props: props_SliderImage, sub_include: true, basename: '' %}
{% assign props = '' %}
        {%- endcapture -%}
{% assign slot_content_SwiperSlide = slot_content_SwiperSlide | append: '-scs-' | append: 'framework7-liquivelte-swiper-slide' | append: '-scvs-' | append: slot_content_def_SwiperSlide %}
{% assign modulename = basename | append: 'framework7-liquivelte-swiper-slide' %}
{% include modulename, liquivelte: true, props: props_SwiperSlide, sub_include: true, slot_contents: slot_content_SwiperSlide, basename: 'framework7-liquivelte-' %}
{% assign slot_content_SwiperSlide = '' %}
{% assign props = '' %}
        {% endif %}
    {% endfor %} 
  {%- endcapture -%}
{% assign slot_content_Swiper = slot_content_Swiper | append: '-scs-' | append: 'framework7-liquivelte-swiper' | append: '-scvs-' | append: slot_content_def_Swiper %}
{% assign modulename = basename | append: 'framework7-liquivelte-swiper' %}
{% include modulename, liquivelte: true, props: props_Swiper, sub_include: true, slot_contents: slot_content_Swiper, basename: 'framework7-liquivelte-' %}
{% assign slot_content_Swiper = '' %}
{% assign props = '' %}
</div>


    {% include 'flush-header'  %}
    {%- capture rawinclude -%}{% include 'flush-header'  %}{%- endcapture -%}
  <script liquivelte-keep liquivelte-eval>
  window.liquivelte_rawincludes = window.liquivelte_rawincludes || {};
  window.liquivelte_rawincludes['rawinclude_673107d4'] = [...(window.liquivelte_rawincludes['rawinclude_673107d4'] || []),`{{ rawinclude | escape | strip_newlines }}`];
  if(document.currentScript){
    document.currentScript.remove();
  }</script>
  {%- assign rawinclude = '' -%}



{% schema %}{
  "name": "Slider General",
  "tag": "section",
  "class": "product-section spaced-section",
  "settings": [
    {
      "type": "header",
      "content": "Swiper"
    },
    {
      "id": "flush_with_header",
      "type": "checkbox",
      "label": "Flush to top",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "shadow_at_top",
      "label": "Shadow at top to ensure text visibility",
      "default": false
    }
  ],
  "blocks": [
    {
      "name": "Slider Image",
      "type": "image",
      "settings": [
        {
          "type": "header",
          "content": "Swiper"
        },
        {
          "id": "image",
          "type": "image_picker",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Slider General",
      "category": "Gallery"
    }
  ]
}{% endschema %}
	
						
	{% liquid
  assign section_blocks_json = '['
  for block in section.blocks

    assign block_json = '{'
    assign block_json = block_json | append: '"type": "' | append: block.type | append: '",'
    assign block_json = block_json | append: '"settings": {'
    for setting in block.settings
      assign setting_key_with_quotes = setting | json
      assign block_json = block_json | append: setting_key_with_quotes | append: ":"

      if block.settings[setting].aspect_ratio
        assign block_json = block_json | append: '{'
        assign block_json = block_json | append: '"width": ' | append: block.settings[setting].width | append: ','
        assign block_json = block_json | append: '"aspect_ratio": ' | append: block.settings[setting].aspect_ratio | append: ','
        assign src_with_quotes = block.settings[setting].src | json
        assign block_json = block_json | append: '"src": ' | append: src_with_quotes
        assign block_json = block_json | append: '}'

      else
        assign value_with_quotes = block.settings[setting] | json
        assign block_json = block_json | append: value_with_quotes
      endif

      unless forloop.last
        assign block_json = block_json | append: ','
      endunless
    endfor

    assign block_json = block_json | append: '}}'

    
    assign section_blocks_json = section_blocks_json | append: block_json
    
    unless forloop.last
      assign section_blocks_json = section_blocks_json | append: ','
    endunless
  endfor
  assign section_blocks_json = section_blocks_json | append: ']'
%}					
	<script type="text/noscript"  class="instance-data svelte-bchtdm">{
	
	
	"section∆í∆ísettings": {{ section.settings | json }} , "section∆í∆íblocks": {{ section_blocks_json }}
	}</script>
	
	<script  class="liquivelte-prop-script svelte-bchtdm">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"üëÜ\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	
	try{
	wrapper.svelteProps["rawinclude_673107d4"] = [...(wrapper.svelteProps["rawinclude_673107d4"] || []), ...window.liquivelte_rawincludes['rawinclude_673107d4'].map(e => htmlDecode(e)) ];
	} catch (e) {
	const err = 'Could not grab liquid include, because it is not present in the liquid context please check for rawinclude_673107d4 in the slider-general.liquid file.';
	console.error(err);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}

	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('¬ß');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			-%}
	{%- liquid 
			assign slot_default_index = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	