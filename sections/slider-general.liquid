	{%- liquid
			
			
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'index'
						assign slot_default_index = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component slider-general svelte-7s9bvi" data-liquivelte-component-name="slider-general">
		{% assign component_include_count_slot_offset = 0 %}
		{% assign component_include_count = 0 %}
		{% assign component_include_depth = 0 %}
		<script> window.cicR = 0; </script>
	{%- endunless -%}
	

<div  class="relative svelte-7s9bvi" bind:this="{container}">
  {% if section.settings.flush_with_header %}
    <div  class="flush-shadow svelte-7s9bvi"></div>
  {% endif %}

  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_Swiper %}freemode-kvsp-{ { enabled: true, sticky: true } }-prsp-mousewheel-kvsp-{ { forceToAxis: true, sensitivity: 1.5 } }-prsp-modules-kvsp-{[FreeMode, Mousewheel]}-prsp-preloadImages-kvsp-{false}{% endcapture %}
{%- assign component_include_count_before_slots = component_include_count -%}


{%- capture slot_content_def_Swiper -%}{% assign component_include_depth = component_include_depth | plus: 1 %}
    {% for block in section.blocks %}
    {% assign index = forloop.index0 %}
      {% if block.type == 'image' %}
        
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_SwiperSlide %}{% endcapture %}
{%- assign component_include_count_before_slots = component_include_count -%}


{%- capture slot_content_def_SwiperSlide -%}{% assign component_include_depth = component_include_depth | plus: 1 %}
          {% if forloop.index == 1 %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Image %}source-kvsp-{{ block.settings.image }}-prsp-sizes-kvsp-100vw@fixed-prsp-loading-kvsp-eager{% endcapture %}
{% assign modulename = basename | append: 'Image' %}
{% include modulename, liquivelte: true, props: props_Image, sub_include: true, basename: '' , source:  block.settings.image  %}
{% assign props = '' %}
          {% else %}
            
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Image %}source-kvsp-{{ block.settings.image }}-prsp-sizes-kvsp-100vw@fixed-prsp-loading-kvsp-lazy{% endcapture %}
{% assign modulename = basename | append: 'Image' %}
{% include modulename, liquivelte: true, props: props_Image, sub_include: true, basename: '' , source:  block.settings.image  %}
{% assign props = '' %}
          {% endif %}
        {%- endcapture -%}{% assign component_include_depth = component_include_depth | minus: 1 %}
{%- assign component_include_count_slot_offset = component_include_count | minus: component_include_count_before_slots -%}

{% assign modulename = basename | append: 'framework7-liquivelte-swiper-slide' %}
{% assign slot_content_SwiperSlide = slot_content_SwiperSlide | append: '-scs-' | append: modulename | append: '-scvs-' | append: slot_content_def_SwiperSlide %}
{% include modulename, liquivelte: true, props: props_SwiperSlide, sub_include: true, slot_contents: slot_content_SwiperSlide, basename: 'framework7-liquivelte-'  %}
{% assign slot_content_SwiperSlide = '' %}
{% assign props = '' %}
      
      {% elsif block.type == 'image-card' %}
        
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props_SwiperSlide %}{% endcapture %}
{%- assign component_include_count_before_slots = component_include_count -%}


{%- capture slot_content_def_SwiperSlide -%}{% assign component_include_depth = component_include_depth | plus: 1 %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_ImageWithCard %}block-kvsp-{{ block }}-prsp-forloop-kvsp-{{ forloop }}{% endcapture %}
{% assign modulename = basename | append: 'image-with-card' %}
{% include modulename, liquivelte: true, props: props_ImageWithCard, sub_include: true, basename: '' , block:  block  , forloop:  forloop  %}
{% assign props = '' %}
        {%- endcapture -%}{% assign component_include_depth = component_include_depth | minus: 1 %}
{%- assign component_include_count_slot_offset = component_include_count | minus: component_include_count_before_slots -%}

{% assign modulename = basename | append: 'framework7-liquivelte-swiper-slide' %}
{% assign slot_content_SwiperSlide = slot_content_SwiperSlide | append: '-scs-' | append: modulename | append: '-scvs-' | append: slot_content_def_SwiperSlide %}
{% include modulename, liquivelte: true, props: props_SwiperSlide, sub_include: true, slot_contents: slot_content_SwiperSlide, basename: 'framework7-liquivelte-'  %}
{% assign slot_content_SwiperSlide = '' %}
{% assign props = '' %}
      {% endif %}
    {% endfor %} 
  {%- endcapture -%}{% assign component_include_depth = component_include_depth | minus: 1 %}
{%- assign component_include_count_slot_offset = component_include_count | minus: component_include_count_before_slots -%}

{% assign modulename = basename | append: 'framework7-liquivelte-swiper' %}
{% assign slot_content_Swiper = slot_content_Swiper | append: '-scs-' | append: modulename | append: '-scvs-' | append: slot_content_def_Swiper %}
{% include modulename, liquivelte: true, props: props_Swiper, sub_include: true, slot_contents: slot_content_Swiper, basename: 'framework7-liquivelte-'  %}
{% assign slot_content_Swiper = '' %}
{% assign props = '' %}
</div> 



{% schema %}{
  "name": "Slider General",
  "tag": "section",
  "class": "product-section spaced-section",
  "settings": [
    {
      "type": "header",
      "content": "Swiper"
    },
    {
      "id": "flush_with_header",
      "type": "checkbox",
      "label": "Flush to top",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "shadow_at_top",
      "label": "Shadow at top to ensure text visibility",
      "default": false
    }
  ],
  "blocks": [
    {
      "name": "Slider Image & Card",
      "type": "image-card",
      "settings": [
        {
          "type": "header",
          "content": "Swiper with Card"
        },
        {
          "id": "image",
          "type": "image_picker",
          "label": "Image"
        },
        {
          "type": "header",
          "content": "CTA Button"
        },
        {
          "id": "cta_text",
          "label": "CTA Button Text",
          "default": "Shop",
          "type": "text"
        },
        {
          "id": "cta_url",
          "label": "CTA Url",
          "type": "url"
        },
        {
          "id": "cta_text_2",
          "label": "CTA Second Button Text",
          "default": "Shop",
          "type": "text"
        },
        {
          "id": "cta_url_2",
          "label": "CTA Second Url",
          "type": "url"
        },
        {
          "type": "header",
          "content": "Card"
        },
        {
          "type": "select",
          "options": [
            {
              "label": "Regular",
              "value": "regular"
            },
            {
              "label": "Round",
              "value": "round"
            },
            {
              "label": "Transparent",
              "value": "transparent"
            }
          ],
          "id": "card_style",
          "label": "Card Style"
        },
        {
          "id": "card_top",
          "label": "Card Top",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_left",
          "label": "Card Left",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_width",
          "label": "Card Width",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_height",
          "label": "Card Height",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_top_mobile",
          "label": "Card Top Mobile",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_left_mobile",
          "label": "Card Left Mobile",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_width_mobile",
          "label": "Card Width Mobile",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "id": "card_height_mobile",
          "label": "Card Height Mobile",
          "default": 50,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%"
        },
        {
          "type": "text",
          "id": "card_title",
          "label": "Card Title"
        },
        {
          "type": "text",
          "id": "card_subtitle",
          "label": "Card Sub Title"
        },
        {
          "type": "inline_richtext",
          "id": "card_content",
          "label": "Card Content"
        },
        {
          "type": "header",
          "content": "Align Card Content"
        },
        {
          "id": "card_vertical",
          "type": "select",
          "options": [
            {
              "label": "Default (top)",
              "value": "default"
            },
            {
              "label": "Center",
              "value": "center"
            },
            {
              "label": "To Bottom",
              "value": "bottom"
            },
            {
              "label": "Spread Evenly",
              "value": "even"
            }
          ],
          "label": "Vertical Alignment",
          "default": "default"
        },
        {
          "type": "header",
          "content": "Button group"
        },
        {
          "id": "button_group_horizontal",
          "type": "select",
          "options": [
            {
              "label": "Default (left)",
              "value": "default"
            },
            {
              "label": "Center",
              "value": "center"
            },
            {
              "label": "To Right",
              "value": "right"
            },
            {
              "label": "Spread to Sides",
              "value": "sides"
            },
            {
              "label": "Spread Evenly",
              "value": "even"
            }
          ],
          "label": "Horizontal Alignment",
          "default": "default"
        },
        {
          "type": "range",
          "default": 10,
          "min": 0,
          "max": 100,
          "step": 1,
          "id": "button_spacing",
          "label": "Space Between Buttons",
          "unit": "px"
        },
        {
          "default": 1,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1,
          "id": "button_group_margin_bottom",
          "label": "Button Offset to Bottom",
          "unit": "px"
        },
        {
          "type": "header",
          "content": "heading"
        },
        {
          "type": "number",
          "id": "font_size",
          "label": "Font Size",
          "default": 32
        },
        {
          "type": "number",
          "id": "font_size_mobile",
          "label": "Font Size Mobile",
          "default": 24
        },
        {
          "type": "text",
          "id": "font_unit",
          "label": "Font Size Unit",
          "default": "px",
          "info": "You can give CSS units (pt, px, em etc.)"
        },
        {
          "type": "color",
          "id": "color",
          "label": "Color",
          "default": "#000"
        },
        {
          "type": "color",
          "id": "color_dark",
          "label": "Color Dark",
          "default": "#fff",
          "info": "Color to be used when user prefers dark theme"
        },
        {
          "type": "checkbox",
          "id": "bold",
          "label": "Bold"
        },
        {
          "type": "select",
          "options": [
            {
              "label": "Left",
              "value": "left"
            },
            {
              "label": "Center",
              "value": "center"
            },
            {
              "label": "Right",
              "value": "right"
            }
          ],
          "id": "text_align",
          "label": "Text Align",
          "default": "left"
        },
        {
          "type": "header",
          "content": "Paragraph"
        },
        {
          "type": "number",
          "id": "p_font_size",
          "label": "Font Size",
          "default": 32
        },
        {
          "type": "number",
          "id": "p_font_size_mobile",
          "label": "Font Size Mobile",
          "default": 24
        },
        {
          "type": "text",
          "id": "p_font_unit",
          "label": "Font Size Unit",
          "default": "px",
          "info": "You can give CSS units (pt, px, em etc.)"
        },
        {
          "type": "color",
          "id": "p_color",
          "label": "Color",
          "default": "#000"
        },
        {
          "type": "color",
          "id": "p_color_dark",
          "label": "Color Dark",
          "default": "#fff",
          "info": "Color to be used when user prefers dark theme"
        },
        {
          "type": "checkbox",
          "id": "p_bold",
          "label": "Bold"
        },
        {
          "type": "select",
          "options": [
            {
              "label": "Left",
              "value": "left"
            },
            {
              "label": "Center",
              "value": "center"
            },
            {
              "label": "Right",
              "value": "right"
            }
          ],
          "id": "p_text_align",
          "label": "Text Align",
          "default": "left"
        },
        {
          "type": "header",
          "content": "Button"
        },
        {
          "id": "button_style",
          "type": "select",
          "options": [
            {
              "label": "Regular",
              "value": "regular"
            },
            {
              "label": "Filled",
              "value": "filled"
            },
            {
              "label": "Outlined",
              "value": "outlined"
            }
          ],
          "label": "Button Style",
          "default": "filled"
        },
        {
          "type": "checkbox",
          "id": "button_isbig",
          "label": "Button is Big"
        },
        {
          "id": "button_israised",
          "label": "Button Elevated",
          "type": "checkbox"
        },
        {
          "id": "button_fullwidth",
          "type": "checkbox",
          "label": "Full Width",
          "default": false
        }
      ]
    },
    {
      "name": "Slider Image",
      "type": "image",
      "settings": [
        {
          "type": "header",
          "content": "Swiper"
        },
        {
          "id": "image",
          "type": "image_picker",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Slider General",
      "category": "Gallery"
    }
  ]
}{% endschema %}
	
						
	{% liquid
  assign section_blocks_json = '['
  for block in section.blocks

    assign block_json = '{'
    assign block_json = block_json | append: '"type": "' | append: block.type | append: '",'
    assign block_json = block_json | append: '"settings": {'
    for setting in block.settings
      assign setting_key_with_quotes = setting | json
      assign block_json = block_json | append: setting_key_with_quotes | append: ":"

      if block.settings[setting].aspect_ratio and block.settings[setting].src
        assign block_json = block_json | append: '{'
        assign width = block.settings[setting].width | json
        assign block_json = block_json | append: '"width": ' | append: width | append: ','
        assign block_json = block_json | append: '"aspect_ratio": ' | append: block.settings[setting].aspect_ratio | append: ','
        assign src_with_quotes = block.settings[setting].src | json
        assign block_json = block_json | append: '"src": ' | append: src_with_quotes
        assign block_json = block_json | append: '}'

      else
        assign value_with_quotes = block.settings[setting] | json
        assign block_json = block_json | append: value_with_quotes
      endif

      unless forloop.last
        assign block_json = block_json | append: ','
      endunless
    endfor

    assign block_json = block_json | append: '}}'

    
    assign section_blocks_json = section_blocks_json | append: block_json
    
    unless forloop.last
      assign section_blocks_json = section_blocks_json | append: ','
    endunless
  endfor
  assign section_blocks_json = section_blocks_json | append: ']'
%}	
	<script type="text/noscript"  class="instance-data svelte-7s9bvi">
		{% assign component_include_count = component_include_count | plus: 1 %}
		{
	
	
	"sectionƒƒsettings": {{ section.settings | json }} , "sectionƒƒblocks": {{ section_blocks_json }}
		,
		"forloop_index": {{ forloop.index0 | default: 0 | json }},
		"component_index": {{ component_include_count | plus: component_include_depth }},
		"component_name": "index"
	}</script>
	
	<script  class="liquivelte-prop-script svelte-7s9bvi">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
		const themeImports = (JSONparse(propScript.previousElementSibling.textContent));
		wrapper.svelteProps = wrapper.svelteProps || {};
		Object.keys(themeImports).forEach(key => {
			if(key == 'forloop_index' || key == 'component_index' || key == 'component_name') return;
			wrapper.svelteProps[key] = [
				...(wrapper.svelteProps[key] || []),
				{ forloop_index: themeImports.index, component_index: themeImports.component_index, component_name: themeImports.component_name, value: themeImports[key] }
			];
		});
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			-%}
	{%- liquid 
			assign slot_default_index = null
			
			-%}
	
	{%- unless sub_include -%} 
	</div>
	{% assign component_include_count = 0 %}
	{%- endunless -%}
	