	{%- liquid
			
			
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'exploding-gallery'
						assign slot_default_exploding-gallery = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component exploding-gallery svelte-12dbek" data-liquivelte-component-name="exploding-gallery.liquivelte">
	{%- endunless -%}
	{% liquid
  assign imbalance = 10
%}
 

<div  class="exp-gallery-container svelte-12dbek" bind:this="{container}"           
      style="--explode-gap: 1em; --explode-size-imbalance: 0%; --image-oversize: 1; {animationVariables.join(';')}; {widthVariables.join(';')}; {heightVariables.join(';')}">
    <div  class="stage-container svelte-12dbek">
      <div  class="exp-gallery-stage svelte-12dbek" bind:this="{stage}">
      {% for block in section.blocks %}
    {% assign index = forloop.index0 %}
        <div  class="image-container a svelte-12dbek" 
        style="--image-aspect-ratio: {{ block.settings.image.aspect_ratio }}" 
        bind:clientWidth="{itemWidths[forloop.index]}"
        bind:clientHeight="{itemHeights[forloop.index]}">
          <picture  class=" svelte-12dbek">
            <source media="(min-width:650px)" srcset="{{ block.settings.image | img_url: 'x800' }}" liquivelte-value-cache="img_urlÂ§{{block.settings.image | escape -}}, {{'x800'}}Â§{{block.settings.image| img_url: 'x800'  }}">
            <source media="(min-width:1200px)" srcset="{{ block.settings.image | img_url: 'x800' }}" liquivelte-value-cache="img_urlÂ§{{block.settings.image | escape -}}, {{'x800'}}Â§{{block.settings.image| img_url: 'x800'  }}">
            <img  class=" svelte-12dbek" src="{{ block.settings.image | img_url: 'x800' }}" liquivelte-value-cache="img_urlÂ§{{block.settings.image | escape -}}, {{'x800'}}Â§{{block.settings.image| img_url: 'x800'  }}" alt="{{ block.settings.image.alt }}" style="width:auto;" />
          </picture>
        </div>
        {% endfor %}
    </div>
  </div> 
  <div  class="exp-gallery-placeholder svelte-12dbek" style="height: { stageHeight + keepFor }px">&nbsp;</div>
</div> 


{% schema %}{
  "name": "Scroll Gallery",
  "tag": "section",
  "class": "product-section spaced-section",
  "settings": [
    {
      "id": "title",
      "type": "text",
      "label": "Title"
    },
    {
      "id": "subtitle",
      "type": "text",
      "label": "Subtitle"
    },
    {
      "type": "html",
      "id": "footnote",
      "label": "Footnote"
    },
    {
      "id": "newsetting",
      "label": "New Setting",
      "type": "text"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ]
}{% endschema %}
	
						
	{% liquid
  assign section_blocks_json = '['
  for block in section.blocks

    assign block_json = '{'
    assign block_json = block_json | append: '"type": "' | append: block.type | append: '",'
    assign block_json = block_json | append: '"settings": {'
    for setting in block.settings
      assign setting_key_with_quotes = setting | json
      assign block_json = block_json | append: setting_key_with_quotes | append: ":"

      if block.settings[setting].aspect_ratio
        assign block_json = block_json | append: '{'
        assign block_json = block_json | append: '"width": ' | append: block.settings[setting].width | append: ','
        assign block_json = block_json | append: '"aspect_ratio": ' | append: block.settings[setting].aspect_ratio | append: ','
        assign src_with_quotes = block.settings[setting].src | json
        assign block_json = block_json | append: '"src": ' | append: src_with_quotes
        assign block_json = block_json | append: '}'

      else
        assign value_with_quotes = block.settings[setting] | json
        assign block_json = block_json | append: value_with_quotes
      endif

      unless forloop.last
        assign block_json = block_json | append: ','
      endunless
    endfor

    assign block_json = block_json | append: '}}'

    
    assign section_blocks_json = section_blocks_json | append: block_json
    
    unless forloop.last
      assign section_blocks_json = section_blocks_json | append: ','
    endunless
  endfor
  assign section_blocks_json = section_blocks_json | append: ']'
%}					
	<script type="text/noscript"  class="instance-data svelte-12dbek">{
	"imbalance" : {{ imbalance | json }}
	,
	"sectionÆ’Æ’settings": {{ section.settings | json }} , "sectionÆ’Æ’blocks": {{ section_blocks_json }}
	}</script>
	
	<script  class="liquivelte-prop-script svelte-12dbek">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			-%}
	{%- liquid 
			assign slot_default_exploding-gallery = null
			
			-%}
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	