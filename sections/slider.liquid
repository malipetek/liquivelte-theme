
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component slider svelte-1qxc2aj" data-liquivelte-component-name="slider">
	{%- endunless -%}
	{% liquid 
  assign collection = collections[section.settings.collection]
  assign products = '' | split: ''
  for product in collection.products
    unless forloop.index > 10
      assign product_arr = collection.products | where: 'handle', product.handle
      assign products = products | concat: product_arr
    endunless
  endfor
  assign slidesPerView = 3
%}



{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}undefined-kvsp-{% endcapture %}

{% capture slot_content_Block %}

{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}undefined-kvsp-{% endcapture %}

{% capture slot_content_BlockTitle %}With all controls{% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'framework7-liquivelte-block-title' | append: '-scvs-' | append: slot_content_BlockTitle %}
{% assign modulename = basename | append: 'framework7-liquivelte-block-title' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: 'framework7-liquivelte-' %}
{% assign props = '' %}
<div style="--slides-per-view: {{ slidesPerView }}">
  
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}{% endcapture %}

{% capture slot_content_Swiper %}
    {% for product in products %}
    {% assign index = forloop.index0 %}
    
{% comment %}
kvsp stands for "key value separator"
prsp stands for "props separator"
{% endcomment %}
{% comment %}
scs stands for "slot component separator"
scvs stands for "slot component value separator"
smns stands for "slot module name separator"
{% endcomment %}
{% capture props %}undefined-kvsp-{% endcapture %}

{% capture slot_content_SwiperSlide %}
      
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}product-kvsp-{{ product }}{% endcapture %}
{% assign modulename = basename | append: 'product-card' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %}
    {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'framework7-liquivelte-swiper-slide' | append: '-scvs-' | append: slot_content_SwiperSlide %}
{% assign modulename = basename | append: 'framework7-liquivelte-swiper-slide' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: 'framework7-liquivelte-' %}
{% assign props = '' %}
    {% endfor %} 
  {% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'framework7-liquivelte-swiper' | append: '-scvs-' | append: slot_content_Swiper %}
{% assign modulename = basename | append: 'framework7-liquivelte-swiper' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: 'framework7-liquivelte-' %}
{% assign props = '' %}
</div>
{% endcapture %}
{% assign slot_contents = slot_contents | append: '-scs-' | append: 'framework7-liquivelte-block' | append: '-scvs-' | append: slot_content_Block %}
{% assign modulename = basename | append: 'framework7-liquivelte-block' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, slot_contents: slot_contents, basename: 'framework7-liquivelte-' %}
{% assign props = '' %}



{% schema %}{
  "name": "Slider",
  "tag": "section",
  "class": "product-section spaced-section",
  "settings": [
    {
      "type": "header",
      "content": "Swiper"
    },
    {
      "id": "collection",
      "type": "collection",
      "label": "Collection"
    },
    {
      "type": "header",
      "content": "Product Card"
    },
    {
      "type": "header",
      "content": "Product Card Settings"
    },
    {
      "id": "layout",
      "label": "Layout Type",
      "type": "select",
      "options": [
        {
          "label": "Regular",
          "value": "regular"
        },
        {
          "label": "Compact",
          "value": "compact"
        },
        {
          "label": "Horizontal",
          "value": "horizontal"
        }
      ],
      "default": "regular"
    },
    {
      "type": "select",
      "id": "title_size",
      "label": "Title Size",
      "default": "normal",
      "options": [
        {
          "label": "Normal",
          "value": "normal"
        },
        {
          "label": "Small",
          "value": "small"
        },
        {
          "label": "large",
          "value": "Large"
        },
        {
          "label": "X Large",
          "value": "xlarge"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Slider",
      "category": "Gallery"
    }
  ]
}{% endschema %}
	
						
						
	<script type="text/noscript"  class="instance-data svelte-1qxc2aj">{
	"products" : {{ products | json }} , "slidesPerView" : {{ slidesPerView | json }} 
	,
	"sectionÆ’Æ’settings": {{ section.settings | json }} 

	}</script>
	
	<script  class="liquivelte-prop-script svelte-1qxc2aj">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"ðŸ‘†\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('Â§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	