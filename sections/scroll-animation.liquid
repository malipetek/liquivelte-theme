
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component scroll-animation svelte-strz53" data-liquivelte-component-name="scroll-animation">
	{%- endunless -%}
	{% liquid 
  assign keepFor = 0
  assign keptFor = 0
  assign animations = section.blocks | where: 'type', 'animation' | map: 'settings'
%}


<div  class="animation-container svelte-strz53" bind:this="{container}"
  style="--explode-gap: 1em; --explode-size-imbalance: 0%; --image-oversize: 1; {animationVariables.join(';')}; {widthVariables.join(';')}; {heightVariables.join(';')}">

  <div  class="stage-container svelte-strz53">
    <div  class="animation-stage svelte-strz53" bind:this="{stage}">
      {% for block in section.blocks %}
    {% assign index = forloop.index0 %}
        
        {% if block.type == 'title' %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}anim_style-kvsp-{{ block.settings.anim_style }}{% endcapture %}
{% assign modulename = basename | append: 'title' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %}
        {% endif %}
        
        {% if block.type == 'image' %}
          <img loading="lazy" src="{{ block.settings.image }}" />
        {% endif %}
        
        {% if block.type == 'text' %}
          {{ block.settings.content | html }}
        {% endif %}

        {% if block.type == 'video' %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}block-kvsp-{{ block }}-prsp-keepFor-kvsp-{{ keepFor }}-prsp-bind:keptFor-kvsp--prsp-anim_style-kvsp-{{ block.settings.anim_style }}{% endcapture %}
{% assign modulename = basename | append: 'video' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %}
        {% endif %}

        {% if block.type == 'shape' %}
          
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}block-kvsp-{{ block }}-prsp-anim_style-kvsp-{{ block.settings.anim_style }}{% endcapture %}
{% assign modulename = basename | append: 'shape' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %} 
        {% endif %}
      
      {% endfor %}
    </div>
  </div>
  <div  class="stage-placeholder svelte-strz53" style="height: { stageHeight + keepFor }px">&nbsp;</div>
</div>


{% schema %}{
  "name": "Scroll Animation",
  "settings": [
    {
      "type": "number",
      "id": "animation_duration",
      "label": "Animation Duration",
      "default": 200,
      "info": "\"vh\" unit is 1% of viewport height"
    }
  ],
  "blocks": [
    {
      "name": "Item",
      "type": "item",
      "settings": [
        {
          "type": "paragraph",
          "content": "A Item is something visible on the viewport"
        },
        {
          "type": "html",
          "id": "content",
          "label": "Content",
          "default": "<p></p>"
        }
      ]
    },
    {
      "name": "Video",
      "type": "video",
      "settings": [
        {
          "type": "text",
          "id": "source",
          "label": "Video Source From Files"
        },
        {
          "type": "range",
          "id": "trim",
          "label": "Trim Video",
          "max": 50,
          "step": 1,
          "unit": "%",
          "min": 0,
          "default": 1
        },
        {
          "type": "checkbox",
          "id": "is_bg",
          "label": "Is Background",
          "default": true
        },
        {
          "id": "id",
          "label": "Id",
          "type": "text",
          "info": "Use this id in animation block to target this item."
        }
      ]
    },
    {
      "type": "title",
      "name": "Title",
      "settings": [
        {
          "id": "content",
          "type": "text",
          "label": "Title Text"
        },
        {
          "type": "number",
          "id": "font_size",
          "label": "Font Size (em)",
          "default": 1
        },
        {
          "type": "color",
          "id": "color",
          "label": "Color",
          "default": "#fff"
        },
        {
          "type": "checkbox",
          "id": "bold",
          "label": "Bold",
          "default": false
        },
        {
          "id": "id",
          "label": "Id",
          "type": "text",
          "info": "Use this id in animation block to target this item."
        }
      ]
    },
    {
      "type": "shape",
      "name": "Shape",
      "settings": [
        {
          "id": "shape",
          "label": "Shape",
          "type": "select",
          "options": [
            {
              "label": "Square",
              "value": "square"
            },
            {
              "label": "Circle",
              "value": "circle"
            },
            {
              "label": "Star",
              "value": "star"
            }
          ]
        },
        {
          "type": "number",
          "id": "font_size",
          "label": "Font Size (em)",
          "default": 1
        },
        {
          "type": "color",
          "id": "color",
          "label": "Color",
          "default": "#fff"
        },
        {
          "type": "checkbox",
          "id": "bold",
          "label": "Bold",
          "default": false
        },
        {
          "id": "id",
          "label": "Id",
          "type": "text",
          "info": "Use this id in animation block to target this item."
        },
        {
          "id": "background_color",
          "label": "Shape Color",
          "type": "color"
        },
        {
          "id": "border_color",
          "label": "Shape Border Color",
          "type": "color"
        },
        {
          "id": "border_size",
          "label": "Shape Border Size",
          "default": 1,
          "type": "range",
          "min": 0,
          "max": 20,
          "step": 0.2,
          "unit": "px"
        },
        {
          "id": "squash",
          "label": "Squash Text From Sides",
          "default": 1,
          "type": "range",
          "min": 0,
          "max": 100,
          "step": 1
        },
        {
          "type": "header",
          "content": "Positionable"
        },
        {
          "type": "select",
          "id": "position",
          "label": "Position",
          "options": [
            {
              "label": "Center",
              "value": "center"
            },
            {
              "label": "Custom",
              "value": "custom"
            }
          ]
        },
        {
          "type": "range",
          "default": 1,
          "min": 0,
          "max": 100,
          "step": 1,
          "id": "top",
          "label": "Top",
          "unit": "%"
        },
        {
          "type": "range",
          "default": 1,
          "min": 0,
          "max": 100,
          "step": 1,
          "id": "left",
          "label": "Left",
          "unit": "%"
        }
      ]
    },
    {
      "type": "animation",
      "name": "Animation",
      "settings": [
        {
          "type": "text",
          "id": "target",
          "label": "Target Item (Other blocks)"
        },
        {
          "id": "from",
          "label": "From",
          "default": 0,
          "info": "The percent of animation start",
          "type": "number"
        },
        {
          "id": "to",
          "label": "To",
          "default": 100,
          "info": "The percent of progress this animation ends",
          "type": "number"
        },
        {
          "type": "number",
          "id": "valueFrom",
          "label": "Value From",
          "default": 0
        },
        {
          "id": "valueTo",
          "label": "Value To",
          "default": 0,
          "type": "number"
        },
        {
          "id": "variable",
          "type": "text",
          "label": "CSS variable",
          "default": "--font-opacity",
          "info": "CSS variable that will be used in the css"
        },
        {
          "id": "anim_style",
          "label": "Animation CSS",
          "info": "You can write CSS with CSS variable you set above",
          "type": "textarea",
          "default": "color: rgba(255, 255, 255, var(--font-opacity));"
        }
      ]
    }
  ]
}{% endschema %}
	
						
	{% liquid
  assign section_blocks_json = '['
  for block in section.blocks

    assign block_json = '{'
    assign block_json = block_json | append: '"type": "' | append: block.type | append: '",'
    assign block_json = block_json | append: '"settings": {'
    for setting in block.settings
      assign setting_key_with_quotes = setting | json
      assign block_json = block_json | append: setting_key_with_quotes | append: ":"

      if block.settings[setting].aspect_ratio
        assign block_json = block_json | append: '{'
        assign block_json = block_json | append: '"width": ' | append: block.settings[setting].width | append: ','
        assign block_json = block_json | append: '"aspect_ratio": ' | append: block.settings[setting].aspect_ratio | append: ','
        assign src_with_quotes = block.settings[setting].src | json
        assign block_json = block_json | append: '"src": ' | append: src_with_quotes
        assign block_json = block_json | append: '}'

      else
        assign value_with_quotes = block.settings[setting] | json
        assign block_json = block_json | append: value_with_quotes
      endif

      unless forloop.last
        assign block_json = block_json | append: ','
      endunless
    endfor

    assign block_json = block_json | append: '}}'

    
    assign section_blocks_json = section_blocks_json | append: block_json
    
    unless forloop.last
      assign section_blocks_json = section_blocks_json | append: ','
    endunless
  endfor
  assign section_blocks_json = section_blocks_json | append: ']'
%}					
	<script type="text/noscript"  class="instance-data svelte-strz53">{
	"left" : {{ left | json }} , "title_top" : {{ title_top | json }} , "font_size" : {{ font_size | json }} , "color" : {{ color | json }} , "bold" : {{ bold | json }} , "animations" : {{ animations | json }} 
	,
	"blockƒƒsettings": {{ block.settings | json }} , "sectionƒƒblocks": {{ section_blocks_json }}

	}</script>
	
	<script  class="liquivelte-prop-script svelte-strz53">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	