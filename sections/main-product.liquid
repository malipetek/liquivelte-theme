	{%- liquid
			
			
			-%}
	{%- liquid
	assign lv_props_arr = props | split: '-prsp-'
	for lv_prop in lv_props_arr
	assign lv_prop_and_value = lv_prop | split: '-kvsp-'
	assign lv_propName = lv_prop_and_value | first
	if lv_prop_and_value.size > 1
		assign lv_propValue = lv_prop_and_value | last | remove: '"'
	else
		assign lv_propValue = ''	
	endif
	if lv_propValue == '0'
		assign lv_propValue = lv_propValue | times: 1
	endif
	if lv_propValue contains '{' and lv_propValue contains '}'
	assign lv_propValue = lv_propValue | remove: '{' | remove: '}'
	assign lv_propValueArr = lv_propValue | split: ','
	for lv_entry in lv_propValueArr
	assign lv_key = lv_entry | split: ':' | first | strip | remove: '"'
	assign lv_value = lv_entry | split: ':' | last | strip | remove: '"'
	assign composite_key = lv_propName | append: '_' | append: lv_key
	
	endfor
	endif
	if lv_propName == 'price_formatted' and price_formatted == blank
		assign price_formatted = lv_propValue
	endif
	if lv_propName == 'product' and product == blank
		assign product = lv_propValue
	endif
	endfor
	-%}
	
			{%- liquid
				assign slot_contents_and_values = slot_contents | split: '-scs-'
				for content_and_value in slot_contents_and_values
					assign module_and_slotname = content_and_value | split: '-scvs-' | first
					assign lv_module = module_and_slotname | split: '-smns-' | first
					assign lv_name = module_and_slotname | split: '-smns-' | last
					assign lv_value = content_and_value | split: '-scvs-' | last
					
					if lv_module == 'index'
						assign slot_default_index = lv_value | strip
					endif
				endfor
				-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component main-product svelte-mj7wke" data-liquivelte-component-name="main-product">
		{% assign component_include_count_slot_offset = 0 %}
		{% assign component_include_count = 0 %}
		{% assign component_include_depth = 0 %}
		<script> window.cicR = 0; </script>
	{%- endunless -%}
	{% liquid 
  assign price_formatted = product.price | money
%}

 


{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_Breadcrumbs %}{% endcapture %}
{% assign modulename = basename | append: 'breadcrumbs' %}
{% include modulename, liquivelte: true, props: props_Breadcrumbs, sub_include: true, basename: ''  %}
{% assign props = '' %}

<div  class=" svelte-mj7wke">
  <div  class="pt-6 svelte-mj7wke">
    <!-- Product info -->
    <div  class="max-w-2xl mx-auto pt-10 pb-16 px-4 sm:px-6 lg:max-w-7xl lg:pt-16 lg:pb-24 lg:px-8 lg:grid lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 svelte-mj7wke">
      <div  class="lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8 svelte-mj7wke">
        
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_ImageGallery %}{% endcapture %}
{% assign modulename = basename | append: 'image-gallery' %}
{% include modulename, liquivelte: true, props: props_ImageGallery, sub_include: true, basename: ''  %}
{% assign props = '' %}
        <div  class="h-8 md:h-20 svelte-mj7wke"></div>
        <h1  class="text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl svelte-mj7wke">{{ section.settings.product_title }} </h1>
      </div>

      <!-- Options -->
      <div  class="mt-4 lg:mt-0 lg:row-span-3 svelte-mj7wke">
        <h1  class="text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl svelte-mj7wke">{{ product.title }}</h1>
        <h2  class="sr-only svelte-mj7wke">Product information</h2> 
        <p  class="text-3xl text-gray-900 mt-4 svelte-mj7wke">{{ price_formatted }}</p>

        {% capture form_content %}
    {% form 'product', product %}%FC%{% endform %}
    {% endcapture %}
    {% liquid 
      assign form_props = form_content | split: '<form' | last | split: '>' | first
      assign additional_inputs = ''
      assign pieces = form_content | split: '>'
      for piece in pieces
        if piece contains '<input'
          assign additional_inputs = additional_inputs | append: piece | append: '>'
        endif
      endfor
    %}
  <form  class="mt-10 svelte-mj7wke" {{- form_props -}}>
  {{- additional_inputs -}}
  <script liquivelte-keep liquivelte-eval> 
    window.liquivelte_form_inputs = window.liquivelte_form_inputs || {};
    window.liquivelte_form_props = window.liquivelte_form_props || {};
    window.liquivelte_form_inputs['form_inputs_f58d08b6b'] = [...(window.liquivelte_form_inputs['form_inputs_f58d08b6b'] || []),`{{ additional_inputs | escape }}`];
    window.liquivelte_form_props['form_props_f58d08b6b'] = [...(window.liquivelte_form_props['form_props_f58d08b6b'] || []),`{{ form_props }}`];
    if(document.currentScript){
      document.currentScript.remove();
    }
  </script>
  {% assign additional_inputs = '' %}
          
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
          <div  class=" svelte-mj7wke">
            {% for option in product.options_with_values %}
    {% assign index = forloop.index0 %}
              <!-- {% comment %} -->
               {@const option_index = forloop.index0 }
               <!-- {% endcomment %} -->
              <!-- {% assign option_index = forloop.index0 %} -->
              <h3  class="text-sm text-gray-900 font-medium mt-4 svelte-mj7wke"> Choose a {{ option.name }}</h3> 
              <!-- <div  class="ring ring-offset-1 svelte-mj7wke"> </div> -->
              <fieldset  class="mt-4 svelte-mj7wke">
                <legend  class="sr-only svelte-mj7wke">Choose a {{ option.name }}</legend>
                {% if option.name == 'Color' %}
                <div  class="flex items-center space-x-3 svelte-mj7wke">
                  {% for value in option.values %}
    {% assign index = forloop.index0 %}
                    
	{%- liquid 
	assign dynamic_classes = ''
	  if value == product.selected_or_first_available_variant.options[option_index] 
	assign dynamic_classes = dynamic_classes | append: ' ring' | append: ' ring-offset-1'
	endif
	-%}
	<label  class="-m-0.5 relative p-0.5 rounded-full flex items-center justify-center cursor-pointer focus:outline-none ring-gray-400{{ dynamic_classes }} svelte-mj7wke">
                      {% if value == product.selected_or_first_available_variant.options[option_index] %}
                        <input type="radio" bind:group="{{ selected_options[option.position] }}" name="color-choice" value="{{ value }}"  class="sr-only svelte-mj7wke" aria-labelledby="color-choice-0-label" checked>
                      {% else %}
                        <input type="radio" bind:group="{{ selected_options[option.position] }}" name="color-choice" value="{{ value }}"  class="sr-only svelte-mj7wke" aria-labelledby="color-choice-0-label">
                      {% endif %}
                      <p id="color-choice-0-label"  class="sr-only svelte-mj7wke">{{ value }}</p>
                      <span aria-hidden="true"  class="h-8 w-8 bg-white border border-black border-opacity-10 rounded-full svelte-mj7wke"></span>
                    </label>
                  {% endfor %}
                </div>
                {% else %}
                <div  class="grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4 svelte-mj7wke">
                  {% for value in option.values %}
    {% assign index = forloop.index0 %}
                      
	{%- liquid 
	assign dynamic_classes = ''
	  if value == product.selected_or_first_available_variant.options[option_index] 
	assign dynamic_classes = dynamic_classes | append: ' bg-indigo-600' | append: ' text-white'
	endif
	  if value != product.selected_or_first_available_variant.options[option_index] 
	assign dynamic_classes = dynamic_classes | append: ' text-gray-900'
	endif
	-%}
	<label  class="group relative border rounded-md py-3 hover:bg-indigo-400 hover:text-white px-4 flex items-center justify-center text-sm font-medium uppercase focus:outline-none sm:flex-1 sm:py-6 bg-white shadow-sm cursor-pointer{{ dynamic_classes }} svelte-mj7wke">
                        {% if value == product.selected_or_first_available_variant.options[option_index] %}
                          <input type="radio" bind:group="{{ selected_options[option.position] }}" name="size-choice" value="{{ value }}"  class="sr-only svelte-mj7wke" aria-labelledby="size-choice-1-label" checked>
                        {% else %}
                          <input type="radio" bind:group="{{ selected_options[option.position] }}" name="size-choice" value="{{ value }}"  class="sr-only svelte-mj7wke" aria-labelledby="size-choice-1-label">
                        {% endif %}
                        <p id="size-choice-1-label">{{ value }}</p>
                        <div  class="absolute -inset-px rounded-md pointer-events-none svelte-mj7wke" aria-hidden="true"></div>
                      </label>
                  {% endfor %}
                </div>
                {% endif %}
              </fieldset>
            {% endfor %}
          </div>
          <div  class="mt-10 svelte-mj7wke">
            <label  class="text-base svelte-mj7wke"> Quantity </label>
              
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props_QuantityBox %}quantity-kvsp-1{% endcapture %}
{% assign modulename = basename | append: 'quantity-box' %}
{% include modulename, liquivelte: true, props: props_QuantityBox, sub_include: true, basename: ''  %}
{% assign props = '' %}
          </div>
          <button type="submit"  class="mt-10 w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 svelte-mj7wke">Add to bag</button>
        </form>
      </div>

      <div  class="py-10 lg:pt-6 lg:pb-16 lg:col-start-1 lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8 svelte-mj7wke">
        <!-- Description and details -->
        <div>
          <h3  class="sr-only svelte-mj7wke">Description</h3>

          <div  class="space-y-6 svelte-mj7wke">
            <div  class="text-base text-gray-900 svelte-mj7wke"> 
              {{ product.description | html }} 
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

{% schema %}{
  "name": "Product Main Section",
  "settings": [
    {
      "type": "text",
      "label": "Product title",
      "id": "product_title"
    },
    {
      "type": "header",
      "content": "Reviews"
    },
    {
      "type": "text",
      "label": "Reviews Title",
      "id": "title",
      "default": "Reviews"
    }
  ],
  "blocks": [
    {
      "name": "Image Gallery",
      "type": "image_gallery",
      "settings": [
        {
          "id": "gallery_type",
          "label": "Gallery Type",
          "default": "sliding_gallery",
          "type": "select",
          "options": [
            {
              "label": "Sliding Gallery",
              "value": "sliding_gallery"
            },
            {
              "label": "Tile of Images",
              "value": "tile_of_images"
            }
          ]
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Main Section Liquivelte",
      "category": "Gallery"
    }
  ]
}{% endschema %}
	
						
		
	<script type="text/noscript"  class="instance-data svelte-mj7wke">
		{% assign component_include_count = component_include_count | plus: 1 %}
		{
	"price_formatted" : {{ price_formatted | json }} , "product" : {{ product | json }}
	,
	"productƒƒoptions_with_values": {{ product.options_with_values | json }} , "sectionƒƒsettings": {{ section.settings | json }} , "productƒƒselected_or_first_available_variant": {{ product.selected_or_first_available_variant | json }}
		,
		"forloop_index": {{ forloop.index0 | default: 0 | json }},
		"component_index": {{ component_include_count | plus: component_include_depth }},
		"component_name": "index"
	}</script>
	
	<script  class="liquivelte-prop-script svelte-mj7wke">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
		const themeImports = (JSONparse(propScript.previousElementSibling.textContent));
		wrapper.svelteProps = wrapper.svelteProps || {};
		Object.keys(themeImports).forEach(key => {
			if(key == 'forloop_index' || key == 'component_index' || key == 'component_name') return;
			wrapper.svelteProps[key] = [
				...(wrapper.svelteProps[key] || []),
				{ forloop_index: themeImports.index, component_index: themeImports.component_index, component_name: themeImports.component_name, value: themeImports[key] }
			];
		});
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	try{
	wrapper.svelteProps["form_inputs_f58d08b6b"] = [...(wrapper.svelteProps["form_inputs_f58d08b6b"] || []), ...window.liquivelte_form_inputs['form_inputs_f58d08b6b'].map(e => htmlDecode(e)) ];
	} catch (e) {
	const err = 'Could not get form inputs, because it is not present in the liquid context please check for f58d08b6b in the main-product.liquid file.';
	console.warn(err);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	try{
	wrapper.svelteProps["form_props_f58d08b6b"] = [...(wrapper.svelteProps["form_props_f58d08b6b"] || []), ...window.liquivelte_form_props['form_props_f58d08b6b'].map(e => parseProps(e)) ];
	} catch (e) {
	const err = 'Could not get form props, because it is not present in the liquid context please check for f58d08b6b in the main-product.liquid file.';
	console.error(err);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	args[0] = args[0].replace(/^"|\\|"$/g, '');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- liquid
			
			
			-%}
	{%- liquid 
			assign slot_default_index = null
			
			-%}
	
	{%- unless sub_include -%} 
	</div>
	{% assign component_include_count = 0 %}
	{%- endunless -%}
	