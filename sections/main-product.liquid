
	{%- liquid
	assign props_arr = props | split: '-prsp-'
	for prop in props_arr
	assign propName = prop | split: '-kvsp-' | first
	assign propValue = prop | split: '-kvsp-' | last | remove: '"'
	if propValue contains '{' and propValue contains '}'
	assign propValue = propValue | remove: '{' | remove: '}'
	assign propValueArr = propValue | split: ','
	for entry in propValueArr
	assign key = entry | split: ':' | first | strip | remove: '"'
	assign value = entry | split: ':' | last | strip | remove: '"'
	assign composite_key = propName | append: '_' | append: key
	
	endfor
	endif
	endfor
	-%}
	{%- unless sub_include -%} 
	<div  class="liquivelte-component main-product svelte-ioqrcr" data-liquivelte-component-name="main-product">
	{%- endunless -%}
	{% liquid 
  assign breadcrumbs1 = request.path | split: '/' 
  for item in breadcrumbs1
    unless item == blank
      assign breadcrumbs = breadcrumbs | append: item
      unless forloop.last
        assign breadcrumbs = breadcrumbs | append: ',' 
      endunless
    endunless
  endfor
  assign breadcrumbs = breadcrumbs | split: ','
  assign breadcrumbs_size = breadcrumbs.size | minus: 1
  assign price_formatted = product.price | money
%}

 

<div  class="bg-white svelte-ioqrcr">
  
    {% include 'breadcrumbs'  %}
    {%- capture rawinclude -%}{% include 'breadcrumbs'  %}{%- endcapture -%}
  <script liquivelte-keep liquivelte-eval>
  window.liquivelte_rawincludes = window.liquivelte_rawincludes || {};
  window.liquivelte_rawincludes['rawinclude_f5b8cf1c'] = [...(window.liquivelte_rawincludes['rawinclude_f5b8cf1c'] || []),`{{ rawinclude | escape | strip_newlines }}`];
  if(document.currentScript){
    document.currentScript.remove();
  }</script>
  {%- assign rawinclude = '' -%}
  <div  class="pt-6 svelte-ioqrcr">
    <!-- Product info -->
    <div  class="max-w-2xl mx-auto pt-10 pb-16 px-4 sm:px-6 lg:max-w-7xl lg:pt-16 lg:pb-24 lg:px-8 lg:grid lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 svelte-ioqrcr">
      <div  class="lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8 svelte-ioqrcr">
        
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}{% endcapture %}
{% assign modulename = basename | append: 'image-gallery' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %}
        <div  class="h-8 md:h-20 svelte-ioqrcr"></div>
        <h1  class="text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl svelte-ioqrcr">{{ section.settings.product_title }} </h1>
      </div>

      <!-- Options -->
      <div  class="mt-4 lg:mt-0 lg:row-span-3 svelte-ioqrcr">
        <h1  class="text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl svelte-ioqrcr">{{ product.title }}</h1>
        <h2  class="sr-only svelte-ioqrcr">Product information</h2> 
        <p  class="text-3xl text-gray-900 mt-4 svelte-ioqrcr">{{ price_formatted }}</p>

        
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}{% endcapture %}
{% assign modulename = basename | append: 'reviews' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %}

        {% capture form_content %}
    {% form 'product', product %}%FC%{% endform %}
    {% endcapture %}
    {% liquid 
      assign form_props = form_content | split: '<form' | last | split: '>' | first
      assign additional_inputs = ''
      assign pieces = form_content | split: '>'
      for piece in pieces
        if piece contains '<input'
          assign additional_inputs = additional_inputs | append: piece | append: '>'
        endif
      endfor
    %}
  <form  class="mt-10 svelte-ioqrcr" {{- form_props -}}>
  {{- additional_inputs -}}
  <script liquivelte-keep liquivelte-eval> 
    window.liquivelte_form_inputs = window.liquivelte_form_inputs || {};
    window.liquivelte_form_props = window.liquivelte_form_props || {};
    window.liquivelte_form_inputs['form_inputs_f58d08b6b'] = [...(window.liquivelte_form_inputs['form_inputs_f58d08b6b'] || []),`{{ additional_inputs | escape }}`];
    window.liquivelte_form_props['form_props_f58d08b6b'] = [...(window.liquivelte_form_props['form_props_f58d08b6b'] || []),`{{ form_props }}`];
    if(document.currentScript){
      document.currentScript.remove();
    }
  </script>
  {% assign additional_inputs = '' %}
          
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
          <div  class=" svelte-ioqrcr">
            {% for option in product.options_with_values %}
    {% assign index = forloop.index0 %}
              <!-- {% comment %} -->
               {@const option_index = forloop.index0 }
               <!-- {% endcomment %} -->
              <!-- {% assign option_index = forloop.index0 %} -->
              <h3  class="text-sm text-gray-900 font-medium mt-4 svelte-ioqrcr"> Choose a {{ option.name }}</h3> 
              <!-- <div  class="ring ring-offset-1 svelte-ioqrcr"> </div> -->
              <fieldset  class="mt-4 svelte-ioqrcr">
                <legend  class="sr-only svelte-ioqrcr">Choose a {{ option.name }}</legend>
                {% if option.name == 'Color' %}
                <div  class="flex items-center space-x-3 svelte-ioqrcr">
                  {% for value in option.values %}
    {% assign index = forloop.index0 %}
                    
	{%- liquid 
	assign dynamic_classes = ''
	  if value == product.selected_or_first_available_variant.options[option_index]
	assign dynamic_classes = dynamic_classes | append: ' ring' | append: ' ring-offset-1'
	endif
	-%}
	<label  class="-m-0.5 relative p-0.5 rounded-full flex items-center justify-center cursor-pointer focus:outline-none ring-gray-400{{ dynamic_classes }} svelte-ioqrcr">
                      {% if value == product.selected_or_first_available_variant.options[option_index] %}
                        <input type="radio" bind:group="{{ selected_options[option.position] }}" name="color-choice" value="{{ value }}"  class="sr-only svelte-ioqrcr" aria-labelledby="color-choice-0-label" checked>
                      {% else %}
                        <input type="radio" bind:group="{{ selected_options[option.position] }}" name="color-choice" value="{{ value }}"  class="sr-only svelte-ioqrcr" aria-labelledby="color-choice-0-label">
                      {% endif %}
                      <p id="color-choice-0-label"  class="sr-only svelte-ioqrcr">{{ value }}</p>
                      <span aria-hidden="true"  class="h-8 w-8 bg-white border border-black border-opacity-10 rounded-full svelte-ioqrcr"></span>
                    </label>
                  {% endfor %}
                </div>
                {% else %}
                <div  class="grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4 svelte-ioqrcr">
                  {% for value in option.values %}
    {% assign index = forloop.index0 %}
                      
	{%- liquid 
	assign dynamic_classes = ''
	  if value == product.selected_or_first_available_variant.options[option_index]
	assign dynamic_classes = dynamic_classes | append: ' bg-indigo-600' | append: ' text-white'
	endif
	  if value != product.selected_or_first_available_variant.options[option_index]
	assign dynamic_classes = dynamic_classes | append: ' text-gray-900'
	endif
	-%}
	<label  class="group relative border rounded-md py-3 hover:bg-indigo-400 hover:text-white px-4 flex items-center justify-center text-sm font-medium uppercase focus:outline-none sm:flex-1 sm:py-6 bg-white shadow-sm cursor-pointer{{ dynamic_classes }} svelte-ioqrcr">
                        {% if value == product.selected_or_first_available_variant.options[option_index] %}
                          <input type="radio" bind:group="{{ selected_options[option.position] }}" name="size-choice" value="{{ value }}"  class="sr-only svelte-ioqrcr" aria-labelledby="size-choice-1-label" checked>
                        {% else %}
                          <input type="radio" bind:group="{{ selected_options[option.position] }}" name="size-choice" value="{{ value }}"  class="sr-only svelte-ioqrcr" aria-labelledby="size-choice-1-label">
                        {% endif %}
                        <p id="size-choice-1-label">{{ value }}</p>
                        <div  class="absolute -inset-px rounded-md pointer-events-none svelte-ioqrcr" aria-hidden="true"></div>
                      </label>
                  {% endfor %}
                </div>
                {% endif %}
              </fieldset>
            {% endfor %}
          </div>
          <div  class="mt-10 svelte-ioqrcr">
            <label  class="text-base svelte-ioqrcr"> Quantity </label>
              
{% comment %}
  kvsp stands for "key value separator"
  prsp stands for "props separator"
{% endcomment %}
{% capture props %}bind:quantity-kvsp-{% endcapture %}
{% assign modulename = basename | append: 'quantity-box' %}
{% include modulename, liquivelte: true, props: props, sub_include: true, basename: '' %}
{% assign props = '' %}
          <div>
          <button type="submit"  class="mt-10 w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 svelte-ioqrcr">Add to bag</button>
        </form>
      </div>

      <div  class="py-10 lg:pt-6 lg:pb-16 lg:col-start-1 lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8 svelte-ioqrcr">
        <!-- Description and details -->
        <div>
          <h3  class="sr-only svelte-ioqrcr">Description</h3>

          <div  class="space-y-6 svelte-ioqrcr">
            <p  class="text-base text-gray-900 svelte-ioqrcr"> {{ product.description | html }}</p>
          </div>
        </div>

        <div  class="mt-10 svelte-ioqrcr">
          <h3  class="text-sm font-medium text-gray-900 svelte-ioqrcr">Highlights</h3>

          <div  class="mt-4 svelte-ioqrcr">
            <ul role="list"  class="pl-4 list-disc text-sm space-y-2 svelte-ioqrcr">
              <li  class="text-gray-400 svelte-ioqrcr"><span  class="text-gray-600 svelte-ioqrcr">Hand cut and sewn locally</span></li>

              <li  class="text-gray-400 svelte-ioqrcr"><span  class="text-gray-600 svelte-ioqrcr">Dyed with our proprietary colors</span></li>

              <li  class="text-gray-400 svelte-ioqrcr"><span  class="text-gray-600 svelte-ioqrcr">Pre-washed &amp; pre-shrunk</span></li>

              <li  class="text-gray-400 svelte-ioqrcr"><span  class="text-gray-600 svelte-ioqrcr">Ultra-soft 100% cotton</span></li>
            </ul>
          </div>
        </div>

        <div  class="mt-10 svelte-ioqrcr">
          <h2  class="text-sm font-medium text-gray-900 svelte-ioqrcr">Details</h2>

          <div  class="mt-4 space-y-6 svelte-ioqrcr">
            <p  class="text-sm text-gray-600 svelte-ioqrcr">The 6-Pack includes two black, two white, and two heather gray Basic Tees. Sign up for our subscription service and be the first to get new, exciting colors, like our upcoming &quot;Charcoal Gray&quot; limited release.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% schema %}{
  "name": "Product Main Section",
  "settings": [
    {
      "type": "text",
      "label": "Product title",
      "id": "product_title"
    },
    {
      "type": "header",
      "content": "Reviews"
    },
    {
      "type": "text",
      "label": "Reviews Title",
      "id": "title",
      "default": "Reviews"
    }
  ],
  "blocks": [
    {
      "name": "Image Gallery",
      "type": "image_gallery",
      "settings": [
        {
          "id": "gallery_type",
          "label": "Gallery Type",
          "default": "sliding_gallery",
          "type": "select",
          "options": [
            {
              "label": "Sliding Gallery",
              "value": "sliding_gallery"
            },
            {
              "label": "Tile of Images",
              "value": "tile_of_images"
            }
          ]
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Main Section Liquivelte",
      "category": "Gallery"
    }
  ]
}{% endschema %}
	
						
						
	<script type="text/noscript"  class="instance-data svelte-ioqrcr">{
	"product" : {{ product | json }} , "review_stars" : {{ review_stars | json }} , "score" : {{ score | json }} , "reviews_count" : {{ reviews_count | json }} , "inputWidth" : {{ inputWidth | json }} , "breadcrumbs" : {{ breadcrumbs | json }} , "breadcrumbs_size" : {{ breadcrumbs_size | json }} , "price_formatted" : {{ price_formatted | json }} 
	,
	"productƒƒoptions_with_values": {{ product.options_with_values | json }} , "sectionƒƒsettings": {{ section.settings | json }} , "productƒƒselected_or_first_available_variant": {{ product.selected_or_first_available_variant | json }} 

	}</script>
	
	<script  class="liquivelte-prop-script svelte-ioqrcr">(() => {
	var propScript = Shopify.designMode && window.propScriptForDesignMode ? window.propScriptForDesignMode : document.currentScript;
	function parseProps(e){const s={};let t={bracketsOpened:0,get open(){return this.bracketsOpened>0},set open(e){!0===e?this.bracketsOpened=this.bracketsOpened+1:!1===e&&(this.bracketsOpened=this.bracketsOpened-1)}},a=` ${e} `.split(""),r=!1,c=!1,n=!1,p=!1,o="",b="";for(let e=0;e<a.length;e++){const k=a[e];switch(!0){case" "===k:p||t.open||(c=!1),!n||p||t.open||(n=!1);break;case"{"===k:t.open=!0,n||(c=!0);break;case"}"===k:t.open=!1;break;case'"'===k:p=!p;break;case"="===k:c&&(c=!1,n=!0,r=!0);break;case/[^\s]/.test(k):n||(c=!0)}!c||n||r?c||!n||r?c||n||(o&&(s[o]=b.replace(/^"/,"").replace(/"$/,"")),b="",o=""):b+=k:o+=k,r=!1}return Object.keys(s).map((e=>{if(/\{\s*\.\.\.(\w+)\s*\}/.test(e)){const[,t]=e.match(/\{\s*\.\.\.(\w+)\s*\}/);s.spread=t,delete s[e]}})),s}
	function JSONparse(n){try{return JSON.parse(n)}catch(t){try{const e=parseInt(t.message.match(/position\s+(\d+)/)[1],10),s=n.slice(0,e+1).split("\n"),i=s.length,l=n.split("\n"),r=s[s.length-1].length-1,c=l.slice(0,i).join("\n")+"\n"+new Array(r).fill(" ").join("")+"👆\n"+l.slice(i).join("\n");return console.log(c),{}}catch(n){throw t}}}
	function htmlDecode(input) {
	var doc = new DOMParser().parseFromString(input, "text/html");
	return doc.documentElement.textContent;
	}
	function componentWrapper(el) {
	if(el.classList.contains('liquivelte-component')) {
	return el;
	} else {
	return componentWrapper(el.parentElement);
	}
	}
	var wrapper = componentWrapper(propScript.parentElement);
	// console.log('wrapper', wrapper);
	// console.log('parsing props for svelte component');
	try{
	wrapper.svelteProps = { ...(wrapper.svelteProps || {}), ...(JSONparse(propScript.previousElementSibling.textContent)) };
	} catch (e) {
	const err = 'There was an error';
	console.error('there was an error parsing props json', e);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	try{
	wrapper.svelteProps["form_inputs_f58d08b6b"] = [...(wrapper.svelteProps["form_inputs_f58d08b6b"] || []), ...window.liquivelte_form_inputs['form_inputs_f58d08b6b'].map(e => htmlDecode(e)) ];
	} catch (e) {
	const err = 'Could not get form inputs, because it is not present in the liquid context please check for f58d08b6b in the main-product.liquid file.';
	console.error(err);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	try{
	wrapper.svelteProps["form_props_f58d08b6b"] = [...(wrapper.svelteProps["form_props_f58d08b6b"] || []), ...window.liquivelte_form_props['form_props_f58d08b6b'].map(e => parseProps(e)) ];
	} catch (e) {
	const err = 'Could not get form props, because it is not present in the liquid context please check for f58d08b6b in the main-product.liquid file.';
	console.error(err);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}
	
	
	try{
	wrapper.svelteProps["rawinclude_f5b8cf1c"] = [...(wrapper.svelteProps["rawinclude_f5b8cf1c"] || []), ...window.liquivelte_rawincludes['rawinclude_f5b8cf1c'].map(e => htmlDecode(e)) ];
	} catch (e) {
	const err = 'Could not grab liquid include, because it is not present in the liquid context please check for rawinclude_f5b8cf1c in the main-product.liquid file.';
	console.error(err);
	wrapper.svelteProps = { ...wrapper.svelteProps, error: (wrapper.svelteProps.error || '') + err};
	}

	

	// liquid expression cache
	[...wrapper.querySelectorAll('[liquivelte-value-cache]')].forEach(el => {
	let [filter, args, value] = el.getAttribute('liquivelte-value-cache').split('§');
	args = args.split(', ');
	wrapper.liquid_expression_cache = wrapper.liquid_expression_cache || {};
	wrapper.liquid_expression_cache[filter] = wrapper.liquid_expression_cache[filter] || new Map;
	wrapper.liquid_expression_cache[filter].set(`${args.join(',')}`, value);
	});

	if(propScript){
	propScript.remove();
	}
	if(propScript.previousElementSibling) {
	propScript.previousElementSibling.remove();
	}
	})();</script>
	{%- unless sub_include -%} 
	</div>
	{%- endunless -%}
	